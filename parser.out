Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RES_SET
    ENDI
    TAB
    RES_ELIF
    NEW_LINE
    VAR
    AND
    OR

Grammar

Rule 0     S' -> programa
Rule 1     programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 main programa3
Rule 2     programa -> empty
Rule 3     prueba -> <empty>
Rule 4     generaglo -> <empty>
Rule 5     programa1 -> RES_PROTO prototipos seen_prototipo programa1
Rule 6     programa1 -> empty
Rule 7     seen_prototipo -> <empty>
Rule 8     programa2 -> vars programa2
Rule 9     programa2 -> empty
Rule 10    valida_entra_global -> <empty>
Rule 11    valida_salir_gobal -> <empty>
Rule 12    programa3 -> programa3 modulos
Rule 13    programa3 -> empty
Rule 14    prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN
Rule 15    seen_dato -> <empty>
Rule 16    prototipos_1 -> tipo ID prototipos_2
Rule 17    prototipos_2 -> COMMA prototipos_1
Rule 18    prototipos_2 -> empty
Rule 19    dato -> RES_INT
Rule 20    dato -> RES_FLOAT
Rule 21    dato -> RES_DOUBLE
Rule 22    dato -> RES_BOOLEAN
Rule 23    dato -> RES_STRING
Rule 24    tipo -> dato
Rule 25    tipo -> estructura
Rule 26    estructura -> list
Rule 27    estructura -> array
Rule 28    vars -> RES_DEF COL vars1
Rule 29    vars1 -> estructura vars1
Rule 30    vars1 -> dato ID vars2 vars1_1
Rule 31    vars1_1 -> vars1
Rule 32    vars1_1 -> empty
Rule 33    vars2 -> EQUALS cons
Rule 34    vars2 -> vars3
Rule 35    vars3 -> COMMA ID vars3
Rule 36    vars3 -> empty
Rule 37    list -> RES_LIST dato ID list1
Rule 38    list1 -> LCURLY cons_loop RCURLY
Rule 39    list1 -> empty
Rule 40    cons_loop -> cons cons_loop_1
Rule 41    cons_loop_1 -> COMMA cons_loop
Rule 42    cons_loop_1 -> empty
Rule 43    array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1
Rule 44    array1 -> COL LBRACKET array2 RBRACKET
Rule 45    array1 -> empty
Rule 46    array2 -> cons
Rule 47    array2 -> cons COMMA array2
Rule 48    modulos -> prototipos se_uso COL bloque
Rule 49    se_uso -> <empty>
Rule 50    bloque -> estatutos bloque
Rule 51    bloque -> empty
Rule 52    estatutos -> condicion E_END
Rule 53    estatutos -> ciclo E_END
Rule 54    estatutos -> lectura
Rule 55    estatutos -> escritura
Rule 56    estatutos -> asignacion
Rule 57    estatutos -> llamada
Rule 58    estatutos -> vars
Rule 59    ciclo -> while
Rule 60    ciclo -> for
Rule 61    condicion -> if
Rule 62    condicion -> switch
Rule 63    llamada -> ID LPAREN llamada1 RPAREN
Rule 64    llamada1 -> expresion
Rule 65    llamada1 -> empty
Rule 66    lectura -> RES_READ LPAREN tipo RPAREN
Rule 67    escritura -> RES_PRINT LPAREN escritura1 RPAREN
Rule 68    escritura1 -> expresion
Rule 69    escritura1 -> CTE_STRING
Rule 70    asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
Rule 71    cuadruplo_exp_8_asignacion -> <empty>
Rule 72    cuadruplo_exp_9_asignacion -> <empty>
Rule 73    seen_id_asignacion -> ID
Rule 74    insert_asignacion -> <empty>
Rule 75    asignacion1 -> exp
Rule 76    asignacion1 -> asignlist
Rule 77    asignacion1 -> asignarray
Rule 78    asignlist -> LCURLY asignlist1 RCURLY
Rule 79    asignlist1 -> cons
Rule 80    asignlist1 -> cons COMMA asignlist1
Rule 81    asignarray -> LBRACKET asignarray1 RBRACKET
Rule 82    asignarray1 -> cons
Rule 83    asignarray1 -> cons COMMA asignarray1
Rule 84    while -> RES_WHILE LPAREN expresion RPAREN COL bloque
Rule 85    for -> RES_FOR LPAREN forexp RPAREN COL bloque
Rule 86    forexp -> ID EQUALS cons COL expresion COL ID EQUALS expresion
Rule 87    if -> RES_IF LPAREN expresion RPAREN COL bloque ifelse
Rule 88    ifelse -> RES_ELSE COL bloque
Rule 89    ifelse -> empty
Rule 90    switch -> RES_SWITCH COL switch2
Rule 91    switch2 -> RES_CASE expresion COL bloque switch2
Rule 92    switch2 -> empty
Rule 93    expresion -> exp expresion_1 cuadruplo_exp_9
Rule 94    expresion_1 -> see_rel cuadruplo_exp_8 exp
Rule 95    expresion_1 -> empty
Rule 96    see_rel -> MIN
Rule 97    see_rel -> MIN_EQ
Rule 98    see_rel -> MAY
Rule 99    see_rel -> MAY_EQ
Rule 100   see_rel -> DIF
Rule 101   see_rel -> EQ_EQ
Rule 102   cuadruplo_exp_8 -> <empty>
Rule 103   cuadruplo_exp_9 -> <empty>
Rule 104   exp -> termino cuadruplo_exp_4 exp1
Rule 105   exp1 -> see_operador_e cuadruplos_exp_2 exp
Rule 106   exp1 -> empty
Rule 107   see_operador_e -> PLUS
Rule 108   see_operador_e -> MINUS
Rule 109   cuadruplos_exp_2 -> <empty>
Rule 110   termino -> factor cuadruplo_exp_5 termino1
Rule 111   termino1 -> see_operador_f cuadruplos_exp_3 termino
Rule 112   termino1 -> empty
Rule 113   see_operador_f -> TIMES
Rule 114   see_operador_f -> DIVIDE
Rule 115   cuadruplos_exp_3 -> <empty>
Rule 116   cuadruplo_exp_4 -> <empty>
Rule 117   cuadruplo_exp_5 -> <empty>
Rule 118   factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
Rule 119   factor -> cons
Rule 120   factor -> PLUS cons
Rule 121   factor -> MINUS cons
Rule 122   cuadruplo_exp_6 -> <empty>
Rule 123   cuadruplo_exp_7 -> <empty>
Rule 124   cons -> seen_id_cons exp_1
Rule 125   cons -> seen_int_cons exp_cons_int
Rule 126   cons -> seen_float_cons exp_cons_float
Rule 127   cons -> CTE_DOUBLE
Rule 128   cons -> CTE_STRING
Rule 129   cons -> RES_TRUE
Rule 130   cons -> RES_FALSE
Rule 131   cons -> consarray
Rule 132   cons -> conslist
Rule 133   seen_id_cons -> ID
Rule 134   seen_float_cons -> CTE_FLOAT
Rule 135   seen_int_cons -> CTE_INT
Rule 136   exp_1 -> <empty>
Rule 137   exp_cons_int -> <empty>
Rule 138   exp_cons_float -> <empty>
Rule 139   main -> RES_START comienza_main COL bloque RES_END
Rule 140   comienza_main -> <empty>
Rule 141   consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons
Rule 142   conslist -> ID EQUALS LCURLY conslist1 RCURLY
Rule 143   conslist1 -> cons
Rule 144   conslist1 -> cons COMMA conslist1
Rule 145   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
COL                  : 28 44 48 84 85 86 86 87 88 90 91 139
COMMA                : 17 35 41 47 80 83 144
CTE_DOUBLE           : 127
CTE_FLOAT            : 134
CTE_INT              : 43 135 141
CTE_STRING           : 69 128
DIF                  : 100
DIVIDE               : 114
ENDI                 : 
EQUALS               : 33 70 86 86 141 142
EQ_EQ                : 101
E_END                : 52 53
ID                   : 14 16 30 35 37 43 63 73 86 86 133 141 142
LBRACKET             : 43 44 81 141
LCURLY               : 38 78 142
LPAREN               : 14 63 66 67 84 85 87 118
MAY                  : 98
MAY_EQ               : 99
MIN                  : 96
MINUS                : 108 121
MIN_EQ               : 97
NEW_LINE             : 
OR                   : 
PLUS                 : 107 120
RBRACKET             : 43 44 81 141
RCURLY               : 38 78 142
RES_ARRAY            : 43
RES_BOOLEAN          : 22
RES_CASE             : 91
RES_DEF              : 28
RES_DOUBLE           : 21
RES_ELIF             : 
RES_ELSE             : 88
RES_END              : 139
RES_FALSE            : 130
RES_FLOAT            : 20
RES_FOR              : 85
RES_FUNC             : 14
RES_IF               : 87
RES_INT              : 19
RES_LIST             : 37
RES_PRINT            : 67
RES_PROTO            : 5
RES_READ             : 66
RES_SET              : 
RES_START            : 139
RES_STRING           : 23
RES_SWITCH           : 90
RES_TRUE             : 129
RES_WHILE            : 84
RPAREN               : 14 63 66 67 84 85 87 118
TAB                  : 
TIMES                : 113
VAR                  : 
error                : 

Nonterminals, with rules where they appear

array                : 27
array1               : 43
array2               : 44 47
asignacion           : 56
asignacion1          : 70
asignarray           : 77
asignarray1          : 81 83
asignlist            : 76
asignlist1           : 78 80
bloque               : 48 50 84 85 87 88 91 139
ciclo                : 53
comienza_main        : 139
condicion            : 52
cons                 : 33 40 46 47 79 80 82 83 86 119 120 121 141 143 144
cons_loop            : 38 41
cons_loop_1          : 40
consarray            : 131
conslist             : 132
conslist1            : 142 144
cuadruplo_exp_4      : 104
cuadruplo_exp_5      : 110
cuadruplo_exp_6      : 118
cuadruplo_exp_7      : 118
cuadruplo_exp_8      : 94
cuadruplo_exp_8_asignacion : 70
cuadruplo_exp_9      : 93
cuadruplo_exp_9_asignacion : 70
cuadruplos_exp_2     : 105
cuadruplos_exp_3     : 111
dato                 : 14 24 30 37 43
empty                : 2 6 9 13 18 32 36 39 42 45 51 65 89 92 95 106 112
escritura            : 55
escritura1           : 67
estatutos            : 50
estructura           : 25 29
exp                  : 75 93 94 105 118
exp1                 : 104
exp_1                : 124
exp_cons_float       : 126
exp_cons_int         : 125
expresion            : 64 68 84 86 86 87 91
expresion_1          : 93
factor               : 110
for                  : 60
forexp               : 85
generaglo            : 1
if                   : 61
ifelse               : 87
insert_asignacion    : 70
lectura              : 54
list                 : 26
list1                : 37
llamada              : 57
llamada1             : 63
main                 : 1
modulos              : 12
programa             : 0
programa1            : 1 5
programa2            : 1 8
programa3            : 1 1 12
prototipos           : 5 48
prototipos_1         : 14 17
prototipos_2         : 16
prueba               : 
se_uso               : 48
see_operador_e       : 105
see_operador_f       : 111
see_rel              : 94
seen_dato            : 14
seen_float_cons      : 126
seen_id_asignacion   : 70
seen_id_cons         : 124
seen_int_cons        : 125
seen_prototipo       : 5
switch               : 62
switch2              : 90 91
termino              : 104 111
termino1             : 110
tipo                 : 16 66
valida_entra_global  : 1
valida_salir_gobal   : 1
vars                 : 8 58
vars1                : 28 29 31
vars1_1              : 30
vars2                : 30
vars3                : 34 35
while                : 59

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 main programa3
    (2) programa -> . empty
    (5) programa1 -> . RES_PROTO prototipos seen_prototipo programa1
    (6) programa1 -> . empty
    (145) empty -> .

    RES_PROTO       shift and go to state 3
    $end            reduce using rule 145 (empty -> .)
    RES_DEF         reduce using rule 145 (empty -> .)
    RES_START       reduce using rule 145 (empty -> .)
    RES_FUNC        reduce using rule 145 (empty -> .)

    programa1                      shift and go to state 1
    programa                       shift and go to state 2
    empty                          shift and go to state 4

state 1

    (1) programa -> programa1 . valida_entra_global generaglo programa2 valida_salir_gobal programa3 main programa3
    (10) valida_entra_global -> .

    RES_DEF         reduce using rule 10 (valida_entra_global -> .)
    RES_START       reduce using rule 10 (valida_entra_global -> .)
    RES_FUNC        reduce using rule 10 (valida_entra_global -> .)

    valida_entra_global            shift and go to state 5

state 2

    (0) S' -> programa .



state 3

    (5) programa1 -> RES_PROTO . prototipos seen_prototipo programa1
    (14) prototipos -> . RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN

    RES_FUNC        shift and go to state 7

    prototipos                     shift and go to state 6

state 4

    (2) programa -> empty .
    (6) programa1 -> empty .

    $end            reduce using rule 2 (programa -> empty .)
    RES_DEF         reduce using rule 6 (programa1 -> empty .)
    RES_START       reduce using rule 6 (programa1 -> empty .)
    RES_FUNC        reduce using rule 6 (programa1 -> empty .)


state 5

    (1) programa -> programa1 valida_entra_global . generaglo programa2 valida_salir_gobal programa3 main programa3
    (4) generaglo -> .

    RES_DEF         reduce using rule 4 (generaglo -> .)
    RES_START       reduce using rule 4 (generaglo -> .)
    RES_FUNC        reduce using rule 4 (generaglo -> .)

    generaglo                      shift and go to state 8

state 6

    (5) programa1 -> RES_PROTO prototipos . seen_prototipo programa1
    (7) seen_prototipo -> .

    RES_PROTO       reduce using rule 7 (seen_prototipo -> .)
    RES_DEF         reduce using rule 7 (seen_prototipo -> .)
    RES_START       reduce using rule 7 (seen_prototipo -> .)
    RES_FUNC        reduce using rule 7 (seen_prototipo -> .)

    seen_prototipo                 shift and go to state 9

state 7

    (14) prototipos -> RES_FUNC . dato seen_dato ID LPAREN prototipos_1 RPAREN
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12

    dato                           shift and go to state 14

state 8

    (1) programa -> programa1 valida_entra_global generaglo . programa2 valida_salir_gobal programa3 main programa3
    (8) programa2 -> . vars programa2
    (9) programa2 -> . empty
    (28) vars -> . RES_DEF COL vars1
    (145) empty -> .

    RES_DEF         shift and go to state 18
    RES_START       reduce using rule 145 (empty -> .)
    RES_FUNC        reduce using rule 145 (empty -> .)

    vars                           shift and go to state 16
    programa2                      shift and go to state 17
    empty                          shift and go to state 19

state 9

    (5) programa1 -> RES_PROTO prototipos seen_prototipo . programa1
    (5) programa1 -> . RES_PROTO prototipos seen_prototipo programa1
    (6) programa1 -> . empty
    (145) empty -> .

    RES_PROTO       shift and go to state 3
    RES_DEF         reduce using rule 145 (empty -> .)
    RES_START       reduce using rule 145 (empty -> .)
    RES_FUNC        reduce using rule 145 (empty -> .)

    empty                          shift and go to state 20
    programa1                      shift and go to state 21

state 10

    (22) dato -> RES_BOOLEAN .

    ID              reduce using rule 22 (dato -> RES_BOOLEAN .)
    RPAREN          reduce using rule 22 (dato -> RES_BOOLEAN .)


state 11

    (19) dato -> RES_INT .

    ID              reduce using rule 19 (dato -> RES_INT .)
    RPAREN          reduce using rule 19 (dato -> RES_INT .)


state 12

    (23) dato -> RES_STRING .

    ID              reduce using rule 23 (dato -> RES_STRING .)
    RPAREN          reduce using rule 23 (dato -> RES_STRING .)


state 13

    (21) dato -> RES_DOUBLE .

    ID              reduce using rule 21 (dato -> RES_DOUBLE .)
    RPAREN          reduce using rule 21 (dato -> RES_DOUBLE .)


state 14

    (14) prototipos -> RES_FUNC dato . seen_dato ID LPAREN prototipos_1 RPAREN
    (15) seen_dato -> .

    ID              reduce using rule 15 (seen_dato -> .)

    seen_dato                      shift and go to state 22

state 15

    (20) dato -> RES_FLOAT .

    ID              reduce using rule 20 (dato -> RES_FLOAT .)
    RPAREN          reduce using rule 20 (dato -> RES_FLOAT .)


state 16

    (8) programa2 -> vars . programa2
    (8) programa2 -> . vars programa2
    (9) programa2 -> . empty
    (28) vars -> . RES_DEF COL vars1
    (145) empty -> .

    RES_DEF         shift and go to state 18
    RES_START       reduce using rule 145 (empty -> .)
    RES_FUNC        reduce using rule 145 (empty -> .)

    programa2                      shift and go to state 23
    empty                          shift and go to state 19
    vars                           shift and go to state 16

state 17

    (1) programa -> programa1 valida_entra_global generaglo programa2 . valida_salir_gobal programa3 main programa3
    (11) valida_salir_gobal -> .

    RES_START       reduce using rule 11 (valida_salir_gobal -> .)
    RES_FUNC        reduce using rule 11 (valida_salir_gobal -> .)

    valida_salir_gobal             shift and go to state 24

state 18

    (28) vars -> RES_DEF . COL vars1

    COL             shift and go to state 25


state 19

    (9) programa2 -> empty .

    RES_START       reduce using rule 9 (programa2 -> empty .)
    RES_FUNC        reduce using rule 9 (programa2 -> empty .)


state 20

    (6) programa1 -> empty .

    RES_DEF         reduce using rule 6 (programa1 -> empty .)
    RES_START       reduce using rule 6 (programa1 -> empty .)
    RES_FUNC        reduce using rule 6 (programa1 -> empty .)


state 21

    (5) programa1 -> RES_PROTO prototipos seen_prototipo programa1 .

    RES_DEF         reduce using rule 5 (programa1 -> RES_PROTO prototipos seen_prototipo programa1 .)
    RES_START       reduce using rule 5 (programa1 -> RES_PROTO prototipos seen_prototipo programa1 .)
    RES_FUNC        reduce using rule 5 (programa1 -> RES_PROTO prototipos seen_prototipo programa1 .)


state 22

    (14) prototipos -> RES_FUNC dato seen_dato . ID LPAREN prototipos_1 RPAREN

    ID              shift and go to state 26


state 23

    (8) programa2 -> vars programa2 .

    RES_START       reduce using rule 8 (programa2 -> vars programa2 .)
    RES_FUNC        reduce using rule 8 (programa2 -> vars programa2 .)


state 24

    (1) programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal . programa3 main programa3
    (12) programa3 -> . programa3 modulos
    (13) programa3 -> . empty
    (145) empty -> .

    RES_START       reduce using rule 145 (empty -> .)
    RES_FUNC        reduce using rule 145 (empty -> .)

    programa3                      shift and go to state 27
    empty                          shift and go to state 28

state 25

    (28) vars -> RES_DEF COL . vars1
    (29) vars1 -> . estructura vars1
    (30) vars1 -> . dato ID vars2 vars1_1
    (26) estructura -> . list
    (27) estructura -> . array
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    estructura                     shift and go to state 31
    list                           shift and go to state 34
    vars1                          shift and go to state 30
    dato                           shift and go to state 33
    array                          shift and go to state 29

state 26

    (14) prototipos -> RES_FUNC dato seen_dato ID . LPAREN prototipos_1 RPAREN

    LPAREN          shift and go to state 36


state 27

    (1) programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 . main programa3
    (12) programa3 -> programa3 . modulos
    (139) main -> . RES_START comienza_main COL bloque RES_END
    (48) modulos -> . prototipos se_uso COL bloque
    (14) prototipos -> . RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN

    RES_START       shift and go to state 38
    RES_FUNC        shift and go to state 7

    prototipos                     shift and go to state 37
    modulos                        shift and go to state 40
    main                           shift and go to state 39

state 28

    (13) programa3 -> empty .

    RES_FUNC        reduce using rule 13 (programa3 -> empty .)
    $end            reduce using rule 13 (programa3 -> empty .)
    RES_START       reduce using rule 13 (programa3 -> empty .)


state 29

    (27) estructura -> array .

    RPAREN          reduce using rule 27 (estructura -> array .)
    ID              reduce using rule 27 (estructura -> array .)
    RES_INT         reduce using rule 27 (estructura -> array .)
    RES_FLOAT       reduce using rule 27 (estructura -> array .)
    RES_DOUBLE      reduce using rule 27 (estructura -> array .)
    RES_BOOLEAN     reduce using rule 27 (estructura -> array .)
    RES_STRING      reduce using rule 27 (estructura -> array .)
    RES_LIST        reduce using rule 27 (estructura -> array .)
    RES_ARRAY       reduce using rule 27 (estructura -> array .)


state 30

    (28) vars -> RES_DEF COL vars1 .

    RES_READ        reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_PRINT       reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    ID              reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_DEF         reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_IF          reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_SWITCH      reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_WHILE       reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_FOR         reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_END         reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_START       reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_FUNC        reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    $end            reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_CASE        reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    E_END           reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_ELSE        reduce using rule 28 (vars -> RES_DEF COL vars1 .)


state 31

    (29) vars1 -> estructura . vars1
    (29) vars1 -> . estructura vars1
    (30) vars1 -> . dato ID vars2 vars1_1
    (26) estructura -> . list
    (27) estructura -> . array
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    list                           shift and go to state 34
    estructura                     shift and go to state 31
    dato                           shift and go to state 33
    vars1                          shift and go to state 41
    array                          shift and go to state 29

state 32

    (37) list -> RES_LIST . dato ID list1
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12

    dato                           shift and go to state 42

state 33

    (30) vars1 -> dato . ID vars2 vars1_1

    ID              shift and go to state 43


state 34

    (26) estructura -> list .

    RPAREN          reduce using rule 26 (estructura -> list .)
    ID              reduce using rule 26 (estructura -> list .)
    RES_INT         reduce using rule 26 (estructura -> list .)
    RES_FLOAT       reduce using rule 26 (estructura -> list .)
    RES_DOUBLE      reduce using rule 26 (estructura -> list .)
    RES_BOOLEAN     reduce using rule 26 (estructura -> list .)
    RES_STRING      reduce using rule 26 (estructura -> list .)
    RES_LIST        reduce using rule 26 (estructura -> list .)
    RES_ARRAY       reduce using rule 26 (estructura -> list .)


state 35

    (43) array -> RES_ARRAY . dato ID LBRACKET CTE_INT RBRACKET array1
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12

    dato                           shift and go to state 44

state 36

    (14) prototipos -> RES_FUNC dato seen_dato ID LPAREN . prototipos_1 RPAREN
    (16) prototipos_1 -> . tipo ID prototipos_2
    (24) tipo -> . dato
    (25) tipo -> . estructura
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (26) estructura -> . list
    (27) estructura -> . array
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    tipo                           shift and go to state 46
    prototipos_1                   shift and go to state 45
    list                           shift and go to state 34
    estructura                     shift and go to state 47
    dato                           shift and go to state 48
    array                          shift and go to state 29

state 37

    (48) modulos -> prototipos . se_uso COL bloque
    (49) se_uso -> .

    COL             reduce using rule 49 (se_uso -> .)

    se_uso                         shift and go to state 49

state 38

    (139) main -> RES_START . comienza_main COL bloque RES_END
    (140) comienza_main -> .

    COL             reduce using rule 140 (comienza_main -> .)

    comienza_main                  shift and go to state 50

state 39

    (1) programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 main . programa3
    (12) programa3 -> . programa3 modulos
    (13) programa3 -> . empty
    (145) empty -> .

    RES_FUNC        reduce using rule 145 (empty -> .)
    $end            reduce using rule 145 (empty -> .)

    programa3                      shift and go to state 51
    empty                          shift and go to state 28

state 40

    (12) programa3 -> programa3 modulos .

    RES_FUNC        reduce using rule 12 (programa3 -> programa3 modulos .)
    $end            reduce using rule 12 (programa3 -> programa3 modulos .)
    RES_START       reduce using rule 12 (programa3 -> programa3 modulos .)


state 41

    (29) vars1 -> estructura vars1 .

    RES_DEF         reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_START       reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_FUNC        reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_READ        reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_PRINT       reduce using rule 29 (vars1 -> estructura vars1 .)
    ID              reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_IF          reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_SWITCH      reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_WHILE       reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_FOR         reduce using rule 29 (vars1 -> estructura vars1 .)
    $end            reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_END         reduce using rule 29 (vars1 -> estructura vars1 .)
    E_END           reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_ELSE        reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_CASE        reduce using rule 29 (vars1 -> estructura vars1 .)


state 42

    (37) list -> RES_LIST dato . ID list1

    ID              shift and go to state 52


state 43

    (30) vars1 -> dato ID . vars2 vars1_1
    (33) vars2 -> . EQUALS cons
    (34) vars2 -> . vars3
    (35) vars3 -> . COMMA ID vars3
    (36) vars3 -> . empty
    (145) empty -> .

    EQUALS          shift and go to state 53
    COMMA           shift and go to state 56
    RES_INT         reduce using rule 145 (empty -> .)
    RES_FLOAT       reduce using rule 145 (empty -> .)
    RES_DOUBLE      reduce using rule 145 (empty -> .)
    RES_BOOLEAN     reduce using rule 145 (empty -> .)
    RES_STRING      reduce using rule 145 (empty -> .)
    RES_LIST        reduce using rule 145 (empty -> .)
    RES_ARRAY       reduce using rule 145 (empty -> .)
    RES_DEF         reduce using rule 145 (empty -> .)
    RES_START       reduce using rule 145 (empty -> .)
    RES_FUNC        reduce using rule 145 (empty -> .)
    RES_READ        reduce using rule 145 (empty -> .)
    RES_PRINT       reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    RES_IF          reduce using rule 145 (empty -> .)
    RES_SWITCH      reduce using rule 145 (empty -> .)
    RES_WHILE       reduce using rule 145 (empty -> .)
    RES_FOR         reduce using rule 145 (empty -> .)
    $end            reduce using rule 145 (empty -> .)
    RES_END         reduce using rule 145 (empty -> .)
    E_END           reduce using rule 145 (empty -> .)
    RES_ELSE        reduce using rule 145 (empty -> .)
    RES_CASE        reduce using rule 145 (empty -> .)

    vars3                          shift and go to state 54
    vars2                          shift and go to state 55
    empty                          shift and go to state 57

state 44

    (43) array -> RES_ARRAY dato . ID LBRACKET CTE_INT RBRACKET array1

    ID              shift and go to state 58


state 45

    (14) prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 . RPAREN

    RPAREN          shift and go to state 59


state 46

    (16) prototipos_1 -> tipo . ID prototipos_2

    ID              shift and go to state 60


state 47

    (25) tipo -> estructura .

    ID              reduce using rule 25 (tipo -> estructura .)
    RPAREN          reduce using rule 25 (tipo -> estructura .)


state 48

    (24) tipo -> dato .

    ID              reduce using rule 24 (tipo -> dato .)
    RPAREN          reduce using rule 24 (tipo -> dato .)


state 49

    (48) modulos -> prototipos se_uso . COL bloque

    COL             shift and go to state 61


state 50

    (139) main -> RES_START comienza_main . COL bloque RES_END

    COL             shift and go to state 62


state 51

    (1) programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 main programa3 .
    (12) programa3 -> programa3 . modulos
    (48) modulos -> . prototipos se_uso COL bloque
    (14) prototipos -> . RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN

    $end            reduce using rule 1 (programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 main programa3 .)
    RES_FUNC        shift and go to state 7

    prototipos                     shift and go to state 37
    modulos                        shift and go to state 40

state 52

    (37) list -> RES_LIST dato ID . list1
    (38) list1 -> . LCURLY cons_loop RCURLY
    (39) list1 -> . empty
    (145) empty -> .

    LCURLY          shift and go to state 64
    RES_INT         reduce using rule 145 (empty -> .)
    RES_FLOAT       reduce using rule 145 (empty -> .)
    RES_DOUBLE      reduce using rule 145 (empty -> .)
    RES_BOOLEAN     reduce using rule 145 (empty -> .)
    RES_STRING      reduce using rule 145 (empty -> .)
    RES_LIST        reduce using rule 145 (empty -> .)
    RES_ARRAY       reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    RPAREN          reduce using rule 145 (empty -> .)

    list1                          shift and go to state 63
    empty                          shift and go to state 65

state 53

    (33) vars2 -> EQUALS . cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 66
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_id_cons                   shift and go to state 68

state 54

    (34) vars2 -> vars3 .

    RES_INT         reduce using rule 34 (vars2 -> vars3 .)
    RES_FLOAT       reduce using rule 34 (vars2 -> vars3 .)
    RES_DOUBLE      reduce using rule 34 (vars2 -> vars3 .)
    RES_BOOLEAN     reduce using rule 34 (vars2 -> vars3 .)
    RES_STRING      reduce using rule 34 (vars2 -> vars3 .)
    RES_LIST        reduce using rule 34 (vars2 -> vars3 .)
    RES_ARRAY       reduce using rule 34 (vars2 -> vars3 .)
    RES_DEF         reduce using rule 34 (vars2 -> vars3 .)
    RES_START       reduce using rule 34 (vars2 -> vars3 .)
    RES_FUNC        reduce using rule 34 (vars2 -> vars3 .)
    RES_READ        reduce using rule 34 (vars2 -> vars3 .)
    RES_PRINT       reduce using rule 34 (vars2 -> vars3 .)
    ID              reduce using rule 34 (vars2 -> vars3 .)
    RES_IF          reduce using rule 34 (vars2 -> vars3 .)
    RES_SWITCH      reduce using rule 34 (vars2 -> vars3 .)
    RES_WHILE       reduce using rule 34 (vars2 -> vars3 .)
    RES_FOR         reduce using rule 34 (vars2 -> vars3 .)
    $end            reduce using rule 34 (vars2 -> vars3 .)
    RES_END         reduce using rule 34 (vars2 -> vars3 .)
    E_END           reduce using rule 34 (vars2 -> vars3 .)
    RES_ELSE        reduce using rule 34 (vars2 -> vars3 .)
    RES_CASE        reduce using rule 34 (vars2 -> vars3 .)


state 55

    (30) vars1 -> dato ID vars2 . vars1_1
    (31) vars1_1 -> . vars1
    (32) vars1_1 -> . empty
    (29) vars1 -> . estructura vars1
    (30) vars1 -> . dato ID vars2 vars1_1
    (145) empty -> .
    (26) estructura -> . list
    (27) estructura -> . array
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_DEF         reduce using rule 145 (empty -> .)
    RES_START       reduce using rule 145 (empty -> .)
    RES_FUNC        reduce using rule 145 (empty -> .)
    RES_READ        reduce using rule 145 (empty -> .)
    RES_PRINT       reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    RES_IF          reduce using rule 145 (empty -> .)
    RES_SWITCH      reduce using rule 145 (empty -> .)
    RES_WHILE       reduce using rule 145 (empty -> .)
    RES_FOR         reduce using rule 145 (empty -> .)
    $end            reduce using rule 145 (empty -> .)
    RES_END         reduce using rule 145 (empty -> .)
    E_END           reduce using rule 145 (empty -> .)
    RES_ELSE        reduce using rule 145 (empty -> .)
    RES_CASE        reduce using rule 145 (empty -> .)
    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    list                           shift and go to state 34
    estructura                     shift and go to state 31
    dato                           shift and go to state 33
    vars1                          shift and go to state 79
    vars1_1                        shift and go to state 80
    array                          shift and go to state 29
    empty                          shift and go to state 81

state 56

    (35) vars3 -> COMMA . ID vars3

    ID              shift and go to state 82


state 57

    (36) vars3 -> empty .

    RES_INT         reduce using rule 36 (vars3 -> empty .)
    RES_FLOAT       reduce using rule 36 (vars3 -> empty .)
    RES_DOUBLE      reduce using rule 36 (vars3 -> empty .)
    RES_BOOLEAN     reduce using rule 36 (vars3 -> empty .)
    RES_STRING      reduce using rule 36 (vars3 -> empty .)
    RES_LIST        reduce using rule 36 (vars3 -> empty .)
    RES_ARRAY       reduce using rule 36 (vars3 -> empty .)
    RES_DEF         reduce using rule 36 (vars3 -> empty .)
    RES_START       reduce using rule 36 (vars3 -> empty .)
    RES_FUNC        reduce using rule 36 (vars3 -> empty .)
    RES_READ        reduce using rule 36 (vars3 -> empty .)
    RES_PRINT       reduce using rule 36 (vars3 -> empty .)
    ID              reduce using rule 36 (vars3 -> empty .)
    RES_IF          reduce using rule 36 (vars3 -> empty .)
    RES_SWITCH      reduce using rule 36 (vars3 -> empty .)
    RES_WHILE       reduce using rule 36 (vars3 -> empty .)
    RES_FOR         reduce using rule 36 (vars3 -> empty .)
    $end            reduce using rule 36 (vars3 -> empty .)
    RES_END         reduce using rule 36 (vars3 -> empty .)
    E_END           reduce using rule 36 (vars3 -> empty .)
    RES_ELSE        reduce using rule 36 (vars3 -> empty .)
    RES_CASE        reduce using rule 36 (vars3 -> empty .)


state 58

    (43) array -> RES_ARRAY dato ID . LBRACKET CTE_INT RBRACKET array1

    LBRACKET        shift and go to state 83


state 59

    (14) prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .

    COL             reduce using rule 14 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_PROTO       reduce using rule 14 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_DEF         reduce using rule 14 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_START       reduce using rule 14 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_FUNC        reduce using rule 14 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)


state 60

    (16) prototipos_1 -> tipo ID . prototipos_2
    (17) prototipos_2 -> . COMMA prototipos_1
    (18) prototipos_2 -> . empty
    (145) empty -> .

    COMMA           shift and go to state 85
    RPAREN          reduce using rule 145 (empty -> .)

    prototipos_2                   shift and go to state 84
    empty                          shift and go to state 86

state 61

    (48) modulos -> prototipos se_uso COL . bloque
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (145) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (87) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (90) switch -> . RES_SWITCH COL switch2
    (84) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (85) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (73) seen_id_asignacion -> . ID

    RES_START       reduce using rule 145 (empty -> .)
    RES_FUNC        reduce using rule 145 (empty -> .)
    $end            reduce using rule 145 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 89
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 62

    (139) main -> RES_START comienza_main COL . bloque RES_END
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (145) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (87) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (90) switch -> . RES_SWITCH COL switch2
    (84) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (85) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (73) seen_id_asignacion -> . ID

    RES_END         reduce using rule 145 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 109
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 63

    (37) list -> RES_LIST dato ID list1 .

    ID              reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_INT         reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_FLOAT       reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_DOUBLE      reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_BOOLEAN     reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_STRING      reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_LIST        reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_ARRAY       reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RPAREN          reduce using rule 37 (list -> RES_LIST dato ID list1 .)


state 64

    (38) list1 -> LCURLY . cons_loop RCURLY
    (40) cons_loop -> . cons cons_loop_1
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 110
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    cons_loop                      shift and go to state 111
    seen_id_cons                   shift and go to state 68

state 65

    (39) list1 -> empty .

    RES_INT         reduce using rule 39 (list1 -> empty .)
    RES_FLOAT       reduce using rule 39 (list1 -> empty .)
    RES_DOUBLE      reduce using rule 39 (list1 -> empty .)
    RES_BOOLEAN     reduce using rule 39 (list1 -> empty .)
    RES_STRING      reduce using rule 39 (list1 -> empty .)
    RES_LIST        reduce using rule 39 (list1 -> empty .)
    RES_ARRAY       reduce using rule 39 (list1 -> empty .)
    ID              reduce using rule 39 (list1 -> empty .)
    RPAREN          reduce using rule 39 (list1 -> empty .)


state 66

    (33) vars2 -> EQUALS cons .

    RES_INT         reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_FLOAT       reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_DOUBLE      reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_BOOLEAN     reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_STRING      reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_LIST        reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_ARRAY       reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_DEF         reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_START       reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_FUNC        reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_READ        reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_PRINT       reduce using rule 33 (vars2 -> EQUALS cons .)
    ID              reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_IF          reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_SWITCH      reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_WHILE       reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_FOR         reduce using rule 33 (vars2 -> EQUALS cons .)
    $end            reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_END         reduce using rule 33 (vars2 -> EQUALS cons .)
    E_END           reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_ELSE        reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_CASE        reduce using rule 33 (vars2 -> EQUALS cons .)


state 67

    (126) cons -> seen_float_cons . exp_cons_float
    (138) exp_cons_float -> .

    RES_INT         reduce using rule 138 (exp_cons_float -> .)
    RES_FLOAT       reduce using rule 138 (exp_cons_float -> .)
    RES_DOUBLE      reduce using rule 138 (exp_cons_float -> .)
    RES_BOOLEAN     reduce using rule 138 (exp_cons_float -> .)
    RES_STRING      reduce using rule 138 (exp_cons_float -> .)
    RES_LIST        reduce using rule 138 (exp_cons_float -> .)
    RES_ARRAY       reduce using rule 138 (exp_cons_float -> .)
    RES_DEF         reduce using rule 138 (exp_cons_float -> .)
    RES_START       reduce using rule 138 (exp_cons_float -> .)
    RES_FUNC        reduce using rule 138 (exp_cons_float -> .)
    RES_READ        reduce using rule 138 (exp_cons_float -> .)
    RES_PRINT       reduce using rule 138 (exp_cons_float -> .)
    ID              reduce using rule 138 (exp_cons_float -> .)
    RES_IF          reduce using rule 138 (exp_cons_float -> .)
    RES_SWITCH      reduce using rule 138 (exp_cons_float -> .)
    RES_WHILE       reduce using rule 138 (exp_cons_float -> .)
    RES_FOR         reduce using rule 138 (exp_cons_float -> .)
    $end            reduce using rule 138 (exp_cons_float -> .)
    RES_END         reduce using rule 138 (exp_cons_float -> .)
    E_END           reduce using rule 138 (exp_cons_float -> .)
    RES_ELSE        reduce using rule 138 (exp_cons_float -> .)
    RES_CASE        reduce using rule 138 (exp_cons_float -> .)
    COMMA           reduce using rule 138 (exp_cons_float -> .)
    RCURLY          reduce using rule 138 (exp_cons_float -> .)
    TIMES           reduce using rule 138 (exp_cons_float -> .)
    DIVIDE          reduce using rule 138 (exp_cons_float -> .)
    PLUS            reduce using rule 138 (exp_cons_float -> .)
    MINUS           reduce using rule 138 (exp_cons_float -> .)
    MIN             reduce using rule 138 (exp_cons_float -> .)
    MIN_EQ          reduce using rule 138 (exp_cons_float -> .)
    MAY             reduce using rule 138 (exp_cons_float -> .)
    MAY_EQ          reduce using rule 138 (exp_cons_float -> .)
    DIF             reduce using rule 138 (exp_cons_float -> .)
    EQ_EQ           reduce using rule 138 (exp_cons_float -> .)
    RPAREN          reduce using rule 138 (exp_cons_float -> .)
    COL             reduce using rule 138 (exp_cons_float -> .)
    RBRACKET        reduce using rule 138 (exp_cons_float -> .)

    exp_cons_float                 shift and go to state 112

state 68

    (124) cons -> seen_id_cons . exp_1
    (136) exp_1 -> .

    RES_INT         reduce using rule 136 (exp_1 -> .)
    RES_FLOAT       reduce using rule 136 (exp_1 -> .)
    RES_DOUBLE      reduce using rule 136 (exp_1 -> .)
    RES_BOOLEAN     reduce using rule 136 (exp_1 -> .)
    RES_STRING      reduce using rule 136 (exp_1 -> .)
    RES_LIST        reduce using rule 136 (exp_1 -> .)
    RES_ARRAY       reduce using rule 136 (exp_1 -> .)
    RES_DEF         reduce using rule 136 (exp_1 -> .)
    RES_START       reduce using rule 136 (exp_1 -> .)
    RES_FUNC        reduce using rule 136 (exp_1 -> .)
    RES_READ        reduce using rule 136 (exp_1 -> .)
    RES_PRINT       reduce using rule 136 (exp_1 -> .)
    ID              reduce using rule 136 (exp_1 -> .)
    RES_IF          reduce using rule 136 (exp_1 -> .)
    RES_SWITCH      reduce using rule 136 (exp_1 -> .)
    RES_WHILE       reduce using rule 136 (exp_1 -> .)
    RES_FOR         reduce using rule 136 (exp_1 -> .)
    $end            reduce using rule 136 (exp_1 -> .)
    RES_END         reduce using rule 136 (exp_1 -> .)
    E_END           reduce using rule 136 (exp_1 -> .)
    RES_ELSE        reduce using rule 136 (exp_1 -> .)
    RES_CASE        reduce using rule 136 (exp_1 -> .)
    COMMA           reduce using rule 136 (exp_1 -> .)
    RCURLY          reduce using rule 136 (exp_1 -> .)
    TIMES           reduce using rule 136 (exp_1 -> .)
    DIVIDE          reduce using rule 136 (exp_1 -> .)
    PLUS            reduce using rule 136 (exp_1 -> .)
    MINUS           reduce using rule 136 (exp_1 -> .)
    MIN             reduce using rule 136 (exp_1 -> .)
    MIN_EQ          reduce using rule 136 (exp_1 -> .)
    MAY             reduce using rule 136 (exp_1 -> .)
    MAY_EQ          reduce using rule 136 (exp_1 -> .)
    DIF             reduce using rule 136 (exp_1 -> .)
    EQ_EQ           reduce using rule 136 (exp_1 -> .)
    RPAREN          reduce using rule 136 (exp_1 -> .)
    COL             reduce using rule 136 (exp_1 -> .)
    RBRACKET        reduce using rule 136 (exp_1 -> .)

    exp_1                          shift and go to state 113

state 69

    (129) cons -> RES_TRUE .

    TIMES           reduce using rule 129 (cons -> RES_TRUE .)
    DIVIDE          reduce using rule 129 (cons -> RES_TRUE .)
    PLUS            reduce using rule 129 (cons -> RES_TRUE .)
    MINUS           reduce using rule 129 (cons -> RES_TRUE .)
    MIN             reduce using rule 129 (cons -> RES_TRUE .)
    MIN_EQ          reduce using rule 129 (cons -> RES_TRUE .)
    MAY             reduce using rule 129 (cons -> RES_TRUE .)
    MAY_EQ          reduce using rule 129 (cons -> RES_TRUE .)
    DIF             reduce using rule 129 (cons -> RES_TRUE .)
    EQ_EQ           reduce using rule 129 (cons -> RES_TRUE .)
    RPAREN          reduce using rule 129 (cons -> RES_TRUE .)
    RES_READ        reduce using rule 129 (cons -> RES_TRUE .)
    RES_PRINT       reduce using rule 129 (cons -> RES_TRUE .)
    ID              reduce using rule 129 (cons -> RES_TRUE .)
    RES_DEF         reduce using rule 129 (cons -> RES_TRUE .)
    RES_IF          reduce using rule 129 (cons -> RES_TRUE .)
    RES_SWITCH      reduce using rule 129 (cons -> RES_TRUE .)
    RES_WHILE       reduce using rule 129 (cons -> RES_TRUE .)
    RES_FOR         reduce using rule 129 (cons -> RES_TRUE .)
    RES_START       reduce using rule 129 (cons -> RES_TRUE .)
    RES_FUNC        reduce using rule 129 (cons -> RES_TRUE .)
    $end            reduce using rule 129 (cons -> RES_TRUE .)
    RES_END         reduce using rule 129 (cons -> RES_TRUE .)
    E_END           reduce using rule 129 (cons -> RES_TRUE .)
    RES_ELSE        reduce using rule 129 (cons -> RES_TRUE .)
    RES_CASE        reduce using rule 129 (cons -> RES_TRUE .)
    COL             reduce using rule 129 (cons -> RES_TRUE .)
    COMMA           reduce using rule 129 (cons -> RES_TRUE .)
    RCURLY          reduce using rule 129 (cons -> RES_TRUE .)
    RES_INT         reduce using rule 129 (cons -> RES_TRUE .)
    RES_FLOAT       reduce using rule 129 (cons -> RES_TRUE .)
    RES_DOUBLE      reduce using rule 129 (cons -> RES_TRUE .)
    RES_BOOLEAN     reduce using rule 129 (cons -> RES_TRUE .)
    RES_STRING      reduce using rule 129 (cons -> RES_TRUE .)
    RES_LIST        reduce using rule 129 (cons -> RES_TRUE .)
    RES_ARRAY       reduce using rule 129 (cons -> RES_TRUE .)
    RBRACKET        reduce using rule 129 (cons -> RES_TRUE .)


state 70

    (128) cons -> CTE_STRING .

    TIMES           reduce using rule 128 (cons -> CTE_STRING .)
    DIVIDE          reduce using rule 128 (cons -> CTE_STRING .)
    PLUS            reduce using rule 128 (cons -> CTE_STRING .)
    MINUS           reduce using rule 128 (cons -> CTE_STRING .)
    MIN             reduce using rule 128 (cons -> CTE_STRING .)
    MIN_EQ          reduce using rule 128 (cons -> CTE_STRING .)
    MAY             reduce using rule 128 (cons -> CTE_STRING .)
    MAY_EQ          reduce using rule 128 (cons -> CTE_STRING .)
    DIF             reduce using rule 128 (cons -> CTE_STRING .)
    EQ_EQ           reduce using rule 128 (cons -> CTE_STRING .)
    RPAREN          reduce using rule 128 (cons -> CTE_STRING .)
    RES_READ        reduce using rule 128 (cons -> CTE_STRING .)
    RES_PRINT       reduce using rule 128 (cons -> CTE_STRING .)
    ID              reduce using rule 128 (cons -> CTE_STRING .)
    RES_DEF         reduce using rule 128 (cons -> CTE_STRING .)
    RES_IF          reduce using rule 128 (cons -> CTE_STRING .)
    RES_SWITCH      reduce using rule 128 (cons -> CTE_STRING .)
    RES_WHILE       reduce using rule 128 (cons -> CTE_STRING .)
    RES_FOR         reduce using rule 128 (cons -> CTE_STRING .)
    RES_START       reduce using rule 128 (cons -> CTE_STRING .)
    RES_FUNC        reduce using rule 128 (cons -> CTE_STRING .)
    $end            reduce using rule 128 (cons -> CTE_STRING .)
    RES_END         reduce using rule 128 (cons -> CTE_STRING .)
    E_END           reduce using rule 128 (cons -> CTE_STRING .)
    RES_ELSE        reduce using rule 128 (cons -> CTE_STRING .)
    RES_CASE        reduce using rule 128 (cons -> CTE_STRING .)
    COL             reduce using rule 128 (cons -> CTE_STRING .)
    COMMA           reduce using rule 128 (cons -> CTE_STRING .)
    RCURLY          reduce using rule 128 (cons -> CTE_STRING .)
    RES_INT         reduce using rule 128 (cons -> CTE_STRING .)
    RES_FLOAT       reduce using rule 128 (cons -> CTE_STRING .)
    RES_DOUBLE      reduce using rule 128 (cons -> CTE_STRING .)
    RES_BOOLEAN     reduce using rule 128 (cons -> CTE_STRING .)
    RES_STRING      reduce using rule 128 (cons -> CTE_STRING .)
    RES_LIST        reduce using rule 128 (cons -> CTE_STRING .)
    RES_ARRAY       reduce using rule 128 (cons -> CTE_STRING .)
    RBRACKET        reduce using rule 128 (cons -> CTE_STRING .)


state 71

    (127) cons -> CTE_DOUBLE .

    TIMES           reduce using rule 127 (cons -> CTE_DOUBLE .)
    DIVIDE          reduce using rule 127 (cons -> CTE_DOUBLE .)
    PLUS            reduce using rule 127 (cons -> CTE_DOUBLE .)
    MINUS           reduce using rule 127 (cons -> CTE_DOUBLE .)
    MIN             reduce using rule 127 (cons -> CTE_DOUBLE .)
    MIN_EQ          reduce using rule 127 (cons -> CTE_DOUBLE .)
    MAY             reduce using rule 127 (cons -> CTE_DOUBLE .)
    MAY_EQ          reduce using rule 127 (cons -> CTE_DOUBLE .)
    DIF             reduce using rule 127 (cons -> CTE_DOUBLE .)
    EQ_EQ           reduce using rule 127 (cons -> CTE_DOUBLE .)
    RPAREN          reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_READ        reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_PRINT       reduce using rule 127 (cons -> CTE_DOUBLE .)
    ID              reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_DEF         reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_IF          reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_SWITCH      reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_WHILE       reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_FOR         reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_START       reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_FUNC        reduce using rule 127 (cons -> CTE_DOUBLE .)
    $end            reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_END         reduce using rule 127 (cons -> CTE_DOUBLE .)
    E_END           reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_ELSE        reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_CASE        reduce using rule 127 (cons -> CTE_DOUBLE .)
    COL             reduce using rule 127 (cons -> CTE_DOUBLE .)
    COMMA           reduce using rule 127 (cons -> CTE_DOUBLE .)
    RCURLY          reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_INT         reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_FLOAT       reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_DOUBLE      reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_BOOLEAN     reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_STRING      reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_LIST        reduce using rule 127 (cons -> CTE_DOUBLE .)
    RES_ARRAY       reduce using rule 127 (cons -> CTE_DOUBLE .)
    RBRACKET        reduce using rule 127 (cons -> CTE_DOUBLE .)


state 72

    (135) seen_int_cons -> CTE_INT .

    TIMES           reduce using rule 135 (seen_int_cons -> CTE_INT .)
    DIVIDE          reduce using rule 135 (seen_int_cons -> CTE_INT .)
    PLUS            reduce using rule 135 (seen_int_cons -> CTE_INT .)
    MINUS           reduce using rule 135 (seen_int_cons -> CTE_INT .)
    MIN             reduce using rule 135 (seen_int_cons -> CTE_INT .)
    MIN_EQ          reduce using rule 135 (seen_int_cons -> CTE_INT .)
    MAY             reduce using rule 135 (seen_int_cons -> CTE_INT .)
    MAY_EQ          reduce using rule 135 (seen_int_cons -> CTE_INT .)
    DIF             reduce using rule 135 (seen_int_cons -> CTE_INT .)
    EQ_EQ           reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RPAREN          reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_READ        reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_PRINT       reduce using rule 135 (seen_int_cons -> CTE_INT .)
    ID              reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_DEF         reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_IF          reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_SWITCH      reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_WHILE       reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_FOR         reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_START       reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_FUNC        reduce using rule 135 (seen_int_cons -> CTE_INT .)
    $end            reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_END         reduce using rule 135 (seen_int_cons -> CTE_INT .)
    E_END           reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_ELSE        reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_CASE        reduce using rule 135 (seen_int_cons -> CTE_INT .)
    COL             reduce using rule 135 (seen_int_cons -> CTE_INT .)
    COMMA           reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RCURLY          reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_INT         reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_FLOAT       reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_DOUBLE      reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_BOOLEAN     reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_STRING      reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_LIST        reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RES_ARRAY       reduce using rule 135 (seen_int_cons -> CTE_INT .)
    RBRACKET        reduce using rule 135 (seen_int_cons -> CTE_INT .)


state 73

    (133) seen_id_cons -> ID .
    (141) consarray -> ID . LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> ID . EQUALS LCURLY conslist1 RCURLY

    RES_INT         reduce using rule 133 (seen_id_cons -> ID .)
    RES_FLOAT       reduce using rule 133 (seen_id_cons -> ID .)
    RES_DOUBLE      reduce using rule 133 (seen_id_cons -> ID .)
    RES_BOOLEAN     reduce using rule 133 (seen_id_cons -> ID .)
    RES_STRING      reduce using rule 133 (seen_id_cons -> ID .)
    RES_LIST        reduce using rule 133 (seen_id_cons -> ID .)
    RES_ARRAY       reduce using rule 133 (seen_id_cons -> ID .)
    RES_DEF         reduce using rule 133 (seen_id_cons -> ID .)
    RES_START       reduce using rule 133 (seen_id_cons -> ID .)
    RES_FUNC        reduce using rule 133 (seen_id_cons -> ID .)
    RES_READ        reduce using rule 133 (seen_id_cons -> ID .)
    RES_PRINT       reduce using rule 133 (seen_id_cons -> ID .)
    ID              reduce using rule 133 (seen_id_cons -> ID .)
    RES_IF          reduce using rule 133 (seen_id_cons -> ID .)
    RES_SWITCH      reduce using rule 133 (seen_id_cons -> ID .)
    RES_WHILE       reduce using rule 133 (seen_id_cons -> ID .)
    RES_FOR         reduce using rule 133 (seen_id_cons -> ID .)
    $end            reduce using rule 133 (seen_id_cons -> ID .)
    RES_END         reduce using rule 133 (seen_id_cons -> ID .)
    E_END           reduce using rule 133 (seen_id_cons -> ID .)
    RES_ELSE        reduce using rule 133 (seen_id_cons -> ID .)
    RES_CASE        reduce using rule 133 (seen_id_cons -> ID .)
    TIMES           reduce using rule 133 (seen_id_cons -> ID .)
    DIVIDE          reduce using rule 133 (seen_id_cons -> ID .)
    PLUS            reduce using rule 133 (seen_id_cons -> ID .)
    MINUS           reduce using rule 133 (seen_id_cons -> ID .)
    MIN             reduce using rule 133 (seen_id_cons -> ID .)
    MIN_EQ          reduce using rule 133 (seen_id_cons -> ID .)
    MAY             reduce using rule 133 (seen_id_cons -> ID .)
    MAY_EQ          reduce using rule 133 (seen_id_cons -> ID .)
    DIF             reduce using rule 133 (seen_id_cons -> ID .)
    EQ_EQ           reduce using rule 133 (seen_id_cons -> ID .)
    RPAREN          reduce using rule 133 (seen_id_cons -> ID .)
    COMMA           reduce using rule 133 (seen_id_cons -> ID .)
    RCURLY          reduce using rule 133 (seen_id_cons -> ID .)
    COL             reduce using rule 133 (seen_id_cons -> ID .)
    RBRACKET        reduce using rule 133 (seen_id_cons -> ID .)
    LBRACKET        shift and go to state 115
    EQUALS          shift and go to state 114


state 74

    (125) cons -> seen_int_cons . exp_cons_int
    (137) exp_cons_int -> .

    RES_INT         reduce using rule 137 (exp_cons_int -> .)
    RES_FLOAT       reduce using rule 137 (exp_cons_int -> .)
    RES_DOUBLE      reduce using rule 137 (exp_cons_int -> .)
    RES_BOOLEAN     reduce using rule 137 (exp_cons_int -> .)
    RES_STRING      reduce using rule 137 (exp_cons_int -> .)
    RES_LIST        reduce using rule 137 (exp_cons_int -> .)
    RES_ARRAY       reduce using rule 137 (exp_cons_int -> .)
    RES_DEF         reduce using rule 137 (exp_cons_int -> .)
    RES_START       reduce using rule 137 (exp_cons_int -> .)
    RES_FUNC        reduce using rule 137 (exp_cons_int -> .)
    RES_READ        reduce using rule 137 (exp_cons_int -> .)
    RES_PRINT       reduce using rule 137 (exp_cons_int -> .)
    ID              reduce using rule 137 (exp_cons_int -> .)
    RES_IF          reduce using rule 137 (exp_cons_int -> .)
    RES_SWITCH      reduce using rule 137 (exp_cons_int -> .)
    RES_WHILE       reduce using rule 137 (exp_cons_int -> .)
    RES_FOR         reduce using rule 137 (exp_cons_int -> .)
    $end            reduce using rule 137 (exp_cons_int -> .)
    RES_END         reduce using rule 137 (exp_cons_int -> .)
    E_END           reduce using rule 137 (exp_cons_int -> .)
    RES_ELSE        reduce using rule 137 (exp_cons_int -> .)
    RES_CASE        reduce using rule 137 (exp_cons_int -> .)
    COMMA           reduce using rule 137 (exp_cons_int -> .)
    RCURLY          reduce using rule 137 (exp_cons_int -> .)
    TIMES           reduce using rule 137 (exp_cons_int -> .)
    DIVIDE          reduce using rule 137 (exp_cons_int -> .)
    PLUS            reduce using rule 137 (exp_cons_int -> .)
    MINUS           reduce using rule 137 (exp_cons_int -> .)
    MIN             reduce using rule 137 (exp_cons_int -> .)
    MIN_EQ          reduce using rule 137 (exp_cons_int -> .)
    MAY             reduce using rule 137 (exp_cons_int -> .)
    MAY_EQ          reduce using rule 137 (exp_cons_int -> .)
    DIF             reduce using rule 137 (exp_cons_int -> .)
    EQ_EQ           reduce using rule 137 (exp_cons_int -> .)
    RPAREN          reduce using rule 137 (exp_cons_int -> .)
    COL             reduce using rule 137 (exp_cons_int -> .)
    RBRACKET        reduce using rule 137 (exp_cons_int -> .)

    exp_cons_int                   shift and go to state 116

state 75

    (132) cons -> conslist .

    TIMES           reduce using rule 132 (cons -> conslist .)
    DIVIDE          reduce using rule 132 (cons -> conslist .)
    PLUS            reduce using rule 132 (cons -> conslist .)
    MINUS           reduce using rule 132 (cons -> conslist .)
    MIN             reduce using rule 132 (cons -> conslist .)
    MIN_EQ          reduce using rule 132 (cons -> conslist .)
    MAY             reduce using rule 132 (cons -> conslist .)
    MAY_EQ          reduce using rule 132 (cons -> conslist .)
    DIF             reduce using rule 132 (cons -> conslist .)
    EQ_EQ           reduce using rule 132 (cons -> conslist .)
    RPAREN          reduce using rule 132 (cons -> conslist .)
    RES_READ        reduce using rule 132 (cons -> conslist .)
    RES_PRINT       reduce using rule 132 (cons -> conslist .)
    ID              reduce using rule 132 (cons -> conslist .)
    RES_DEF         reduce using rule 132 (cons -> conslist .)
    RES_IF          reduce using rule 132 (cons -> conslist .)
    RES_SWITCH      reduce using rule 132 (cons -> conslist .)
    RES_WHILE       reduce using rule 132 (cons -> conslist .)
    RES_FOR         reduce using rule 132 (cons -> conslist .)
    RES_START       reduce using rule 132 (cons -> conslist .)
    RES_FUNC        reduce using rule 132 (cons -> conslist .)
    $end            reduce using rule 132 (cons -> conslist .)
    RES_END         reduce using rule 132 (cons -> conslist .)
    E_END           reduce using rule 132 (cons -> conslist .)
    RES_ELSE        reduce using rule 132 (cons -> conslist .)
    RES_CASE        reduce using rule 132 (cons -> conslist .)
    COL             reduce using rule 132 (cons -> conslist .)
    COMMA           reduce using rule 132 (cons -> conslist .)
    RCURLY          reduce using rule 132 (cons -> conslist .)
    RES_INT         reduce using rule 132 (cons -> conslist .)
    RES_FLOAT       reduce using rule 132 (cons -> conslist .)
    RES_DOUBLE      reduce using rule 132 (cons -> conslist .)
    RES_BOOLEAN     reduce using rule 132 (cons -> conslist .)
    RES_STRING      reduce using rule 132 (cons -> conslist .)
    RES_LIST        reduce using rule 132 (cons -> conslist .)
    RES_ARRAY       reduce using rule 132 (cons -> conslist .)
    RBRACKET        reduce using rule 132 (cons -> conslist .)


state 76

    (131) cons -> consarray .

    TIMES           reduce using rule 131 (cons -> consarray .)
    DIVIDE          reduce using rule 131 (cons -> consarray .)
    PLUS            reduce using rule 131 (cons -> consarray .)
    MINUS           reduce using rule 131 (cons -> consarray .)
    MIN             reduce using rule 131 (cons -> consarray .)
    MIN_EQ          reduce using rule 131 (cons -> consarray .)
    MAY             reduce using rule 131 (cons -> consarray .)
    MAY_EQ          reduce using rule 131 (cons -> consarray .)
    DIF             reduce using rule 131 (cons -> consarray .)
    EQ_EQ           reduce using rule 131 (cons -> consarray .)
    RPAREN          reduce using rule 131 (cons -> consarray .)
    RES_READ        reduce using rule 131 (cons -> consarray .)
    RES_PRINT       reduce using rule 131 (cons -> consarray .)
    ID              reduce using rule 131 (cons -> consarray .)
    RES_DEF         reduce using rule 131 (cons -> consarray .)
    RES_IF          reduce using rule 131 (cons -> consarray .)
    RES_SWITCH      reduce using rule 131 (cons -> consarray .)
    RES_WHILE       reduce using rule 131 (cons -> consarray .)
    RES_FOR         reduce using rule 131 (cons -> consarray .)
    RES_START       reduce using rule 131 (cons -> consarray .)
    RES_FUNC        reduce using rule 131 (cons -> consarray .)
    $end            reduce using rule 131 (cons -> consarray .)
    RES_END         reduce using rule 131 (cons -> consarray .)
    E_END           reduce using rule 131 (cons -> consarray .)
    RES_ELSE        reduce using rule 131 (cons -> consarray .)
    RES_CASE        reduce using rule 131 (cons -> consarray .)
    COL             reduce using rule 131 (cons -> consarray .)
    COMMA           reduce using rule 131 (cons -> consarray .)
    RCURLY          reduce using rule 131 (cons -> consarray .)
    RES_INT         reduce using rule 131 (cons -> consarray .)
    RES_FLOAT       reduce using rule 131 (cons -> consarray .)
    RES_DOUBLE      reduce using rule 131 (cons -> consarray .)
    RES_BOOLEAN     reduce using rule 131 (cons -> consarray .)
    RES_STRING      reduce using rule 131 (cons -> consarray .)
    RES_LIST        reduce using rule 131 (cons -> consarray .)
    RES_ARRAY       reduce using rule 131 (cons -> consarray .)
    RBRACKET        reduce using rule 131 (cons -> consarray .)


state 77

    (134) seen_float_cons -> CTE_FLOAT .

    TIMES           reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    DIVIDE          reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    PLUS            reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    MINUS           reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    MIN             reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    MIN_EQ          reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    MAY             reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    MAY_EQ          reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    DIF             reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    EQ_EQ           reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RPAREN          reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    COL             reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    COMMA           reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RCURLY          reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_READ        reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_PRINT       reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    ID              reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_DEF         reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_IF          reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_SWITCH      reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_WHILE       reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_FOR         reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_START       reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_FUNC        reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    $end            reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_END         reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    E_END           reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_ELSE        reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_CASE        reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RBRACKET        reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_INT         reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_FLOAT       reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_DOUBLE      reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_BOOLEAN     reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_STRING      reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_LIST        reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)
    RES_ARRAY       reduce using rule 134 (seen_float_cons -> CTE_FLOAT .)


state 78

    (130) cons -> RES_FALSE .

    TIMES           reduce using rule 130 (cons -> RES_FALSE .)
    DIVIDE          reduce using rule 130 (cons -> RES_FALSE .)
    PLUS            reduce using rule 130 (cons -> RES_FALSE .)
    MINUS           reduce using rule 130 (cons -> RES_FALSE .)
    MIN             reduce using rule 130 (cons -> RES_FALSE .)
    MIN_EQ          reduce using rule 130 (cons -> RES_FALSE .)
    MAY             reduce using rule 130 (cons -> RES_FALSE .)
    MAY_EQ          reduce using rule 130 (cons -> RES_FALSE .)
    DIF             reduce using rule 130 (cons -> RES_FALSE .)
    EQ_EQ           reduce using rule 130 (cons -> RES_FALSE .)
    RPAREN          reduce using rule 130 (cons -> RES_FALSE .)
    RES_READ        reduce using rule 130 (cons -> RES_FALSE .)
    RES_PRINT       reduce using rule 130 (cons -> RES_FALSE .)
    ID              reduce using rule 130 (cons -> RES_FALSE .)
    RES_DEF         reduce using rule 130 (cons -> RES_FALSE .)
    RES_IF          reduce using rule 130 (cons -> RES_FALSE .)
    RES_SWITCH      reduce using rule 130 (cons -> RES_FALSE .)
    RES_WHILE       reduce using rule 130 (cons -> RES_FALSE .)
    RES_FOR         reduce using rule 130 (cons -> RES_FALSE .)
    RES_START       reduce using rule 130 (cons -> RES_FALSE .)
    RES_FUNC        reduce using rule 130 (cons -> RES_FALSE .)
    $end            reduce using rule 130 (cons -> RES_FALSE .)
    RES_END         reduce using rule 130 (cons -> RES_FALSE .)
    E_END           reduce using rule 130 (cons -> RES_FALSE .)
    RES_ELSE        reduce using rule 130 (cons -> RES_FALSE .)
    RES_CASE        reduce using rule 130 (cons -> RES_FALSE .)
    COL             reduce using rule 130 (cons -> RES_FALSE .)
    COMMA           reduce using rule 130 (cons -> RES_FALSE .)
    RCURLY          reduce using rule 130 (cons -> RES_FALSE .)
    RES_INT         reduce using rule 130 (cons -> RES_FALSE .)
    RES_FLOAT       reduce using rule 130 (cons -> RES_FALSE .)
    RES_DOUBLE      reduce using rule 130 (cons -> RES_FALSE .)
    RES_BOOLEAN     reduce using rule 130 (cons -> RES_FALSE .)
    RES_STRING      reduce using rule 130 (cons -> RES_FALSE .)
    RES_LIST        reduce using rule 130 (cons -> RES_FALSE .)
    RES_ARRAY       reduce using rule 130 (cons -> RES_FALSE .)
    RBRACKET        reduce using rule 130 (cons -> RES_FALSE .)


state 79

    (31) vars1_1 -> vars1 .

    RES_DEF         reduce using rule 31 (vars1_1 -> vars1 .)
    RES_START       reduce using rule 31 (vars1_1 -> vars1 .)
    RES_FUNC        reduce using rule 31 (vars1_1 -> vars1 .)
    RES_READ        reduce using rule 31 (vars1_1 -> vars1 .)
    RES_PRINT       reduce using rule 31 (vars1_1 -> vars1 .)
    ID              reduce using rule 31 (vars1_1 -> vars1 .)
    RES_IF          reduce using rule 31 (vars1_1 -> vars1 .)
    RES_SWITCH      reduce using rule 31 (vars1_1 -> vars1 .)
    RES_WHILE       reduce using rule 31 (vars1_1 -> vars1 .)
    RES_FOR         reduce using rule 31 (vars1_1 -> vars1 .)
    $end            reduce using rule 31 (vars1_1 -> vars1 .)
    RES_END         reduce using rule 31 (vars1_1 -> vars1 .)
    E_END           reduce using rule 31 (vars1_1 -> vars1 .)
    RES_ELSE        reduce using rule 31 (vars1_1 -> vars1 .)
    RES_CASE        reduce using rule 31 (vars1_1 -> vars1 .)


state 80

    (30) vars1 -> dato ID vars2 vars1_1 .

    RES_DEF         reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_START       reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_FUNC        reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_READ        reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_PRINT       reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    ID              reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_IF          reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_SWITCH      reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_WHILE       reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_FOR         reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    $end            reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_END         reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    E_END           reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_ELSE        reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_CASE        reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)


state 81

    (32) vars1_1 -> empty .

    RES_DEF         reduce using rule 32 (vars1_1 -> empty .)
    RES_START       reduce using rule 32 (vars1_1 -> empty .)
    RES_FUNC        reduce using rule 32 (vars1_1 -> empty .)
    RES_READ        reduce using rule 32 (vars1_1 -> empty .)
    RES_PRINT       reduce using rule 32 (vars1_1 -> empty .)
    ID              reduce using rule 32 (vars1_1 -> empty .)
    RES_IF          reduce using rule 32 (vars1_1 -> empty .)
    RES_SWITCH      reduce using rule 32 (vars1_1 -> empty .)
    RES_WHILE       reduce using rule 32 (vars1_1 -> empty .)
    RES_FOR         reduce using rule 32 (vars1_1 -> empty .)
    $end            reduce using rule 32 (vars1_1 -> empty .)
    RES_END         reduce using rule 32 (vars1_1 -> empty .)
    E_END           reduce using rule 32 (vars1_1 -> empty .)
    RES_ELSE        reduce using rule 32 (vars1_1 -> empty .)
    RES_CASE        reduce using rule 32 (vars1_1 -> empty .)


state 82

    (35) vars3 -> COMMA ID . vars3
    (35) vars3 -> . COMMA ID vars3
    (36) vars3 -> . empty
    (145) empty -> .

    COMMA           shift and go to state 56
    RES_INT         reduce using rule 145 (empty -> .)
    RES_FLOAT       reduce using rule 145 (empty -> .)
    RES_DOUBLE      reduce using rule 145 (empty -> .)
    RES_BOOLEAN     reduce using rule 145 (empty -> .)
    RES_STRING      reduce using rule 145 (empty -> .)
    RES_LIST        reduce using rule 145 (empty -> .)
    RES_ARRAY       reduce using rule 145 (empty -> .)
    RES_DEF         reduce using rule 145 (empty -> .)
    RES_START       reduce using rule 145 (empty -> .)
    RES_FUNC        reduce using rule 145 (empty -> .)
    RES_READ        reduce using rule 145 (empty -> .)
    RES_PRINT       reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    RES_IF          reduce using rule 145 (empty -> .)
    RES_SWITCH      reduce using rule 145 (empty -> .)
    RES_WHILE       reduce using rule 145 (empty -> .)
    RES_FOR         reduce using rule 145 (empty -> .)
    $end            reduce using rule 145 (empty -> .)
    RES_END         reduce using rule 145 (empty -> .)
    E_END           reduce using rule 145 (empty -> .)
    RES_ELSE        reduce using rule 145 (empty -> .)
    RES_CASE        reduce using rule 145 (empty -> .)

    vars3                          shift and go to state 117
    empty                          shift and go to state 57

state 83

    (43) array -> RES_ARRAY dato ID LBRACKET . CTE_INT RBRACKET array1

    CTE_INT         shift and go to state 118


state 84

    (16) prototipos_1 -> tipo ID prototipos_2 .

    RPAREN          reduce using rule 16 (prototipos_1 -> tipo ID prototipos_2 .)


state 85

    (17) prototipos_2 -> COMMA . prototipos_1
    (16) prototipos_1 -> . tipo ID prototipos_2
    (24) tipo -> . dato
    (25) tipo -> . estructura
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (26) estructura -> . list
    (27) estructura -> . array
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    tipo                           shift and go to state 46
    prototipos_1                   shift and go to state 119
    list                           shift and go to state 34
    estructura                     shift and go to state 47
    dato                           shift and go to state 48
    array                          shift and go to state 29

state 86

    (18) prototipos_2 -> empty .

    RPAREN          reduce using rule 18 (prototipos_2 -> empty .)


state 87

    (58) estatutos -> vars .

    RES_READ        reduce using rule 58 (estatutos -> vars .)
    RES_PRINT       reduce using rule 58 (estatutos -> vars .)
    ID              reduce using rule 58 (estatutos -> vars .)
    RES_DEF         reduce using rule 58 (estatutos -> vars .)
    RES_IF          reduce using rule 58 (estatutos -> vars .)
    RES_SWITCH      reduce using rule 58 (estatutos -> vars .)
    RES_WHILE       reduce using rule 58 (estatutos -> vars .)
    RES_FOR         reduce using rule 58 (estatutos -> vars .)
    RES_END         reduce using rule 58 (estatutos -> vars .)
    RES_CASE        reduce using rule 58 (estatutos -> vars .)
    E_END           reduce using rule 58 (estatutos -> vars .)
    RES_START       reduce using rule 58 (estatutos -> vars .)
    RES_FUNC        reduce using rule 58 (estatutos -> vars .)
    $end            reduce using rule 58 (estatutos -> vars .)
    RES_ELSE        reduce using rule 58 (estatutos -> vars .)


state 88

    (85) for -> RES_FOR . LPAREN forexp RPAREN COL bloque

    LPAREN          shift and go to state 120


state 89

    (48) modulos -> prototipos se_uso COL bloque .

    RES_START       reduce using rule 48 (modulos -> prototipos se_uso COL bloque .)
    RES_FUNC        reduce using rule 48 (modulos -> prototipos se_uso COL bloque .)
    $end            reduce using rule 48 (modulos -> prototipos se_uso COL bloque .)


state 90

    (87) if -> RES_IF . LPAREN expresion RPAREN COL bloque ifelse

    LPAREN          shift and go to state 121


state 91

    (61) condicion -> if .

    E_END           reduce using rule 61 (condicion -> if .)


state 92

    (53) estatutos -> ciclo . E_END

    E_END           shift and go to state 122


state 93

    (70) asignacion -> seen_id_asignacion . EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion

    EQUALS          shift and go to state 123


state 94

    (62) condicion -> switch .

    E_END           reduce using rule 62 (condicion -> switch .)


state 95

    (60) ciclo -> for .

    E_END           reduce using rule 60 (ciclo -> for .)


state 96

    (57) estatutos -> llamada .

    RES_READ        reduce using rule 57 (estatutos -> llamada .)
    RES_PRINT       reduce using rule 57 (estatutos -> llamada .)
    ID              reduce using rule 57 (estatutos -> llamada .)
    RES_DEF         reduce using rule 57 (estatutos -> llamada .)
    RES_IF          reduce using rule 57 (estatutos -> llamada .)
    RES_SWITCH      reduce using rule 57 (estatutos -> llamada .)
    RES_WHILE       reduce using rule 57 (estatutos -> llamada .)
    RES_FOR         reduce using rule 57 (estatutos -> llamada .)
    RES_END         reduce using rule 57 (estatutos -> llamada .)
    RES_CASE        reduce using rule 57 (estatutos -> llamada .)
    E_END           reduce using rule 57 (estatutos -> llamada .)
    RES_START       reduce using rule 57 (estatutos -> llamada .)
    RES_FUNC        reduce using rule 57 (estatutos -> llamada .)
    $end            reduce using rule 57 (estatutos -> llamada .)
    RES_ELSE        reduce using rule 57 (estatutos -> llamada .)


state 97

    (52) estatutos -> condicion . E_END

    E_END           shift and go to state 124


state 98

    (67) escritura -> RES_PRINT . LPAREN escritura1 RPAREN

    LPAREN          shift and go to state 125


state 99

    (54) estatutos -> lectura .

    RES_READ        reduce using rule 54 (estatutos -> lectura .)
    RES_PRINT       reduce using rule 54 (estatutos -> lectura .)
    ID              reduce using rule 54 (estatutos -> lectura .)
    RES_DEF         reduce using rule 54 (estatutos -> lectura .)
    RES_IF          reduce using rule 54 (estatutos -> lectura .)
    RES_SWITCH      reduce using rule 54 (estatutos -> lectura .)
    RES_WHILE       reduce using rule 54 (estatutos -> lectura .)
    RES_FOR         reduce using rule 54 (estatutos -> lectura .)
    RES_END         reduce using rule 54 (estatutos -> lectura .)
    RES_CASE        reduce using rule 54 (estatutos -> lectura .)
    E_END           reduce using rule 54 (estatutos -> lectura .)
    RES_START       reduce using rule 54 (estatutos -> lectura .)
    RES_FUNC        reduce using rule 54 (estatutos -> lectura .)
    $end            reduce using rule 54 (estatutos -> lectura .)
    RES_ELSE        reduce using rule 54 (estatutos -> lectura .)


state 100

    (51) bloque -> empty .

    RES_START       reduce using rule 51 (bloque -> empty .)
    RES_FUNC        reduce using rule 51 (bloque -> empty .)
    $end            reduce using rule 51 (bloque -> empty .)
    RES_END         reduce using rule 51 (bloque -> empty .)
    E_END           reduce using rule 51 (bloque -> empty .)
    RES_ELSE        reduce using rule 51 (bloque -> empty .)
    RES_CASE        reduce using rule 51 (bloque -> empty .)


state 101

    (50) bloque -> estatutos . bloque
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (145) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (87) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (90) switch -> . RES_SWITCH COL switch2
    (84) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (85) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (73) seen_id_asignacion -> . ID

    RES_START       reduce using rule 145 (empty -> .)
    RES_FUNC        reduce using rule 145 (empty -> .)
    $end            reduce using rule 145 (empty -> .)
    RES_END         reduce using rule 145 (empty -> .)
    E_END           reduce using rule 145 (empty -> .)
    RES_ELSE        reduce using rule 145 (empty -> .)
    RES_CASE        reduce using rule 145 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 126
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 102

    (84) while -> RES_WHILE . LPAREN expresion RPAREN COL bloque

    LPAREN          shift and go to state 127


state 103

    (63) llamada -> ID . LPAREN llamada1 RPAREN
    (73) seen_id_asignacion -> ID .

    LPAREN          shift and go to state 128
    EQUALS          reduce using rule 73 (seen_id_asignacion -> ID .)


state 104

    (66) lectura -> RES_READ . LPAREN tipo RPAREN

    LPAREN          shift and go to state 129


state 105

    (56) estatutos -> asignacion .

    RES_READ        reduce using rule 56 (estatutos -> asignacion .)
    RES_PRINT       reduce using rule 56 (estatutos -> asignacion .)
    ID              reduce using rule 56 (estatutos -> asignacion .)
    RES_DEF         reduce using rule 56 (estatutos -> asignacion .)
    RES_IF          reduce using rule 56 (estatutos -> asignacion .)
    RES_SWITCH      reduce using rule 56 (estatutos -> asignacion .)
    RES_WHILE       reduce using rule 56 (estatutos -> asignacion .)
    RES_FOR         reduce using rule 56 (estatutos -> asignacion .)
    RES_END         reduce using rule 56 (estatutos -> asignacion .)
    RES_CASE        reduce using rule 56 (estatutos -> asignacion .)
    E_END           reduce using rule 56 (estatutos -> asignacion .)
    RES_START       reduce using rule 56 (estatutos -> asignacion .)
    RES_FUNC        reduce using rule 56 (estatutos -> asignacion .)
    $end            reduce using rule 56 (estatutos -> asignacion .)
    RES_ELSE        reduce using rule 56 (estatutos -> asignacion .)


state 106

    (90) switch -> RES_SWITCH . COL switch2

    COL             shift and go to state 130


state 107

    (59) ciclo -> while .

    E_END           reduce using rule 59 (ciclo -> while .)


state 108

    (55) estatutos -> escritura .

    RES_READ        reduce using rule 55 (estatutos -> escritura .)
    RES_PRINT       reduce using rule 55 (estatutos -> escritura .)
    ID              reduce using rule 55 (estatutos -> escritura .)
    RES_DEF         reduce using rule 55 (estatutos -> escritura .)
    RES_IF          reduce using rule 55 (estatutos -> escritura .)
    RES_SWITCH      reduce using rule 55 (estatutos -> escritura .)
    RES_WHILE       reduce using rule 55 (estatutos -> escritura .)
    RES_FOR         reduce using rule 55 (estatutos -> escritura .)
    RES_END         reduce using rule 55 (estatutos -> escritura .)
    RES_CASE        reduce using rule 55 (estatutos -> escritura .)
    E_END           reduce using rule 55 (estatutos -> escritura .)
    RES_START       reduce using rule 55 (estatutos -> escritura .)
    RES_FUNC        reduce using rule 55 (estatutos -> escritura .)
    $end            reduce using rule 55 (estatutos -> escritura .)
    RES_ELSE        reduce using rule 55 (estatutos -> escritura .)


state 109

    (139) main -> RES_START comienza_main COL bloque . RES_END

    RES_END         shift and go to state 131


state 110

    (40) cons_loop -> cons . cons_loop_1
    (41) cons_loop_1 -> . COMMA cons_loop
    (42) cons_loop_1 -> . empty
    (145) empty -> .

    COMMA           shift and go to state 132
    RCURLY          reduce using rule 145 (empty -> .)

    empty                          shift and go to state 133
    cons_loop_1                    shift and go to state 134

state 111

    (38) list1 -> LCURLY cons_loop . RCURLY

    RCURLY          shift and go to state 135


state 112

    (126) cons -> seen_float_cons exp_cons_float .

    TIMES           reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    DIVIDE          reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    PLUS            reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    MINUS           reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    MIN             reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    MIN_EQ          reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    MAY             reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    MAY_EQ          reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    DIF             reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    EQ_EQ           reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RPAREN          reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_READ        reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_PRINT       reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    ID              reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_DEF         reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_IF          reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_SWITCH      reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_WHILE       reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_FOR         reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_START       reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_FUNC        reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    $end            reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_END         reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    E_END           reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_ELSE        reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_CASE        reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    COL             reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    COMMA           reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RCURLY          reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_INT         reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_FLOAT       reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_DOUBLE      reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_BOOLEAN     reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_STRING      reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_LIST        reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RES_ARRAY       reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)
    RBRACKET        reduce using rule 126 (cons -> seen_float_cons exp_cons_float .)


state 113

    (124) cons -> seen_id_cons exp_1 .

    TIMES           reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    DIVIDE          reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    PLUS            reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    MINUS           reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    MIN             reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    MIN_EQ          reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    MAY             reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    MAY_EQ          reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    DIF             reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    EQ_EQ           reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RPAREN          reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_READ        reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_PRINT       reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    ID              reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_DEF         reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_IF          reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_SWITCH      reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_WHILE       reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_FOR         reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_START       reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_FUNC        reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    $end            reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_END         reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    E_END           reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_ELSE        reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_CASE        reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    COL             reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    COMMA           reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RCURLY          reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_INT         reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_FLOAT       reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_DOUBLE      reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_BOOLEAN     reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_STRING      reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_LIST        reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RES_ARRAY       reduce using rule 124 (cons -> seen_id_cons exp_1 .)
    RBRACKET        reduce using rule 124 (cons -> seen_id_cons exp_1 .)


state 114

    (142) conslist -> ID EQUALS . LCURLY conslist1 RCURLY

    LCURLY          shift and go to state 136


state 115

    (141) consarray -> ID LBRACKET . CTE_INT RBRACKET EQUALS cons

    CTE_INT         shift and go to state 137


state 116

    (125) cons -> seen_int_cons exp_cons_int .

    TIMES           reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    DIVIDE          reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    PLUS            reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    MINUS           reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    MIN             reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    MIN_EQ          reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    MAY             reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    MAY_EQ          reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    DIF             reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    EQ_EQ           reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RPAREN          reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_READ        reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_PRINT       reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    ID              reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_DEF         reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_IF          reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_SWITCH      reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_WHILE       reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_FOR         reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_START       reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_FUNC        reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    $end            reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_END         reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    E_END           reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_ELSE        reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_CASE        reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    COL             reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    COMMA           reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RCURLY          reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_INT         reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_FLOAT       reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_DOUBLE      reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_BOOLEAN     reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_STRING      reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_LIST        reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RES_ARRAY       reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)
    RBRACKET        reduce using rule 125 (cons -> seen_int_cons exp_cons_int .)


state 117

    (35) vars3 -> COMMA ID vars3 .

    RES_INT         reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_FLOAT       reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_DOUBLE      reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_BOOLEAN     reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_STRING      reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_LIST        reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_ARRAY       reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_DEF         reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_START       reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_FUNC        reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_READ        reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_PRINT       reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    ID              reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_IF          reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_SWITCH      reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_WHILE       reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_FOR         reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    $end            reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_END         reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    E_END           reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_ELSE        reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_CASE        reduce using rule 35 (vars3 -> COMMA ID vars3 .)


state 118

    (43) array -> RES_ARRAY dato ID LBRACKET CTE_INT . RBRACKET array1

    RBRACKET        shift and go to state 138


state 119

    (17) prototipos_2 -> COMMA prototipos_1 .

    RPAREN          reduce using rule 17 (prototipos_2 -> COMMA prototipos_1 .)


state 120

    (85) for -> RES_FOR LPAREN . forexp RPAREN COL bloque
    (86) forexp -> . ID EQUALS cons COL expresion COL ID EQUALS expresion

    ID              shift and go to state 139

    forexp                         shift and go to state 140

state 121

    (87) if -> RES_IF LPAREN . expresion RPAREN COL bloque ifelse
    (93) expresion -> . exp expresion_1 cuadruplo_exp_9
    (104) exp -> . termino cuadruplo_exp_4 exp1
    (110) termino -> . factor cuadruplo_exp_5 termino1
    (118) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (119) factor -> . cons
    (120) factor -> . PLUS cons
    (121) factor -> . MINUS cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    cons                           shift and go to state 141
    termino                        shift and go to state 143
    seen_float_cons                shift and go to state 67
    factor                         shift and go to state 145
    seen_int_cons                  shift and go to state 74
    seen_id_cons                   shift and go to state 68
    expresion                      shift and go to state 147
    conslist                       shift and go to state 75
    consarray                      shift and go to state 76
    exp                            shift and go to state 148

state 122

    (53) estatutos -> ciclo E_END .

    RES_READ        reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_PRINT       reduce using rule 53 (estatutos -> ciclo E_END .)
    ID              reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_DEF         reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_IF          reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_SWITCH      reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_WHILE       reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_FOR         reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_END         reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_CASE        reduce using rule 53 (estatutos -> ciclo E_END .)
    E_END           reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_START       reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_FUNC        reduce using rule 53 (estatutos -> ciclo E_END .)
    $end            reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_ELSE        reduce using rule 53 (estatutos -> ciclo E_END .)


state 123

    (70) asignacion -> seen_id_asignacion EQUALS . cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (71) cuadruplo_exp_8_asignacion -> .

    LCURLY          reduce using rule 71 (cuadruplo_exp_8_asignacion -> .)
    LBRACKET        reduce using rule 71 (cuadruplo_exp_8_asignacion -> .)
    LPAREN          reduce using rule 71 (cuadruplo_exp_8_asignacion -> .)
    PLUS            reduce using rule 71 (cuadruplo_exp_8_asignacion -> .)
    MINUS           reduce using rule 71 (cuadruplo_exp_8_asignacion -> .)
    CTE_DOUBLE      reduce using rule 71 (cuadruplo_exp_8_asignacion -> .)
    CTE_STRING      reduce using rule 71 (cuadruplo_exp_8_asignacion -> .)
    RES_TRUE        reduce using rule 71 (cuadruplo_exp_8_asignacion -> .)
    RES_FALSE       reduce using rule 71 (cuadruplo_exp_8_asignacion -> .)
    ID              reduce using rule 71 (cuadruplo_exp_8_asignacion -> .)
    CTE_INT         reduce using rule 71 (cuadruplo_exp_8_asignacion -> .)
    CTE_FLOAT       reduce using rule 71 (cuadruplo_exp_8_asignacion -> .)

    cuadruplo_exp_8_asignacion     shift and go to state 149

state 124

    (52) estatutos -> condicion E_END .

    RES_READ        reduce using rule 52 (estatutos -> condicion E_END .)
    RES_PRINT       reduce using rule 52 (estatutos -> condicion E_END .)
    ID              reduce using rule 52 (estatutos -> condicion E_END .)
    RES_DEF         reduce using rule 52 (estatutos -> condicion E_END .)
    RES_IF          reduce using rule 52 (estatutos -> condicion E_END .)
    RES_SWITCH      reduce using rule 52 (estatutos -> condicion E_END .)
    RES_WHILE       reduce using rule 52 (estatutos -> condicion E_END .)
    RES_FOR         reduce using rule 52 (estatutos -> condicion E_END .)
    RES_END         reduce using rule 52 (estatutos -> condicion E_END .)
    RES_CASE        reduce using rule 52 (estatutos -> condicion E_END .)
    E_END           reduce using rule 52 (estatutos -> condicion E_END .)
    RES_START       reduce using rule 52 (estatutos -> condicion E_END .)
    RES_FUNC        reduce using rule 52 (estatutos -> condicion E_END .)
    $end            reduce using rule 52 (estatutos -> condicion E_END .)
    RES_ELSE        reduce using rule 52 (estatutos -> condicion E_END .)


state 125

    (67) escritura -> RES_PRINT LPAREN . escritura1 RPAREN
    (68) escritura1 -> . expresion
    (69) escritura1 -> . CTE_STRING
    (93) expresion -> . exp expresion_1 cuadruplo_exp_9
    (104) exp -> . termino cuadruplo_exp_4 exp1
    (110) termino -> . factor cuadruplo_exp_5 termino1
    (118) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (119) factor -> . cons
    (120) factor -> . PLUS cons
    (121) factor -> . MINUS cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_STRING      shift and go to state 150
    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    cons                           shift and go to state 141
    termino                        shift and go to state 143
    seen_float_cons                shift and go to state 67
    factor                         shift and go to state 145
    seen_int_cons                  shift and go to state 74
    escritura1                     shift and go to state 151
    seen_id_cons                   shift and go to state 68
    expresion                      shift and go to state 152
    conslist                       shift and go to state 75
    consarray                      shift and go to state 76
    exp                            shift and go to state 148

state 126

    (50) bloque -> estatutos bloque .

    RES_START       reduce using rule 50 (bloque -> estatutos bloque .)
    RES_FUNC        reduce using rule 50 (bloque -> estatutos bloque .)
    $end            reduce using rule 50 (bloque -> estatutos bloque .)
    RES_END         reduce using rule 50 (bloque -> estatutos bloque .)
    E_END           reduce using rule 50 (bloque -> estatutos bloque .)
    RES_ELSE        reduce using rule 50 (bloque -> estatutos bloque .)
    RES_CASE        reduce using rule 50 (bloque -> estatutos bloque .)


state 127

    (84) while -> RES_WHILE LPAREN . expresion RPAREN COL bloque
    (93) expresion -> . exp expresion_1 cuadruplo_exp_9
    (104) exp -> . termino cuadruplo_exp_4 exp1
    (110) termino -> . factor cuadruplo_exp_5 termino1
    (118) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (119) factor -> . cons
    (120) factor -> . PLUS cons
    (121) factor -> . MINUS cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    cons                           shift and go to state 141
    termino                        shift and go to state 143
    seen_float_cons                shift and go to state 67
    factor                         shift and go to state 145
    seen_int_cons                  shift and go to state 74
    seen_id_cons                   shift and go to state 68
    expresion                      shift and go to state 153
    conslist                       shift and go to state 75
    consarray                      shift and go to state 76
    exp                            shift and go to state 148

state 128

    (63) llamada -> ID LPAREN . llamada1 RPAREN
    (64) llamada1 -> . expresion
    (65) llamada1 -> . empty
    (93) expresion -> . exp expresion_1 cuadruplo_exp_9
    (145) empty -> .
    (104) exp -> . termino cuadruplo_exp_4 exp1
    (110) termino -> . factor cuadruplo_exp_5 termino1
    (118) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (119) factor -> . cons
    (120) factor -> . PLUS cons
    (121) factor -> . MINUS cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    RPAREN          reduce using rule 145 (empty -> .)
    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    cons                           shift and go to state 141
    termino                        shift and go to state 143
    llamada1                       shift and go to state 154
    seen_float_cons                shift and go to state 67
    factor                         shift and go to state 145
    empty                          shift and go to state 155
    seen_int_cons                  shift and go to state 74
    seen_id_cons                   shift and go to state 68
    expresion                      shift and go to state 156
    conslist                       shift and go to state 75
    consarray                      shift and go to state 76
    exp                            shift and go to state 148

state 129

    (66) lectura -> RES_READ LPAREN . tipo RPAREN
    (24) tipo -> . dato
    (25) tipo -> . estructura
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (26) estructura -> . list
    (27) estructura -> . array
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    tipo                           shift and go to state 157
    list                           shift and go to state 34
    estructura                     shift and go to state 47
    dato                           shift and go to state 48
    array                          shift and go to state 29

state 130

    (90) switch -> RES_SWITCH COL . switch2
    (91) switch2 -> . RES_CASE expresion COL bloque switch2
    (92) switch2 -> . empty
    (145) empty -> .

    RES_CASE        shift and go to state 159
    E_END           reduce using rule 145 (empty -> .)

    switch2                        shift and go to state 158
    empty                          shift and go to state 160

state 131

    (139) main -> RES_START comienza_main COL bloque RES_END .

    RES_FUNC        reduce using rule 139 (main -> RES_START comienza_main COL bloque RES_END .)
    $end            reduce using rule 139 (main -> RES_START comienza_main COL bloque RES_END .)


state 132

    (41) cons_loop_1 -> COMMA . cons_loop
    (40) cons_loop -> . cons cons_loop_1
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 110
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    cons_loop                      shift and go to state 161
    seen_id_cons                   shift and go to state 68

state 133

    (42) cons_loop_1 -> empty .

    RCURLY          reduce using rule 42 (cons_loop_1 -> empty .)


state 134

    (40) cons_loop -> cons cons_loop_1 .

    RCURLY          reduce using rule 40 (cons_loop -> cons cons_loop_1 .)


state 135

    (38) list1 -> LCURLY cons_loop RCURLY .

    RES_INT         reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_FLOAT       reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_DOUBLE      reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_BOOLEAN     reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_STRING      reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_LIST        reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_ARRAY       reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    ID              reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RPAREN          reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)


state 136

    (142) conslist -> ID EQUALS LCURLY . conslist1 RCURLY
    (143) conslist1 -> . cons
    (144) conslist1 -> . cons COMMA conslist1
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 162
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    conslist1                      shift and go to state 163
    seen_id_cons                   shift and go to state 68

state 137

    (141) consarray -> ID LBRACKET CTE_INT . RBRACKET EQUALS cons

    RBRACKET        shift and go to state 164


state 138

    (43) array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET . array1
    (44) array1 -> . COL LBRACKET array2 RBRACKET
    (45) array1 -> . empty
    (145) empty -> .

    COL             shift and go to state 166
    RES_INT         reduce using rule 145 (empty -> .)
    RES_FLOAT       reduce using rule 145 (empty -> .)
    RES_DOUBLE      reduce using rule 145 (empty -> .)
    RES_BOOLEAN     reduce using rule 145 (empty -> .)
    RES_STRING      reduce using rule 145 (empty -> .)
    RES_LIST        reduce using rule 145 (empty -> .)
    RES_ARRAY       reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    RPAREN          reduce using rule 145 (empty -> .)

    array1                         shift and go to state 165
    empty                          shift and go to state 167

state 139

    (86) forexp -> ID . EQUALS cons COL expresion COL ID EQUALS expresion

    EQUALS          shift and go to state 168


state 140

    (85) for -> RES_FOR LPAREN forexp . RPAREN COL bloque

    RPAREN          shift and go to state 169


state 141

    (119) factor -> cons .

    TIMES           reduce using rule 119 (factor -> cons .)
    DIVIDE          reduce using rule 119 (factor -> cons .)
    PLUS            reduce using rule 119 (factor -> cons .)
    MINUS           reduce using rule 119 (factor -> cons .)
    RES_READ        reduce using rule 119 (factor -> cons .)
    RES_PRINT       reduce using rule 119 (factor -> cons .)
    ID              reduce using rule 119 (factor -> cons .)
    RES_DEF         reduce using rule 119 (factor -> cons .)
    RES_IF          reduce using rule 119 (factor -> cons .)
    RES_SWITCH      reduce using rule 119 (factor -> cons .)
    RES_WHILE       reduce using rule 119 (factor -> cons .)
    RES_FOR         reduce using rule 119 (factor -> cons .)
    RES_START       reduce using rule 119 (factor -> cons .)
    RES_FUNC        reduce using rule 119 (factor -> cons .)
    $end            reduce using rule 119 (factor -> cons .)
    RES_END         reduce using rule 119 (factor -> cons .)
    E_END           reduce using rule 119 (factor -> cons .)
    RES_ELSE        reduce using rule 119 (factor -> cons .)
    RES_CASE        reduce using rule 119 (factor -> cons .)
    MIN             reduce using rule 119 (factor -> cons .)
    MIN_EQ          reduce using rule 119 (factor -> cons .)
    MAY             reduce using rule 119 (factor -> cons .)
    MAY_EQ          reduce using rule 119 (factor -> cons .)
    DIF             reduce using rule 119 (factor -> cons .)
    EQ_EQ           reduce using rule 119 (factor -> cons .)
    RPAREN          reduce using rule 119 (factor -> cons .)
    COL             reduce using rule 119 (factor -> cons .)


state 142

    (118) factor -> LPAREN . cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (122) cuadruplo_exp_6 -> .

    LPAREN          reduce using rule 122 (cuadruplo_exp_6 -> .)
    PLUS            reduce using rule 122 (cuadruplo_exp_6 -> .)
    MINUS           reduce using rule 122 (cuadruplo_exp_6 -> .)
    CTE_DOUBLE      reduce using rule 122 (cuadruplo_exp_6 -> .)
    CTE_STRING      reduce using rule 122 (cuadruplo_exp_6 -> .)
    RES_TRUE        reduce using rule 122 (cuadruplo_exp_6 -> .)
    RES_FALSE       reduce using rule 122 (cuadruplo_exp_6 -> .)
    ID              reduce using rule 122 (cuadruplo_exp_6 -> .)
    CTE_INT         reduce using rule 122 (cuadruplo_exp_6 -> .)
    CTE_FLOAT       reduce using rule 122 (cuadruplo_exp_6 -> .)

    cuadruplo_exp_6                shift and go to state 170

state 143

    (104) exp -> termino . cuadruplo_exp_4 exp1
    (116) cuadruplo_exp_4 -> .

    PLUS            reduce using rule 116 (cuadruplo_exp_4 -> .)
    MINUS           reduce using rule 116 (cuadruplo_exp_4 -> .)
    MIN             reduce using rule 116 (cuadruplo_exp_4 -> .)
    MIN_EQ          reduce using rule 116 (cuadruplo_exp_4 -> .)
    MAY             reduce using rule 116 (cuadruplo_exp_4 -> .)
    MAY_EQ          reduce using rule 116 (cuadruplo_exp_4 -> .)
    DIF             reduce using rule 116 (cuadruplo_exp_4 -> .)
    EQ_EQ           reduce using rule 116 (cuadruplo_exp_4 -> .)
    RPAREN          reduce using rule 116 (cuadruplo_exp_4 -> .)
    RES_READ        reduce using rule 116 (cuadruplo_exp_4 -> .)
    RES_PRINT       reduce using rule 116 (cuadruplo_exp_4 -> .)
    ID              reduce using rule 116 (cuadruplo_exp_4 -> .)
    RES_DEF         reduce using rule 116 (cuadruplo_exp_4 -> .)
    RES_IF          reduce using rule 116 (cuadruplo_exp_4 -> .)
    RES_SWITCH      reduce using rule 116 (cuadruplo_exp_4 -> .)
    RES_WHILE       reduce using rule 116 (cuadruplo_exp_4 -> .)
    RES_FOR         reduce using rule 116 (cuadruplo_exp_4 -> .)
    RES_START       reduce using rule 116 (cuadruplo_exp_4 -> .)
    RES_FUNC        reduce using rule 116 (cuadruplo_exp_4 -> .)
    $end            reduce using rule 116 (cuadruplo_exp_4 -> .)
    RES_END         reduce using rule 116 (cuadruplo_exp_4 -> .)
    E_END           reduce using rule 116 (cuadruplo_exp_4 -> .)
    RES_ELSE        reduce using rule 116 (cuadruplo_exp_4 -> .)
    RES_CASE        reduce using rule 116 (cuadruplo_exp_4 -> .)
    COL             reduce using rule 116 (cuadruplo_exp_4 -> .)

    cuadruplo_exp_4                shift and go to state 171

state 144

    (121) factor -> MINUS . cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 172
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_id_cons                   shift and go to state 68

state 145

    (110) termino -> factor . cuadruplo_exp_5 termino1
    (117) cuadruplo_exp_5 -> .

    TIMES           reduce using rule 117 (cuadruplo_exp_5 -> .)
    DIVIDE          reduce using rule 117 (cuadruplo_exp_5 -> .)
    PLUS            reduce using rule 117 (cuadruplo_exp_5 -> .)
    MINUS           reduce using rule 117 (cuadruplo_exp_5 -> .)
    MIN             reduce using rule 117 (cuadruplo_exp_5 -> .)
    MIN_EQ          reduce using rule 117 (cuadruplo_exp_5 -> .)
    MAY             reduce using rule 117 (cuadruplo_exp_5 -> .)
    MAY_EQ          reduce using rule 117 (cuadruplo_exp_5 -> .)
    DIF             reduce using rule 117 (cuadruplo_exp_5 -> .)
    EQ_EQ           reduce using rule 117 (cuadruplo_exp_5 -> .)
    RPAREN          reduce using rule 117 (cuadruplo_exp_5 -> .)
    RES_READ        reduce using rule 117 (cuadruplo_exp_5 -> .)
    RES_PRINT       reduce using rule 117 (cuadruplo_exp_5 -> .)
    ID              reduce using rule 117 (cuadruplo_exp_5 -> .)
    RES_DEF         reduce using rule 117 (cuadruplo_exp_5 -> .)
    RES_IF          reduce using rule 117 (cuadruplo_exp_5 -> .)
    RES_SWITCH      reduce using rule 117 (cuadruplo_exp_5 -> .)
    RES_WHILE       reduce using rule 117 (cuadruplo_exp_5 -> .)
    RES_FOR         reduce using rule 117 (cuadruplo_exp_5 -> .)
    RES_START       reduce using rule 117 (cuadruplo_exp_5 -> .)
    RES_FUNC        reduce using rule 117 (cuadruplo_exp_5 -> .)
    $end            reduce using rule 117 (cuadruplo_exp_5 -> .)
    RES_END         reduce using rule 117 (cuadruplo_exp_5 -> .)
    E_END           reduce using rule 117 (cuadruplo_exp_5 -> .)
    RES_ELSE        reduce using rule 117 (cuadruplo_exp_5 -> .)
    RES_CASE        reduce using rule 117 (cuadruplo_exp_5 -> .)
    COL             reduce using rule 117 (cuadruplo_exp_5 -> .)

    cuadruplo_exp_5                shift and go to state 173

state 146

    (120) factor -> PLUS . cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 174
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_id_cons                   shift and go to state 68

state 147

    (87) if -> RES_IF LPAREN expresion . RPAREN COL bloque ifelse

    RPAREN          shift and go to state 175


state 148

    (93) expresion -> exp . expresion_1 cuadruplo_exp_9
    (94) expresion_1 -> . see_rel cuadruplo_exp_8 exp
    (95) expresion_1 -> . empty
    (96) see_rel -> . MIN
    (97) see_rel -> . MIN_EQ
    (98) see_rel -> . MAY
    (99) see_rel -> . MAY_EQ
    (100) see_rel -> . DIF
    (101) see_rel -> . EQ_EQ
    (145) empty -> .

    MIN             shift and go to state 177
    MIN_EQ          shift and go to state 176
    MAY             shift and go to state 178
    MAY_EQ          shift and go to state 179
    DIF             shift and go to state 183
    EQ_EQ           shift and go to state 180
    RPAREN          reduce using rule 145 (empty -> .)
    COL             reduce using rule 145 (empty -> .)

    see_rel                        shift and go to state 181
    expresion_1                    shift and go to state 182
    empty                          shift and go to state 184

state 149

    (70) asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion . asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (75) asignacion1 -> . exp
    (76) asignacion1 -> . asignlist
    (77) asignacion1 -> . asignarray
    (104) exp -> . termino cuadruplo_exp_4 exp1
    (78) asignlist -> . LCURLY asignlist1 RCURLY
    (81) asignarray -> . LBRACKET asignarray1 RBRACKET
    (110) termino -> . factor cuadruplo_exp_5 termino1
    (118) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (119) factor -> . cons
    (120) factor -> . PLUS cons
    (121) factor -> . MINUS cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LCURLY          shift and go to state 186
    LBRACKET        shift and go to state 185
    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    cons                           shift and go to state 141
    asignlist                      shift and go to state 188
    termino                        shift and go to state 143
    asignarray                     shift and go to state 187
    seen_float_cons                shift and go to state 67
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68
    seen_int_cons                  shift and go to state 74
    conslist                       shift and go to state 75
    consarray                      shift and go to state 76
    exp                            shift and go to state 189
    asignacion1                    shift and go to state 190

state 150

    (69) escritura1 -> CTE_STRING .
    (128) cons -> CTE_STRING .

  ! reduce/reduce conflict for RPAREN resolved using rule 69 (escritura1 -> CTE_STRING .)
    RPAREN          reduce using rule 69 (escritura1 -> CTE_STRING .)
    TIMES           reduce using rule 128 (cons -> CTE_STRING .)
    DIVIDE          reduce using rule 128 (cons -> CTE_STRING .)
    PLUS            reduce using rule 128 (cons -> CTE_STRING .)
    MINUS           reduce using rule 128 (cons -> CTE_STRING .)
    MIN             reduce using rule 128 (cons -> CTE_STRING .)
    MIN_EQ          reduce using rule 128 (cons -> CTE_STRING .)
    MAY             reduce using rule 128 (cons -> CTE_STRING .)
    MAY_EQ          reduce using rule 128 (cons -> CTE_STRING .)
    DIF             reduce using rule 128 (cons -> CTE_STRING .)
    EQ_EQ           reduce using rule 128 (cons -> CTE_STRING .)

  ! RPAREN          [ reduce using rule 128 (cons -> CTE_STRING .) ]


state 151

    (67) escritura -> RES_PRINT LPAREN escritura1 . RPAREN

    RPAREN          shift and go to state 191


state 152

    (68) escritura1 -> expresion .

    RPAREN          reduce using rule 68 (escritura1 -> expresion .)


state 153

    (84) while -> RES_WHILE LPAREN expresion . RPAREN COL bloque

    RPAREN          shift and go to state 192


state 154

    (63) llamada -> ID LPAREN llamada1 . RPAREN

    RPAREN          shift and go to state 193


state 155

    (65) llamada1 -> empty .

    RPAREN          reduce using rule 65 (llamada1 -> empty .)


state 156

    (64) llamada1 -> expresion .

    RPAREN          reduce using rule 64 (llamada1 -> expresion .)


state 157

    (66) lectura -> RES_READ LPAREN tipo . RPAREN

    RPAREN          shift and go to state 194


state 158

    (90) switch -> RES_SWITCH COL switch2 .

    E_END           reduce using rule 90 (switch -> RES_SWITCH COL switch2 .)


state 159

    (91) switch2 -> RES_CASE . expresion COL bloque switch2
    (93) expresion -> . exp expresion_1 cuadruplo_exp_9
    (104) exp -> . termino cuadruplo_exp_4 exp1
    (110) termino -> . factor cuadruplo_exp_5 termino1
    (118) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (119) factor -> . cons
    (120) factor -> . PLUS cons
    (121) factor -> . MINUS cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    cons                           shift and go to state 141
    termino                        shift and go to state 143
    seen_float_cons                shift and go to state 67
    factor                         shift and go to state 145
    seen_int_cons                  shift and go to state 74
    seen_id_cons                   shift and go to state 68
    expresion                      shift and go to state 195
    conslist                       shift and go to state 75
    consarray                      shift and go to state 76
    exp                            shift and go to state 148

state 160

    (92) switch2 -> empty .

    E_END           reduce using rule 92 (switch2 -> empty .)


state 161

    (41) cons_loop_1 -> COMMA cons_loop .

    RCURLY          reduce using rule 41 (cons_loop_1 -> COMMA cons_loop .)


state 162

    (143) conslist1 -> cons .
    (144) conslist1 -> cons . COMMA conslist1

    RCURLY          reduce using rule 143 (conslist1 -> cons .)
    COMMA           shift and go to state 196


state 163

    (142) conslist -> ID EQUALS LCURLY conslist1 . RCURLY

    RCURLY          shift and go to state 197


state 164

    (141) consarray -> ID LBRACKET CTE_INT RBRACKET . EQUALS cons

    EQUALS          shift and go to state 198


state 165

    (43) array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .

    RES_INT         reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_FLOAT       reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_DOUBLE      reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_BOOLEAN     reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_STRING      reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_LIST        reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_ARRAY       reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    ID              reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RPAREN          reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)


state 166

    (44) array1 -> COL . LBRACKET array2 RBRACKET

    LBRACKET        shift and go to state 199


state 167

    (45) array1 -> empty .

    RES_INT         reduce using rule 45 (array1 -> empty .)
    RES_FLOAT       reduce using rule 45 (array1 -> empty .)
    RES_DOUBLE      reduce using rule 45 (array1 -> empty .)
    RES_BOOLEAN     reduce using rule 45 (array1 -> empty .)
    RES_STRING      reduce using rule 45 (array1 -> empty .)
    RES_LIST        reduce using rule 45 (array1 -> empty .)
    RES_ARRAY       reduce using rule 45 (array1 -> empty .)
    ID              reduce using rule 45 (array1 -> empty .)
    RPAREN          reduce using rule 45 (array1 -> empty .)


state 168

    (86) forexp -> ID EQUALS . cons COL expresion COL ID EQUALS expresion
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 200
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_id_cons                   shift and go to state 68

state 169

    (85) for -> RES_FOR LPAREN forexp RPAREN . COL bloque

    COL             shift and go to state 201


state 170

    (118) factor -> LPAREN cuadruplo_exp_6 . exp RPAREN cuadruplo_exp_7
    (104) exp -> . termino cuadruplo_exp_4 exp1
    (110) termino -> . factor cuadruplo_exp_5 termino1
    (118) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (119) factor -> . cons
    (120) factor -> . PLUS cons
    (121) factor -> . MINUS cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    seen_float_cons                shift and go to state 67
    seen_id_cons                   shift and go to state 68
    cons                           shift and go to state 141
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    exp                            shift and go to state 202
    factor                         shift and go to state 145
    consarray                      shift and go to state 76

state 171

    (104) exp -> termino cuadruplo_exp_4 . exp1
    (105) exp1 -> . see_operador_e cuadruplos_exp_2 exp
    (106) exp1 -> . empty
    (107) see_operador_e -> . PLUS
    (108) see_operador_e -> . MINUS
    (145) empty -> .

    PLUS            shift and go to state 204
    MINUS           shift and go to state 206
    MIN             reduce using rule 145 (empty -> .)
    MIN_EQ          reduce using rule 145 (empty -> .)
    MAY             reduce using rule 145 (empty -> .)
    MAY_EQ          reduce using rule 145 (empty -> .)
    DIF             reduce using rule 145 (empty -> .)
    EQ_EQ           reduce using rule 145 (empty -> .)
    RPAREN          reduce using rule 145 (empty -> .)
    RES_READ        reduce using rule 145 (empty -> .)
    RES_PRINT       reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    RES_DEF         reduce using rule 145 (empty -> .)
    RES_IF          reduce using rule 145 (empty -> .)
    RES_SWITCH      reduce using rule 145 (empty -> .)
    RES_WHILE       reduce using rule 145 (empty -> .)
    RES_FOR         reduce using rule 145 (empty -> .)
    RES_START       reduce using rule 145 (empty -> .)
    RES_FUNC        reduce using rule 145 (empty -> .)
    $end            reduce using rule 145 (empty -> .)
    RES_END         reduce using rule 145 (empty -> .)
    E_END           reduce using rule 145 (empty -> .)
    RES_ELSE        reduce using rule 145 (empty -> .)
    RES_CASE        reduce using rule 145 (empty -> .)
    COL             reduce using rule 145 (empty -> .)

    exp1                           shift and go to state 203
    see_operador_e                 shift and go to state 205
    empty                          shift and go to state 207

state 172

    (121) factor -> MINUS cons .

    TIMES           reduce using rule 121 (factor -> MINUS cons .)
    DIVIDE          reduce using rule 121 (factor -> MINUS cons .)
    PLUS            reduce using rule 121 (factor -> MINUS cons .)
    MINUS           reduce using rule 121 (factor -> MINUS cons .)
    RES_READ        reduce using rule 121 (factor -> MINUS cons .)
    RES_PRINT       reduce using rule 121 (factor -> MINUS cons .)
    ID              reduce using rule 121 (factor -> MINUS cons .)
    RES_DEF         reduce using rule 121 (factor -> MINUS cons .)
    RES_IF          reduce using rule 121 (factor -> MINUS cons .)
    RES_SWITCH      reduce using rule 121 (factor -> MINUS cons .)
    RES_WHILE       reduce using rule 121 (factor -> MINUS cons .)
    RES_FOR         reduce using rule 121 (factor -> MINUS cons .)
    RES_START       reduce using rule 121 (factor -> MINUS cons .)
    RES_FUNC        reduce using rule 121 (factor -> MINUS cons .)
    $end            reduce using rule 121 (factor -> MINUS cons .)
    RES_END         reduce using rule 121 (factor -> MINUS cons .)
    E_END           reduce using rule 121 (factor -> MINUS cons .)
    RES_ELSE        reduce using rule 121 (factor -> MINUS cons .)
    RES_CASE        reduce using rule 121 (factor -> MINUS cons .)
    MIN             reduce using rule 121 (factor -> MINUS cons .)
    MIN_EQ          reduce using rule 121 (factor -> MINUS cons .)
    MAY             reduce using rule 121 (factor -> MINUS cons .)
    MAY_EQ          reduce using rule 121 (factor -> MINUS cons .)
    DIF             reduce using rule 121 (factor -> MINUS cons .)
    EQ_EQ           reduce using rule 121 (factor -> MINUS cons .)
    RPAREN          reduce using rule 121 (factor -> MINUS cons .)
    COL             reduce using rule 121 (factor -> MINUS cons .)


state 173

    (110) termino -> factor cuadruplo_exp_5 . termino1
    (111) termino1 -> . see_operador_f cuadruplos_exp_3 termino
    (112) termino1 -> . empty
    (113) see_operador_f -> . TIMES
    (114) see_operador_f -> . DIVIDE
    (145) empty -> .

    TIMES           shift and go to state 211
    DIVIDE          shift and go to state 208
    PLUS            reduce using rule 145 (empty -> .)
    MINUS           reduce using rule 145 (empty -> .)
    MIN             reduce using rule 145 (empty -> .)
    MIN_EQ          reduce using rule 145 (empty -> .)
    MAY             reduce using rule 145 (empty -> .)
    MAY_EQ          reduce using rule 145 (empty -> .)
    DIF             reduce using rule 145 (empty -> .)
    EQ_EQ           reduce using rule 145 (empty -> .)
    RPAREN          reduce using rule 145 (empty -> .)
    RES_READ        reduce using rule 145 (empty -> .)
    RES_PRINT       reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    RES_DEF         reduce using rule 145 (empty -> .)
    RES_IF          reduce using rule 145 (empty -> .)
    RES_SWITCH      reduce using rule 145 (empty -> .)
    RES_WHILE       reduce using rule 145 (empty -> .)
    RES_FOR         reduce using rule 145 (empty -> .)
    RES_START       reduce using rule 145 (empty -> .)
    RES_FUNC        reduce using rule 145 (empty -> .)
    $end            reduce using rule 145 (empty -> .)
    RES_END         reduce using rule 145 (empty -> .)
    E_END           reduce using rule 145 (empty -> .)
    RES_ELSE        reduce using rule 145 (empty -> .)
    RES_CASE        reduce using rule 145 (empty -> .)
    COL             reduce using rule 145 (empty -> .)

    termino1                       shift and go to state 209
    see_operador_f                 shift and go to state 210
    empty                          shift and go to state 212

state 174

    (120) factor -> PLUS cons .

    TIMES           reduce using rule 120 (factor -> PLUS cons .)
    DIVIDE          reduce using rule 120 (factor -> PLUS cons .)
    PLUS            reduce using rule 120 (factor -> PLUS cons .)
    MINUS           reduce using rule 120 (factor -> PLUS cons .)
    RES_READ        reduce using rule 120 (factor -> PLUS cons .)
    RES_PRINT       reduce using rule 120 (factor -> PLUS cons .)
    ID              reduce using rule 120 (factor -> PLUS cons .)
    RES_DEF         reduce using rule 120 (factor -> PLUS cons .)
    RES_IF          reduce using rule 120 (factor -> PLUS cons .)
    RES_SWITCH      reduce using rule 120 (factor -> PLUS cons .)
    RES_WHILE       reduce using rule 120 (factor -> PLUS cons .)
    RES_FOR         reduce using rule 120 (factor -> PLUS cons .)
    RES_START       reduce using rule 120 (factor -> PLUS cons .)
    RES_FUNC        reduce using rule 120 (factor -> PLUS cons .)
    $end            reduce using rule 120 (factor -> PLUS cons .)
    RES_END         reduce using rule 120 (factor -> PLUS cons .)
    E_END           reduce using rule 120 (factor -> PLUS cons .)
    RES_ELSE        reduce using rule 120 (factor -> PLUS cons .)
    RES_CASE        reduce using rule 120 (factor -> PLUS cons .)
    MIN             reduce using rule 120 (factor -> PLUS cons .)
    MIN_EQ          reduce using rule 120 (factor -> PLUS cons .)
    MAY             reduce using rule 120 (factor -> PLUS cons .)
    MAY_EQ          reduce using rule 120 (factor -> PLUS cons .)
    DIF             reduce using rule 120 (factor -> PLUS cons .)
    EQ_EQ           reduce using rule 120 (factor -> PLUS cons .)
    RPAREN          reduce using rule 120 (factor -> PLUS cons .)
    COL             reduce using rule 120 (factor -> PLUS cons .)


state 175

    (87) if -> RES_IF LPAREN expresion RPAREN . COL bloque ifelse

    COL             shift and go to state 213


state 176

    (97) see_rel -> MIN_EQ .

    LPAREN          reduce using rule 97 (see_rel -> MIN_EQ .)
    PLUS            reduce using rule 97 (see_rel -> MIN_EQ .)
    MINUS           reduce using rule 97 (see_rel -> MIN_EQ .)
    CTE_DOUBLE      reduce using rule 97 (see_rel -> MIN_EQ .)
    CTE_STRING      reduce using rule 97 (see_rel -> MIN_EQ .)
    RES_TRUE        reduce using rule 97 (see_rel -> MIN_EQ .)
    RES_FALSE       reduce using rule 97 (see_rel -> MIN_EQ .)
    ID              reduce using rule 97 (see_rel -> MIN_EQ .)
    CTE_INT         reduce using rule 97 (see_rel -> MIN_EQ .)
    CTE_FLOAT       reduce using rule 97 (see_rel -> MIN_EQ .)


state 177

    (96) see_rel -> MIN .

    LPAREN          reduce using rule 96 (see_rel -> MIN .)
    PLUS            reduce using rule 96 (see_rel -> MIN .)
    MINUS           reduce using rule 96 (see_rel -> MIN .)
    CTE_DOUBLE      reduce using rule 96 (see_rel -> MIN .)
    CTE_STRING      reduce using rule 96 (see_rel -> MIN .)
    RES_TRUE        reduce using rule 96 (see_rel -> MIN .)
    RES_FALSE       reduce using rule 96 (see_rel -> MIN .)
    ID              reduce using rule 96 (see_rel -> MIN .)
    CTE_INT         reduce using rule 96 (see_rel -> MIN .)
    CTE_FLOAT       reduce using rule 96 (see_rel -> MIN .)


state 178

    (98) see_rel -> MAY .

    LPAREN          reduce using rule 98 (see_rel -> MAY .)
    PLUS            reduce using rule 98 (see_rel -> MAY .)
    MINUS           reduce using rule 98 (see_rel -> MAY .)
    CTE_DOUBLE      reduce using rule 98 (see_rel -> MAY .)
    CTE_STRING      reduce using rule 98 (see_rel -> MAY .)
    RES_TRUE        reduce using rule 98 (see_rel -> MAY .)
    RES_FALSE       reduce using rule 98 (see_rel -> MAY .)
    ID              reduce using rule 98 (see_rel -> MAY .)
    CTE_INT         reduce using rule 98 (see_rel -> MAY .)
    CTE_FLOAT       reduce using rule 98 (see_rel -> MAY .)


state 179

    (99) see_rel -> MAY_EQ .

    LPAREN          reduce using rule 99 (see_rel -> MAY_EQ .)
    PLUS            reduce using rule 99 (see_rel -> MAY_EQ .)
    MINUS           reduce using rule 99 (see_rel -> MAY_EQ .)
    CTE_DOUBLE      reduce using rule 99 (see_rel -> MAY_EQ .)
    CTE_STRING      reduce using rule 99 (see_rel -> MAY_EQ .)
    RES_TRUE        reduce using rule 99 (see_rel -> MAY_EQ .)
    RES_FALSE       reduce using rule 99 (see_rel -> MAY_EQ .)
    ID              reduce using rule 99 (see_rel -> MAY_EQ .)
    CTE_INT         reduce using rule 99 (see_rel -> MAY_EQ .)
    CTE_FLOAT       reduce using rule 99 (see_rel -> MAY_EQ .)


state 180

    (101) see_rel -> EQ_EQ .

    LPAREN          reduce using rule 101 (see_rel -> EQ_EQ .)
    PLUS            reduce using rule 101 (see_rel -> EQ_EQ .)
    MINUS           reduce using rule 101 (see_rel -> EQ_EQ .)
    CTE_DOUBLE      reduce using rule 101 (see_rel -> EQ_EQ .)
    CTE_STRING      reduce using rule 101 (see_rel -> EQ_EQ .)
    RES_TRUE        reduce using rule 101 (see_rel -> EQ_EQ .)
    RES_FALSE       reduce using rule 101 (see_rel -> EQ_EQ .)
    ID              reduce using rule 101 (see_rel -> EQ_EQ .)
    CTE_INT         reduce using rule 101 (see_rel -> EQ_EQ .)
    CTE_FLOAT       reduce using rule 101 (see_rel -> EQ_EQ .)


state 181

    (94) expresion_1 -> see_rel . cuadruplo_exp_8 exp
    (102) cuadruplo_exp_8 -> .

    LPAREN          reduce using rule 102 (cuadruplo_exp_8 -> .)
    PLUS            reduce using rule 102 (cuadruplo_exp_8 -> .)
    MINUS           reduce using rule 102 (cuadruplo_exp_8 -> .)
    CTE_DOUBLE      reduce using rule 102 (cuadruplo_exp_8 -> .)
    CTE_STRING      reduce using rule 102 (cuadruplo_exp_8 -> .)
    RES_TRUE        reduce using rule 102 (cuadruplo_exp_8 -> .)
    RES_FALSE       reduce using rule 102 (cuadruplo_exp_8 -> .)
    ID              reduce using rule 102 (cuadruplo_exp_8 -> .)
    CTE_INT         reduce using rule 102 (cuadruplo_exp_8 -> .)
    CTE_FLOAT       reduce using rule 102 (cuadruplo_exp_8 -> .)

    cuadruplo_exp_8                shift and go to state 214

state 182

    (93) expresion -> exp expresion_1 . cuadruplo_exp_9
    (103) cuadruplo_exp_9 -> .

    RPAREN          reduce using rule 103 (cuadruplo_exp_9 -> .)
    COL             reduce using rule 103 (cuadruplo_exp_9 -> .)

    cuadruplo_exp_9                shift and go to state 215

state 183

    (100) see_rel -> DIF .

    LPAREN          reduce using rule 100 (see_rel -> DIF .)
    PLUS            reduce using rule 100 (see_rel -> DIF .)
    MINUS           reduce using rule 100 (see_rel -> DIF .)
    CTE_DOUBLE      reduce using rule 100 (see_rel -> DIF .)
    CTE_STRING      reduce using rule 100 (see_rel -> DIF .)
    RES_TRUE        reduce using rule 100 (see_rel -> DIF .)
    RES_FALSE       reduce using rule 100 (see_rel -> DIF .)
    ID              reduce using rule 100 (see_rel -> DIF .)
    CTE_INT         reduce using rule 100 (see_rel -> DIF .)
    CTE_FLOAT       reduce using rule 100 (see_rel -> DIF .)


state 184

    (95) expresion_1 -> empty .

    RPAREN          reduce using rule 95 (expresion_1 -> empty .)
    COL             reduce using rule 95 (expresion_1 -> empty .)


state 185

    (81) asignarray -> LBRACKET . asignarray1 RBRACKET
    (82) asignarray1 -> . cons
    (83) asignarray1 -> . cons COMMA asignarray1
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 216
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    seen_id_cons                   shift and go to state 68
    conslist                       shift and go to state 75
    asignarray1                    shift and go to state 217

state 186

    (78) asignlist -> LCURLY . asignlist1 RCURLY
    (79) asignlist1 -> . cons
    (80) asignlist1 -> . cons COMMA asignlist1
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    asignlist1                     shift and go to state 218
    cons                           shift and go to state 219
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_id_cons                   shift and go to state 68

state 187

    (77) asignacion1 -> asignarray .

    RES_READ        reduce using rule 77 (asignacion1 -> asignarray .)
    RES_PRINT       reduce using rule 77 (asignacion1 -> asignarray .)
    ID              reduce using rule 77 (asignacion1 -> asignarray .)
    RES_DEF         reduce using rule 77 (asignacion1 -> asignarray .)
    RES_IF          reduce using rule 77 (asignacion1 -> asignarray .)
    RES_SWITCH      reduce using rule 77 (asignacion1 -> asignarray .)
    RES_WHILE       reduce using rule 77 (asignacion1 -> asignarray .)
    RES_FOR         reduce using rule 77 (asignacion1 -> asignarray .)
    RES_START       reduce using rule 77 (asignacion1 -> asignarray .)
    RES_FUNC        reduce using rule 77 (asignacion1 -> asignarray .)
    $end            reduce using rule 77 (asignacion1 -> asignarray .)
    RES_END         reduce using rule 77 (asignacion1 -> asignarray .)
    E_END           reduce using rule 77 (asignacion1 -> asignarray .)
    RES_ELSE        reduce using rule 77 (asignacion1 -> asignarray .)
    RES_CASE        reduce using rule 77 (asignacion1 -> asignarray .)


state 188

    (76) asignacion1 -> asignlist .

    RES_READ        reduce using rule 76 (asignacion1 -> asignlist .)
    RES_PRINT       reduce using rule 76 (asignacion1 -> asignlist .)
    ID              reduce using rule 76 (asignacion1 -> asignlist .)
    RES_DEF         reduce using rule 76 (asignacion1 -> asignlist .)
    RES_IF          reduce using rule 76 (asignacion1 -> asignlist .)
    RES_SWITCH      reduce using rule 76 (asignacion1 -> asignlist .)
    RES_WHILE       reduce using rule 76 (asignacion1 -> asignlist .)
    RES_FOR         reduce using rule 76 (asignacion1 -> asignlist .)
    RES_START       reduce using rule 76 (asignacion1 -> asignlist .)
    RES_FUNC        reduce using rule 76 (asignacion1 -> asignlist .)
    $end            reduce using rule 76 (asignacion1 -> asignlist .)
    RES_END         reduce using rule 76 (asignacion1 -> asignlist .)
    E_END           reduce using rule 76 (asignacion1 -> asignlist .)
    RES_ELSE        reduce using rule 76 (asignacion1 -> asignlist .)
    RES_CASE        reduce using rule 76 (asignacion1 -> asignlist .)


state 189

    (75) asignacion1 -> exp .

    RES_READ        reduce using rule 75 (asignacion1 -> exp .)
    RES_PRINT       reduce using rule 75 (asignacion1 -> exp .)
    ID              reduce using rule 75 (asignacion1 -> exp .)
    RES_DEF         reduce using rule 75 (asignacion1 -> exp .)
    RES_IF          reduce using rule 75 (asignacion1 -> exp .)
    RES_SWITCH      reduce using rule 75 (asignacion1 -> exp .)
    RES_WHILE       reduce using rule 75 (asignacion1 -> exp .)
    RES_FOR         reduce using rule 75 (asignacion1 -> exp .)
    RES_START       reduce using rule 75 (asignacion1 -> exp .)
    RES_FUNC        reduce using rule 75 (asignacion1 -> exp .)
    $end            reduce using rule 75 (asignacion1 -> exp .)
    RES_END         reduce using rule 75 (asignacion1 -> exp .)
    E_END           reduce using rule 75 (asignacion1 -> exp .)
    RES_ELSE        reduce using rule 75 (asignacion1 -> exp .)
    RES_CASE        reduce using rule 75 (asignacion1 -> exp .)


state 190

    (70) asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 . insert_asignacion cuadruplo_exp_9_asignacion
    (74) insert_asignacion -> .

    RES_READ        reduce using rule 74 (insert_asignacion -> .)
    RES_PRINT       reduce using rule 74 (insert_asignacion -> .)
    ID              reduce using rule 74 (insert_asignacion -> .)
    RES_DEF         reduce using rule 74 (insert_asignacion -> .)
    RES_IF          reduce using rule 74 (insert_asignacion -> .)
    RES_SWITCH      reduce using rule 74 (insert_asignacion -> .)
    RES_WHILE       reduce using rule 74 (insert_asignacion -> .)
    RES_FOR         reduce using rule 74 (insert_asignacion -> .)
    RES_START       reduce using rule 74 (insert_asignacion -> .)
    RES_FUNC        reduce using rule 74 (insert_asignacion -> .)
    $end            reduce using rule 74 (insert_asignacion -> .)
    RES_END         reduce using rule 74 (insert_asignacion -> .)
    E_END           reduce using rule 74 (insert_asignacion -> .)
    RES_ELSE        reduce using rule 74 (insert_asignacion -> .)
    RES_CASE        reduce using rule 74 (insert_asignacion -> .)

    insert_asignacion              shift and go to state 220

state 191

    (67) escritura -> RES_PRINT LPAREN escritura1 RPAREN .

    RES_READ        reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_PRINT       reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    ID              reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_DEF         reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_IF          reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_SWITCH      reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_WHILE       reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_FOR         reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    E_END           reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_CASE        reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_START       reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_FUNC        reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    $end            reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_END         reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_ELSE        reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)


state 192

    (84) while -> RES_WHILE LPAREN expresion RPAREN . COL bloque

    COL             shift and go to state 221


state 193

    (63) llamada -> ID LPAREN llamada1 RPAREN .

    RES_READ        reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_PRINT       reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    ID              reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_DEF         reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_IF          reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_SWITCH      reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_WHILE       reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_FOR         reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_END         reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_CASE        reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    E_END           reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_START       reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_FUNC        reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    $end            reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_ELSE        reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)


state 194

    (66) lectura -> RES_READ LPAREN tipo RPAREN .

    RES_READ        reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_PRINT       reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    ID              reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_DEF         reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_IF          reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_SWITCH      reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_WHILE       reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_FOR         reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    E_END           reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_START       reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_FUNC        reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    $end            reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_END         reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_ELSE        reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_CASE        reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)


state 195

    (91) switch2 -> RES_CASE expresion . COL bloque switch2

    COL             shift and go to state 222


state 196

    (144) conslist1 -> cons COMMA . conslist1
    (143) conslist1 -> . cons
    (144) conslist1 -> . cons COMMA conslist1
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 162
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    conslist1                      shift and go to state 223
    seen_id_cons                   shift and go to state 68

state 197

    (142) conslist -> ID EQUALS LCURLY conslist1 RCURLY .

    COMMA           reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RBRACKET        reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    TIMES           reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    DIVIDE          reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    PLUS            reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MINUS           reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_READ        reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_PRINT       reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    ID              reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_DEF         reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_IF          reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_SWITCH      reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_WHILE       reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FOR         reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_START       reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FUNC        reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    $end            reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_END         reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    E_END           reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_ELSE        reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_CASE        reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RCURLY          reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MIN             reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MIN_EQ          reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MAY             reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MAY_EQ          reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    DIF             reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    EQ_EQ           reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RPAREN          reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    COL             reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_INT         reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FLOAT       reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_DOUBLE      reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_BOOLEAN     reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_STRING      reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_LIST        reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_ARRAY       reduce using rule 142 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)


state 198

    (141) consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS . cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 224
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_id_cons                   shift and go to state 68

state 199

    (44) array1 -> COL LBRACKET . array2 RBRACKET
    (46) array2 -> . cons
    (47) array2 -> . cons COMMA array2
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 225
    array2                         shift and go to state 226
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_float_cons                shift and go to state 67
    seen_id_cons                   shift and go to state 68

state 200

    (86) forexp -> ID EQUALS cons . COL expresion COL ID EQUALS expresion

    COL             shift and go to state 227


state 201

    (85) for -> RES_FOR LPAREN forexp RPAREN COL . bloque
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (145) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (87) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (90) switch -> . RES_SWITCH COL switch2
    (84) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (85) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (73) seen_id_asignacion -> . ID

    E_END           reduce using rule 145 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 228
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 202

    (118) factor -> LPAREN cuadruplo_exp_6 exp . RPAREN cuadruplo_exp_7

    RPAREN          shift and go to state 229


state 203

    (104) exp -> termino cuadruplo_exp_4 exp1 .

    MIN             reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    MIN_EQ          reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    MAY             reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    MAY_EQ          reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    DIF             reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    EQ_EQ           reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    RPAREN          reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    COL             reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_READ        reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_PRINT       reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    ID              reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_DEF         reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_IF          reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_SWITCH      reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_WHILE       reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_FOR         reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_START       reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_FUNC        reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    $end            reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_END         reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    E_END           reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_ELSE        reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_CASE        reduce using rule 104 (exp -> termino cuadruplo_exp_4 exp1 .)


state 204

    (107) see_operador_e -> PLUS .

    LPAREN          reduce using rule 107 (see_operador_e -> PLUS .)
    PLUS            reduce using rule 107 (see_operador_e -> PLUS .)
    MINUS           reduce using rule 107 (see_operador_e -> PLUS .)
    CTE_DOUBLE      reduce using rule 107 (see_operador_e -> PLUS .)
    CTE_STRING      reduce using rule 107 (see_operador_e -> PLUS .)
    RES_TRUE        reduce using rule 107 (see_operador_e -> PLUS .)
    RES_FALSE       reduce using rule 107 (see_operador_e -> PLUS .)
    ID              reduce using rule 107 (see_operador_e -> PLUS .)
    CTE_INT         reduce using rule 107 (see_operador_e -> PLUS .)
    CTE_FLOAT       reduce using rule 107 (see_operador_e -> PLUS .)


state 205

    (105) exp1 -> see_operador_e . cuadruplos_exp_2 exp
    (109) cuadruplos_exp_2 -> .

    LPAREN          reduce using rule 109 (cuadruplos_exp_2 -> .)
    PLUS            reduce using rule 109 (cuadruplos_exp_2 -> .)
    MINUS           reduce using rule 109 (cuadruplos_exp_2 -> .)
    CTE_DOUBLE      reduce using rule 109 (cuadruplos_exp_2 -> .)
    CTE_STRING      reduce using rule 109 (cuadruplos_exp_2 -> .)
    RES_TRUE        reduce using rule 109 (cuadruplos_exp_2 -> .)
    RES_FALSE       reduce using rule 109 (cuadruplos_exp_2 -> .)
    ID              reduce using rule 109 (cuadruplos_exp_2 -> .)
    CTE_INT         reduce using rule 109 (cuadruplos_exp_2 -> .)
    CTE_FLOAT       reduce using rule 109 (cuadruplos_exp_2 -> .)

    cuadruplos_exp_2               shift and go to state 230

state 206

    (108) see_operador_e -> MINUS .

    LPAREN          reduce using rule 108 (see_operador_e -> MINUS .)
    PLUS            reduce using rule 108 (see_operador_e -> MINUS .)
    MINUS           reduce using rule 108 (see_operador_e -> MINUS .)
    CTE_DOUBLE      reduce using rule 108 (see_operador_e -> MINUS .)
    CTE_STRING      reduce using rule 108 (see_operador_e -> MINUS .)
    RES_TRUE        reduce using rule 108 (see_operador_e -> MINUS .)
    RES_FALSE       reduce using rule 108 (see_operador_e -> MINUS .)
    ID              reduce using rule 108 (see_operador_e -> MINUS .)
    CTE_INT         reduce using rule 108 (see_operador_e -> MINUS .)
    CTE_FLOAT       reduce using rule 108 (see_operador_e -> MINUS .)


state 207

    (106) exp1 -> empty .

    MIN             reduce using rule 106 (exp1 -> empty .)
    MIN_EQ          reduce using rule 106 (exp1 -> empty .)
    MAY             reduce using rule 106 (exp1 -> empty .)
    MAY_EQ          reduce using rule 106 (exp1 -> empty .)
    DIF             reduce using rule 106 (exp1 -> empty .)
    EQ_EQ           reduce using rule 106 (exp1 -> empty .)
    RPAREN          reduce using rule 106 (exp1 -> empty .)
    RES_READ        reduce using rule 106 (exp1 -> empty .)
    RES_PRINT       reduce using rule 106 (exp1 -> empty .)
    ID              reduce using rule 106 (exp1 -> empty .)
    RES_DEF         reduce using rule 106 (exp1 -> empty .)
    RES_IF          reduce using rule 106 (exp1 -> empty .)
    RES_SWITCH      reduce using rule 106 (exp1 -> empty .)
    RES_WHILE       reduce using rule 106 (exp1 -> empty .)
    RES_FOR         reduce using rule 106 (exp1 -> empty .)
    RES_START       reduce using rule 106 (exp1 -> empty .)
    RES_FUNC        reduce using rule 106 (exp1 -> empty .)
    $end            reduce using rule 106 (exp1 -> empty .)
    RES_END         reduce using rule 106 (exp1 -> empty .)
    E_END           reduce using rule 106 (exp1 -> empty .)
    RES_ELSE        reduce using rule 106 (exp1 -> empty .)
    RES_CASE        reduce using rule 106 (exp1 -> empty .)
    COL             reduce using rule 106 (exp1 -> empty .)


state 208

    (114) see_operador_f -> DIVIDE .

    LPAREN          reduce using rule 114 (see_operador_f -> DIVIDE .)
    PLUS            reduce using rule 114 (see_operador_f -> DIVIDE .)
    MINUS           reduce using rule 114 (see_operador_f -> DIVIDE .)
    CTE_DOUBLE      reduce using rule 114 (see_operador_f -> DIVIDE .)
    CTE_STRING      reduce using rule 114 (see_operador_f -> DIVIDE .)
    RES_TRUE        reduce using rule 114 (see_operador_f -> DIVIDE .)
    RES_FALSE       reduce using rule 114 (see_operador_f -> DIVIDE .)
    ID              reduce using rule 114 (see_operador_f -> DIVIDE .)
    CTE_INT         reduce using rule 114 (see_operador_f -> DIVIDE .)
    CTE_FLOAT       reduce using rule 114 (see_operador_f -> DIVIDE .)


state 209

    (110) termino -> factor cuadruplo_exp_5 termino1 .

    PLUS            reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    MINUS           reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    MIN             reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    MIN_EQ          reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    MAY             reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    MAY_EQ          reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    DIF             reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    EQ_EQ           reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    RPAREN          reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_READ        reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_PRINT       reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    ID              reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_DEF         reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_IF          reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_SWITCH      reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_WHILE       reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_FOR         reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_START       reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_FUNC        reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    $end            reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_END         reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    E_END           reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_ELSE        reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_CASE        reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)
    COL             reduce using rule 110 (termino -> factor cuadruplo_exp_5 termino1 .)


state 210

    (111) termino1 -> see_operador_f . cuadruplos_exp_3 termino
    (115) cuadruplos_exp_3 -> .

    LPAREN          reduce using rule 115 (cuadruplos_exp_3 -> .)
    PLUS            reduce using rule 115 (cuadruplos_exp_3 -> .)
    MINUS           reduce using rule 115 (cuadruplos_exp_3 -> .)
    CTE_DOUBLE      reduce using rule 115 (cuadruplos_exp_3 -> .)
    CTE_STRING      reduce using rule 115 (cuadruplos_exp_3 -> .)
    RES_TRUE        reduce using rule 115 (cuadruplos_exp_3 -> .)
    RES_FALSE       reduce using rule 115 (cuadruplos_exp_3 -> .)
    ID              reduce using rule 115 (cuadruplos_exp_3 -> .)
    CTE_INT         reduce using rule 115 (cuadruplos_exp_3 -> .)
    CTE_FLOAT       reduce using rule 115 (cuadruplos_exp_3 -> .)

    cuadruplos_exp_3               shift and go to state 231

state 211

    (113) see_operador_f -> TIMES .

    LPAREN          reduce using rule 113 (see_operador_f -> TIMES .)
    PLUS            reduce using rule 113 (see_operador_f -> TIMES .)
    MINUS           reduce using rule 113 (see_operador_f -> TIMES .)
    CTE_DOUBLE      reduce using rule 113 (see_operador_f -> TIMES .)
    CTE_STRING      reduce using rule 113 (see_operador_f -> TIMES .)
    RES_TRUE        reduce using rule 113 (see_operador_f -> TIMES .)
    RES_FALSE       reduce using rule 113 (see_operador_f -> TIMES .)
    ID              reduce using rule 113 (see_operador_f -> TIMES .)
    CTE_INT         reduce using rule 113 (see_operador_f -> TIMES .)
    CTE_FLOAT       reduce using rule 113 (see_operador_f -> TIMES .)


state 212

    (112) termino1 -> empty .

    PLUS            reduce using rule 112 (termino1 -> empty .)
    MINUS           reduce using rule 112 (termino1 -> empty .)
    MIN             reduce using rule 112 (termino1 -> empty .)
    MIN_EQ          reduce using rule 112 (termino1 -> empty .)
    MAY             reduce using rule 112 (termino1 -> empty .)
    MAY_EQ          reduce using rule 112 (termino1 -> empty .)
    DIF             reduce using rule 112 (termino1 -> empty .)
    EQ_EQ           reduce using rule 112 (termino1 -> empty .)
    RPAREN          reduce using rule 112 (termino1 -> empty .)
    RES_READ        reduce using rule 112 (termino1 -> empty .)
    RES_PRINT       reduce using rule 112 (termino1 -> empty .)
    ID              reduce using rule 112 (termino1 -> empty .)
    RES_DEF         reduce using rule 112 (termino1 -> empty .)
    RES_IF          reduce using rule 112 (termino1 -> empty .)
    RES_SWITCH      reduce using rule 112 (termino1 -> empty .)
    RES_WHILE       reduce using rule 112 (termino1 -> empty .)
    RES_FOR         reduce using rule 112 (termino1 -> empty .)
    RES_START       reduce using rule 112 (termino1 -> empty .)
    RES_FUNC        reduce using rule 112 (termino1 -> empty .)
    $end            reduce using rule 112 (termino1 -> empty .)
    RES_END         reduce using rule 112 (termino1 -> empty .)
    E_END           reduce using rule 112 (termino1 -> empty .)
    RES_ELSE        reduce using rule 112 (termino1 -> empty .)
    RES_CASE        reduce using rule 112 (termino1 -> empty .)
    COL             reduce using rule 112 (termino1 -> empty .)


state 213

    (87) if -> RES_IF LPAREN expresion RPAREN COL . bloque ifelse
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (145) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (87) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (90) switch -> . RES_SWITCH COL switch2
    (84) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (85) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (73) seen_id_asignacion -> . ID

    RES_ELSE        reduce using rule 145 (empty -> .)
    E_END           reduce using rule 145 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 232
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 214

    (94) expresion_1 -> see_rel cuadruplo_exp_8 . exp
    (104) exp -> . termino cuadruplo_exp_4 exp1
    (110) termino -> . factor cuadruplo_exp_5 termino1
    (118) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (119) factor -> . cons
    (120) factor -> . PLUS cons
    (121) factor -> . MINUS cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    seen_float_cons                shift and go to state 67
    seen_id_cons                   shift and go to state 68
    cons                           shift and go to state 141
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    exp                            shift and go to state 233
    factor                         shift and go to state 145
    consarray                      shift and go to state 76

state 215

    (93) expresion -> exp expresion_1 cuadruplo_exp_9 .

    RPAREN          reduce using rule 93 (expresion -> exp expresion_1 cuadruplo_exp_9 .)
    COL             reduce using rule 93 (expresion -> exp expresion_1 cuadruplo_exp_9 .)


state 216

    (82) asignarray1 -> cons .
    (83) asignarray1 -> cons . COMMA asignarray1

    RBRACKET        reduce using rule 82 (asignarray1 -> cons .)
    COMMA           shift and go to state 234


state 217

    (81) asignarray -> LBRACKET asignarray1 . RBRACKET

    RBRACKET        shift and go to state 235


state 218

    (78) asignlist -> LCURLY asignlist1 . RCURLY

    RCURLY          shift and go to state 236


state 219

    (79) asignlist1 -> cons .
    (80) asignlist1 -> cons . COMMA asignlist1

    RCURLY          reduce using rule 79 (asignlist1 -> cons .)
    COMMA           shift and go to state 237


state 220

    (70) asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion . cuadruplo_exp_9_asignacion
    (72) cuadruplo_exp_9_asignacion -> .

    RES_READ        reduce using rule 72 (cuadruplo_exp_9_asignacion -> .)
    RES_PRINT       reduce using rule 72 (cuadruplo_exp_9_asignacion -> .)
    ID              reduce using rule 72 (cuadruplo_exp_9_asignacion -> .)
    RES_DEF         reduce using rule 72 (cuadruplo_exp_9_asignacion -> .)
    RES_IF          reduce using rule 72 (cuadruplo_exp_9_asignacion -> .)
    RES_SWITCH      reduce using rule 72 (cuadruplo_exp_9_asignacion -> .)
    RES_WHILE       reduce using rule 72 (cuadruplo_exp_9_asignacion -> .)
    RES_FOR         reduce using rule 72 (cuadruplo_exp_9_asignacion -> .)
    RES_START       reduce using rule 72 (cuadruplo_exp_9_asignacion -> .)
    RES_FUNC        reduce using rule 72 (cuadruplo_exp_9_asignacion -> .)
    $end            reduce using rule 72 (cuadruplo_exp_9_asignacion -> .)
    RES_END         reduce using rule 72 (cuadruplo_exp_9_asignacion -> .)
    E_END           reduce using rule 72 (cuadruplo_exp_9_asignacion -> .)
    RES_ELSE        reduce using rule 72 (cuadruplo_exp_9_asignacion -> .)
    RES_CASE        reduce using rule 72 (cuadruplo_exp_9_asignacion -> .)

    cuadruplo_exp_9_asignacion     shift and go to state 238

state 221

    (84) while -> RES_WHILE LPAREN expresion RPAREN COL . bloque
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (145) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (87) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (90) switch -> . RES_SWITCH COL switch2
    (84) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (85) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (73) seen_id_asignacion -> . ID

    E_END           reduce using rule 145 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 239
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 222

    (91) switch2 -> RES_CASE expresion COL . bloque switch2
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (145) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (87) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (90) switch -> . RES_SWITCH COL switch2
    (84) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (85) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (73) seen_id_asignacion -> . ID

    RES_CASE        reduce using rule 145 (empty -> .)
    E_END           reduce using rule 145 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 240
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 223

    (144) conslist1 -> cons COMMA conslist1 .

    RCURLY          reduce using rule 144 (conslist1 -> cons COMMA conslist1 .)


state 224

    (141) consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .

    COMMA           reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RCURLY          reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_INT         reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_FLOAT       reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_DOUBLE      reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_BOOLEAN     reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_STRING      reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_LIST        reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_ARRAY       reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_DEF         reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_START       reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_FUNC        reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_READ        reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_PRINT       reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    ID              reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_IF          reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_SWITCH      reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_WHILE       reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_FOR         reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    $end            reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_END         reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    E_END           reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_ELSE        reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_CASE        reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    TIMES           reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    DIVIDE          reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    PLUS            reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MINUS           reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MIN             reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MIN_EQ          reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MAY             reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MAY_EQ          reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    DIF             reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    EQ_EQ           reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RPAREN          reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    COL             reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RBRACKET        reduce using rule 141 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)


state 225

    (46) array2 -> cons .
    (47) array2 -> cons . COMMA array2

    RBRACKET        reduce using rule 46 (array2 -> cons .)
    COMMA           shift and go to state 241


state 226

    (44) array1 -> COL LBRACKET array2 . RBRACKET

    RBRACKET        shift and go to state 242


state 227

    (86) forexp -> ID EQUALS cons COL . expresion COL ID EQUALS expresion
    (93) expresion -> . exp expresion_1 cuadruplo_exp_9
    (104) exp -> . termino cuadruplo_exp_4 exp1
    (110) termino -> . factor cuadruplo_exp_5 termino1
    (118) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (119) factor -> . cons
    (120) factor -> . PLUS cons
    (121) factor -> . MINUS cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    cons                           shift and go to state 141
    termino                        shift and go to state 143
    seen_float_cons                shift and go to state 67
    factor                         shift and go to state 145
    seen_int_cons                  shift and go to state 74
    seen_id_cons                   shift and go to state 68
    expresion                      shift and go to state 243
    conslist                       shift and go to state 75
    consarray                      shift and go to state 76
    exp                            shift and go to state 148

state 228

    (85) for -> RES_FOR LPAREN forexp RPAREN COL bloque .

    E_END           reduce using rule 85 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)


state 229

    (118) factor -> LPAREN cuadruplo_exp_6 exp RPAREN . cuadruplo_exp_7
    (123) cuadruplo_exp_7 -> .

    TIMES           reduce using rule 123 (cuadruplo_exp_7 -> .)
    DIVIDE          reduce using rule 123 (cuadruplo_exp_7 -> .)
    PLUS            reduce using rule 123 (cuadruplo_exp_7 -> .)
    MINUS           reduce using rule 123 (cuadruplo_exp_7 -> .)
    MIN             reduce using rule 123 (cuadruplo_exp_7 -> .)
    MIN_EQ          reduce using rule 123 (cuadruplo_exp_7 -> .)
    MAY             reduce using rule 123 (cuadruplo_exp_7 -> .)
    MAY_EQ          reduce using rule 123 (cuadruplo_exp_7 -> .)
    DIF             reduce using rule 123 (cuadruplo_exp_7 -> .)
    EQ_EQ           reduce using rule 123 (cuadruplo_exp_7 -> .)
    RPAREN          reduce using rule 123 (cuadruplo_exp_7 -> .)
    RES_READ        reduce using rule 123 (cuadruplo_exp_7 -> .)
    RES_PRINT       reduce using rule 123 (cuadruplo_exp_7 -> .)
    ID              reduce using rule 123 (cuadruplo_exp_7 -> .)
    RES_DEF         reduce using rule 123 (cuadruplo_exp_7 -> .)
    RES_IF          reduce using rule 123 (cuadruplo_exp_7 -> .)
    RES_SWITCH      reduce using rule 123 (cuadruplo_exp_7 -> .)
    RES_WHILE       reduce using rule 123 (cuadruplo_exp_7 -> .)
    RES_FOR         reduce using rule 123 (cuadruplo_exp_7 -> .)
    RES_START       reduce using rule 123 (cuadruplo_exp_7 -> .)
    RES_FUNC        reduce using rule 123 (cuadruplo_exp_7 -> .)
    $end            reduce using rule 123 (cuadruplo_exp_7 -> .)
    RES_END         reduce using rule 123 (cuadruplo_exp_7 -> .)
    E_END           reduce using rule 123 (cuadruplo_exp_7 -> .)
    RES_ELSE        reduce using rule 123 (cuadruplo_exp_7 -> .)
    RES_CASE        reduce using rule 123 (cuadruplo_exp_7 -> .)
    COL             reduce using rule 123 (cuadruplo_exp_7 -> .)

    cuadruplo_exp_7                shift and go to state 244

state 230

    (105) exp1 -> see_operador_e cuadruplos_exp_2 . exp
    (104) exp -> . termino cuadruplo_exp_4 exp1
    (110) termino -> . factor cuadruplo_exp_5 termino1
    (118) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (119) factor -> . cons
    (120) factor -> . PLUS cons
    (121) factor -> . MINUS cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    seen_float_cons                shift and go to state 67
    seen_id_cons                   shift and go to state 68
    factor                         shift and go to state 145
    cons                           shift and go to state 141
    termino                        shift and go to state 143
    exp                            shift and go to state 245
    conslist                       shift and go to state 75
    consarray                      shift and go to state 76

state 231

    (111) termino1 -> see_operador_f cuadruplos_exp_3 . termino
    (110) termino -> . factor cuadruplo_exp_5 termino1
    (118) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (119) factor -> . cons
    (120) factor -> . PLUS cons
    (121) factor -> . MINUS cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    seen_float_cons                shift and go to state 67
    conslist                       shift and go to state 75
    termino                        shift and go to state 246
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68
    consarray                      shift and go to state 76

state 232

    (87) if -> RES_IF LPAREN expresion RPAREN COL bloque . ifelse
    (88) ifelse -> . RES_ELSE COL bloque
    (89) ifelse -> . empty
    (145) empty -> .

    RES_ELSE        shift and go to state 247
    E_END           reduce using rule 145 (empty -> .)

    ifelse                         shift and go to state 248
    empty                          shift and go to state 249

state 233

    (94) expresion_1 -> see_rel cuadruplo_exp_8 exp .

    RPAREN          reduce using rule 94 (expresion_1 -> see_rel cuadruplo_exp_8 exp .)
    COL             reduce using rule 94 (expresion_1 -> see_rel cuadruplo_exp_8 exp .)


state 234

    (83) asignarray1 -> cons COMMA . asignarray1
    (82) asignarray1 -> . cons
    (83) asignarray1 -> . cons COMMA asignarray1
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 216
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    seen_id_cons                   shift and go to state 68
    conslist                       shift and go to state 75
    asignarray1                    shift and go to state 250

state 235

    (81) asignarray -> LBRACKET asignarray1 RBRACKET .

    RES_READ        reduce using rule 81 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_PRINT       reduce using rule 81 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    ID              reduce using rule 81 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_DEF         reduce using rule 81 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_IF          reduce using rule 81 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_SWITCH      reduce using rule 81 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_WHILE       reduce using rule 81 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_FOR         reduce using rule 81 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_START       reduce using rule 81 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_FUNC        reduce using rule 81 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    $end            reduce using rule 81 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_END         reduce using rule 81 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    E_END           reduce using rule 81 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_ELSE        reduce using rule 81 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_CASE        reduce using rule 81 (asignarray -> LBRACKET asignarray1 RBRACKET .)


state 236

    (78) asignlist -> LCURLY asignlist1 RCURLY .

    RES_READ        reduce using rule 78 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_PRINT       reduce using rule 78 (asignlist -> LCURLY asignlist1 RCURLY .)
    ID              reduce using rule 78 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_DEF         reduce using rule 78 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_IF          reduce using rule 78 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_SWITCH      reduce using rule 78 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_WHILE       reduce using rule 78 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_FOR         reduce using rule 78 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_START       reduce using rule 78 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_FUNC        reduce using rule 78 (asignlist -> LCURLY asignlist1 RCURLY .)
    $end            reduce using rule 78 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_END         reduce using rule 78 (asignlist -> LCURLY asignlist1 RCURLY .)
    E_END           reduce using rule 78 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_ELSE        reduce using rule 78 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_CASE        reduce using rule 78 (asignlist -> LCURLY asignlist1 RCURLY .)


state 237

    (80) asignlist1 -> cons COMMA . asignlist1
    (79) asignlist1 -> . cons
    (80) asignlist1 -> . cons COMMA asignlist1
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    asignlist1                     shift and go to state 251
    cons                           shift and go to state 219
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_id_cons                   shift and go to state 68

state 238

    (70) asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .

    RES_READ        reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_PRINT       reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    ID              reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_DEF         reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_IF          reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_SWITCH      reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_WHILE       reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_FOR         reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_START       reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_FUNC        reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    $end            reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_END         reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    E_END           reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_ELSE        reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_CASE        reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)


state 239

    (84) while -> RES_WHILE LPAREN expresion RPAREN COL bloque .

    E_END           reduce using rule 84 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)


state 240

    (91) switch2 -> RES_CASE expresion COL bloque . switch2
    (91) switch2 -> . RES_CASE expresion COL bloque switch2
    (92) switch2 -> . empty
    (145) empty -> .

    RES_CASE        shift and go to state 159
    E_END           reduce using rule 145 (empty -> .)

    switch2                        shift and go to state 252
    empty                          shift and go to state 160

state 241

    (47) array2 -> cons COMMA . array2
    (46) array2 -> . cons
    (47) array2 -> . cons COMMA array2
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 225
    array2                         shift and go to state 253
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_float_cons                shift and go to state 67
    seen_id_cons                   shift and go to state 68

state 242

    (44) array1 -> COL LBRACKET array2 RBRACKET .

    RES_INT         reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_FLOAT       reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_DOUBLE      reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_BOOLEAN     reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_STRING      reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_LIST        reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_ARRAY       reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    ID              reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RPAREN          reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)


state 243

    (86) forexp -> ID EQUALS cons COL expresion . COL ID EQUALS expresion

    COL             shift and go to state 254


state 244

    (118) factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .

    TIMES           reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    DIVIDE          reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    PLUS            reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    MINUS           reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_READ        reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_PRINT       reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    ID              reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_DEF         reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_IF          reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_SWITCH      reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_WHILE       reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_FOR         reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_START       reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_FUNC        reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    $end            reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_END         reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    E_END           reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_ELSE        reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_CASE        reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    MIN             reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    MIN_EQ          reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    MAY             reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    MAY_EQ          reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    DIF             reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    EQ_EQ           reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RPAREN          reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    COL             reduce using rule 118 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)


state 245

    (105) exp1 -> see_operador_e cuadruplos_exp_2 exp .

    MIN             reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    MIN_EQ          reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    MAY             reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    MAY_EQ          reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    DIF             reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    EQ_EQ           reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RPAREN          reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_READ        reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_PRINT       reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    ID              reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_DEF         reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_IF          reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_SWITCH      reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_WHILE       reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_FOR         reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_START       reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_FUNC        reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    $end            reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_END         reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    E_END           reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_ELSE        reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_CASE        reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    COL             reduce using rule 105 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)


state 246

    (111) termino1 -> see_operador_f cuadruplos_exp_3 termino .

    PLUS            reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    MINUS           reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    MIN             reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    MIN_EQ          reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    MAY             reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    MAY_EQ          reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    DIF             reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    EQ_EQ           reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RPAREN          reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_READ        reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_PRINT       reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    ID              reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_DEF         reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_IF          reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_SWITCH      reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_WHILE       reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_FOR         reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_START       reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_FUNC        reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    $end            reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_END         reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    E_END           reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_ELSE        reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_CASE        reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    COL             reduce using rule 111 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)


state 247

    (88) ifelse -> RES_ELSE . COL bloque

    COL             shift and go to state 255


state 248

    (87) if -> RES_IF LPAREN expresion RPAREN COL bloque ifelse .

    E_END           reduce using rule 87 (if -> RES_IF LPAREN expresion RPAREN COL bloque ifelse .)


state 249

    (89) ifelse -> empty .

    E_END           reduce using rule 89 (ifelse -> empty .)


state 250

    (83) asignarray1 -> cons COMMA asignarray1 .

    RBRACKET        reduce using rule 83 (asignarray1 -> cons COMMA asignarray1 .)


state 251

    (80) asignlist1 -> cons COMMA asignlist1 .

    RCURLY          reduce using rule 80 (asignlist1 -> cons COMMA asignlist1 .)


state 252

    (91) switch2 -> RES_CASE expresion COL bloque switch2 .

    E_END           reduce using rule 91 (switch2 -> RES_CASE expresion COL bloque switch2 .)


state 253

    (47) array2 -> cons COMMA array2 .

    RBRACKET        reduce using rule 47 (array2 -> cons COMMA array2 .)


state 254

    (86) forexp -> ID EQUALS cons COL expresion COL . ID EQUALS expresion

    ID              shift and go to state 256


state 255

    (88) ifelse -> RES_ELSE COL . bloque
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (145) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (87) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (90) switch -> . RES_SWITCH COL switch2
    (84) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (85) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (73) seen_id_asignacion -> . ID

    E_END           reduce using rule 145 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 257
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 256

    (86) forexp -> ID EQUALS cons COL expresion COL ID . EQUALS expresion

    EQUALS          shift and go to state 258


state 257

    (88) ifelse -> RES_ELSE COL bloque .

    E_END           reduce using rule 88 (ifelse -> RES_ELSE COL bloque .)


state 258

    (86) forexp -> ID EQUALS cons COL expresion COL ID EQUALS . expresion
    (93) expresion -> . exp expresion_1 cuadruplo_exp_9
    (104) exp -> . termino cuadruplo_exp_4 exp1
    (110) termino -> . factor cuadruplo_exp_5 termino1
    (118) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (119) factor -> . cons
    (120) factor -> . PLUS cons
    (121) factor -> . MINUS cons
    (124) cons -> . seen_id_cons exp_1
    (125) cons -> . seen_int_cons exp_cons_int
    (126) cons -> . seen_float_cons exp_cons_float
    (127) cons -> . CTE_DOUBLE
    (128) cons -> . CTE_STRING
    (129) cons -> . RES_TRUE
    (130) cons -> . RES_FALSE
    (131) cons -> . consarray
    (132) cons -> . conslist
    (133) seen_id_cons -> . ID
    (135) seen_int_cons -> . CTE_INT
    (134) seen_float_cons -> . CTE_FLOAT
    (141) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (142) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    cons                           shift and go to state 141
    termino                        shift and go to state 143
    seen_float_cons                shift and go to state 67
    factor                         shift and go to state 145
    seen_int_cons                  shift and go to state 74
    seen_id_cons                   shift and go to state 68
    expresion                      shift and go to state 259
    conslist                       shift and go to state 75
    consarray                      shift and go to state 76
    exp                            shift and go to state 148

state 259

    (86) forexp -> ID EQUALS cons COL expresion COL ID EQUALS expresion .

    RPAREN          reduce using rule 86 (forexp -> ID EQUALS cons COL expresion COL ID EQUALS expresion .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 150 resolved using rule (escritura1 -> CTE_STRING)
WARNING: rejected rule (cons -> CTE_STRING) in state 150
