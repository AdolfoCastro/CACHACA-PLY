Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RES_SET
    TAB
    RES_ELIF
    NEW_LINE
    VAR
    AND
    OR

Grammar

Rule 0     S' -> programa
Rule 1     programa -> programa1 generaglo valida_entra_global programa2 valida_salir_gobal programa3 main programa3
Rule 2     programa -> empty
Rule 3     generaglo -> <empty>
Rule 4     programa1 -> RES_PROTO prototipos seen_prototipo programa1
Rule 5     programa1 -> empty
Rule 6     seen_prototipo -> <empty>
Rule 7     programa2 -> programa2 vars
Rule 8     programa2 -> empty
Rule 9     valida_entra_global -> <empty>
Rule 10    valida_salir_gobal -> <empty>
Rule 11    programa3 -> programa3 modulos
Rule 12    programa3 -> empty
Rule 13    prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN
Rule 14    seen_dato -> <empty>
Rule 15    prototipos_1 -> tipo ID prototipos_2
Rule 16    prototipos_2 -> COMMA prototipos_1
Rule 17    prototipos_2 -> empty
Rule 18    dato -> RES_INT
Rule 19    dato -> RES_FLOAT
Rule 20    dato -> RES_DOUBLE
Rule 21    dato -> RES_BOOLEAN
Rule 22    dato -> RES_STRING
Rule 23    tipo -> dato
Rule 24    tipo -> estructura
Rule 25    estructura -> list
Rule 26    estructura -> array
Rule 27    vars -> RES_DEF COL vars1
Rule 28    vars1 -> estructura vars1
Rule 29    vars1 -> dato ID vars2 vars1_1
Rule 30    vars1_1 -> vars1
Rule 31    vars1_1 -> empty
Rule 32    vars2 -> EQUALS cons
Rule 33    vars2 -> vars3
Rule 34    vars3 -> COMMA ID vars3
Rule 35    vars3 -> empty
Rule 36    list -> RES_LIST dato ID list1
Rule 37    list1 -> LCURLY cons_loop RCURLY
Rule 38    list1 -> empty
Rule 39    cons_loop -> cons cons_loop_1
Rule 40    cons_loop_1 -> COMMA cons_loop
Rule 41    cons_loop_1 -> empty
Rule 42    array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1
Rule 43    array1 -> COL LBRACKET array2 RBRACKET
Rule 44    array1 -> empty
Rule 45    array2 -> cons
Rule 46    array2 -> cons COMMA array2
Rule 47    modulos -> prototipos se_uso COL bloque
Rule 48    se_uso -> <empty>
Rule 49    bloque -> estatutos bloque
Rule 50    bloque -> empty
Rule 51    estatutos -> condicion E_END
Rule 52    estatutos -> ciclo E_END
Rule 53    estatutos -> lectura
Rule 54    estatutos -> escritura
Rule 55    estatutos -> asignacion
Rule 56    estatutos -> llamada
Rule 57    estatutos -> vars
Rule 58    ciclo -> while
Rule 59    ciclo -> for
Rule 60    condicion -> if
Rule 61    condicion -> switch
Rule 62    llamada -> ID LPAREN llamada1 RPAREN
Rule 63    llamada1 -> expresion
Rule 64    llamada1 -> empty
Rule 65    lectura -> RES_READ LPAREN tipo RPAREN
Rule 66    escritura -> RES_PRINT LPAREN escritura1 RPAREN
Rule 67    escritura1 -> expresion
Rule 68    escritura1 -> CTE_STRING
Rule 69    asignacion -> ID seen_id_asignacion
Rule 70    seen_id_asignacion -> EQUALS asignacion1
Rule 71    asignacion1 -> exp
Rule 72    asignacion1 -> asignlist
Rule 73    asignacion1 -> asignarray
Rule 74    asignlist -> LCURLY asignlist1 RCURLY
Rule 75    asignlist1 -> cons
Rule 76    asignlist1 -> cons COMMA asignlist1
Rule 77    asignarray -> LBRACKET asignarray1 RBRACKET
Rule 78    asignarray1 -> cons
Rule 79    asignarray1 -> cons COMMA asignarray1
Rule 80    while -> RES_WHILE LPAREN expresion RPAREN COL bloque
Rule 81    for -> RES_FOR LPAREN forexp RPAREN COL bloque
Rule 82    forexp -> ID EQUALS cons COL expresion COL ID EQUALS expresion
Rule 83    if -> RES_IF LPAREN expresion RPAREN COL bloque ifelse
Rule 84    ifelse -> RES_ELSE COL bloque
Rule 85    ifelse -> empty
Rule 86    switch -> RES_SWITCH COL switch2
Rule 87    switch2 -> RES_CASE expresion COL bloque switch2
Rule 88    switch2 -> empty
Rule 89    expresion -> exp expresion_1
Rule 90    expresion_1 -> MIN exp
Rule 91    expresion_1 -> MIN_EQ exp
Rule 92    expresion_1 -> MAY exp
Rule 93    expresion_1 -> MAY_EQ exp
Rule 94    expresion_1 -> DIF exp
Rule 95    expresion_1 -> EQ_EQ exp
Rule 96    expresion_1 -> empty
Rule 97    exp -> termino exp1
Rule 98    exp1 -> PLUS exp
Rule 99    exp1 -> MINUS exp
Rule 100   exp1 -> empty
Rule 101   termino -> factor termino1
Rule 102   termino1 -> TIMES termino
Rule 103   termino1 -> DIVIDE termino
Rule 104   termino1 -> empty
Rule 105   factor -> LPAREN expresion RPAREN
Rule 106   factor -> cons
Rule 107   factor -> PLUS cons
Rule 108   factor -> MINUS cons
Rule 109   cons -> ID exp_1
Rule 110   cons -> CTE_INT exp_2
Rule 111   cons -> CTE_FLOAT exp_3
Rule 112   cons -> CTE_DOUBLE
Rule 113   cons -> CTE_STRING
Rule 114   cons -> RES_TRUE
Rule 115   cons -> RES_FALSE
Rule 116   cons -> consarray
Rule 117   cons -> conslist
Rule 118   exp_1 -> <empty>
Rule 119   exp_2 -> <empty>
Rule 120   exp_3 -> <empty>
Rule 121   main -> RES_START comienza_main COL bloque RES_END
Rule 122   comienza_main -> <empty>
Rule 123   consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons
Rule 124   conslist -> ID EQUALS LCURLY conslist1 RCURLY
Rule 125   conslist1 -> cons
Rule 126   conslist1 -> cons COMMA conslist1
Rule 127   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
COL                  : 27 43 47 80 81 82 82 83 84 86 87 121
COMMA                : 16 34 40 46 76 79 126
CTE_DOUBLE           : 112
CTE_FLOAT            : 111
CTE_INT              : 42 110 123
CTE_STRING           : 68 113
DIF                  : 94
DIVIDE               : 103
EQUALS               : 32 70 82 82 123 124
EQ_EQ                : 95
E_END                : 51 52
ID                   : 13 15 29 34 36 42 62 69 82 82 109 123 124
LBRACKET             : 42 43 77 123
LCURLY               : 37 74 124
LPAREN               : 13 62 65 66 80 81 83 105
MAY                  : 92
MAY_EQ               : 93
MIN                  : 90
MINUS                : 99 108
MIN_EQ               : 91
NEW_LINE             : 
OR                   : 
PLUS                 : 98 107
RBRACKET             : 42 43 77 123
RCURLY               : 37 74 124
RES_ARRAY            : 42
RES_BOOLEAN          : 21
RES_CASE             : 87
RES_DEF              : 27
RES_DOUBLE           : 20
RES_ELIF             : 
RES_ELSE             : 84
RES_END              : 121
RES_FALSE            : 115
RES_FLOAT            : 19
RES_FOR              : 81
RES_FUNC             : 13
RES_IF               : 83
RES_INT              : 18
RES_LIST             : 36
RES_PRINT            : 66
RES_PROTO            : 4
RES_READ             : 65
RES_SET              : 
RES_START            : 121
RES_STRING           : 22
RES_SWITCH           : 86
RES_TRUE             : 114
RES_WHILE            : 80
RPAREN               : 13 62 65 66 80 81 83 105
TAB                  : 
TIMES                : 102
VAR                  : 
error                : 

Nonterminals, with rules where they appear

array                : 26
array1               : 42
array2               : 43 46
asignacion           : 55
asignacion1          : 70
asignarray           : 73
asignarray1          : 77 79
asignlist            : 72
asignlist1           : 74 76
bloque               : 47 49 80 81 83 84 87 121
ciclo                : 52
comienza_main        : 121
condicion            : 51
cons                 : 32 39 45 46 75 76 78 79 82 106 107 108 123 125 126
cons_loop            : 37 40
cons_loop_1          : 39
consarray            : 116
conslist             : 117
conslist1            : 124 126
dato                 : 13 23 29 36 42
empty                : 2 5 8 12 17 31 35 38 41 44 50 64 85 88 96 100 104
escritura            : 54
escritura1           : 66
estatutos            : 49
estructura           : 24 28
exp                  : 71 89 90 91 92 93 94 95 98 99
exp1                 : 97
exp_1                : 109
exp_2                : 110
exp_3                : 111
expresion            : 63 67 80 82 82 83 87 105
expresion_1          : 89
factor               : 101
for                  : 59
forexp               : 81
generaglo            : 1
if                   : 60
ifelse               : 83
lectura              : 53
list                 : 25
list1                : 36
llamada              : 56
llamada1             : 62
main                 : 1
modulos              : 11
programa             : 0
programa1            : 1 4
programa2            : 1 7
programa3            : 1 1 11
prototipos           : 4 47
prototipos_1         : 13 16
prototipos_2         : 15
se_uso               : 47
seen_dato            : 13
seen_id_asignacion   : 69
seen_prototipo       : 4
switch               : 61
switch2              : 86 87
termino              : 97 102 103
termino1             : 101
tipo                 : 15 65
valida_entra_global  : 1
valida_salir_gobal   : 1
vars                 : 7 57
vars1                : 27 28 30
vars1_1              : 29
vars2                : 29
vars3                : 33 34
while                : 58

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . programa1 generaglo valida_entra_global programa2 valida_salir_gobal programa3 main programa3
    (2) programa -> . empty
    (4) programa1 -> . RES_PROTO prototipos seen_prototipo programa1
    (5) programa1 -> . empty
    (127) empty -> .

    RES_PROTO       shift and go to state 3
    $end            reduce using rule 127 (empty -> .)
    RES_DEF         reduce using rule 127 (empty -> .)
    RES_START       reduce using rule 127 (empty -> .)
    RES_FUNC        reduce using rule 127 (empty -> .)

    programa1                      shift and go to state 1
    programa                       shift and go to state 2
    empty                          shift and go to state 4

state 1

    (1) programa -> programa1 . generaglo valida_entra_global programa2 valida_salir_gobal programa3 main programa3
    (3) generaglo -> .

    RES_DEF         reduce using rule 3 (generaglo -> .)
    RES_START       reduce using rule 3 (generaglo -> .)
    RES_FUNC        reduce using rule 3 (generaglo -> .)

    generaglo                      shift and go to state 5

state 2

    (0) S' -> programa .



state 3

    (4) programa1 -> RES_PROTO . prototipos seen_prototipo programa1
    (13) prototipos -> . RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN

    RES_FUNC        shift and go to state 7

    prototipos                     shift and go to state 6

state 4

    (2) programa -> empty .
    (5) programa1 -> empty .

    $end            reduce using rule 2 (programa -> empty .)
    RES_DEF         reduce using rule 5 (programa1 -> empty .)
    RES_START       reduce using rule 5 (programa1 -> empty .)
    RES_FUNC        reduce using rule 5 (programa1 -> empty .)


state 5

    (1) programa -> programa1 generaglo . valida_entra_global programa2 valida_salir_gobal programa3 main programa3
    (9) valida_entra_global -> .

    RES_DEF         reduce using rule 9 (valida_entra_global -> .)
    RES_START       reduce using rule 9 (valida_entra_global -> .)
    RES_FUNC        reduce using rule 9 (valida_entra_global -> .)

    valida_entra_global            shift and go to state 8

state 6

    (4) programa1 -> RES_PROTO prototipos . seen_prototipo programa1
    (6) seen_prototipo -> .

    RES_PROTO       reduce using rule 6 (seen_prototipo -> .)
    RES_DEF         reduce using rule 6 (seen_prototipo -> .)
    RES_START       reduce using rule 6 (seen_prototipo -> .)
    RES_FUNC        reduce using rule 6 (seen_prototipo -> .)

    seen_prototipo                 shift and go to state 9

state 7

    (13) prototipos -> RES_FUNC . dato seen_dato ID LPAREN prototipos_1 RPAREN
    (18) dato -> . RES_INT
    (19) dato -> . RES_FLOAT
    (20) dato -> . RES_DOUBLE
    (21) dato -> . RES_BOOLEAN
    (22) dato -> . RES_STRING

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12

    dato                           shift and go to state 14

state 8

    (1) programa -> programa1 generaglo valida_entra_global . programa2 valida_salir_gobal programa3 main programa3
    (7) programa2 -> . programa2 vars
    (8) programa2 -> . empty
    (127) empty -> .

    RES_DEF         reduce using rule 127 (empty -> .)
    RES_START       reduce using rule 127 (empty -> .)
    RES_FUNC        reduce using rule 127 (empty -> .)

    programa2                      shift and go to state 16
    empty                          shift and go to state 17

state 9

    (4) programa1 -> RES_PROTO prototipos seen_prototipo . programa1
    (4) programa1 -> . RES_PROTO prototipos seen_prototipo programa1
    (5) programa1 -> . empty
    (127) empty -> .

    RES_PROTO       shift and go to state 3
    RES_DEF         reduce using rule 127 (empty -> .)
    RES_START       reduce using rule 127 (empty -> .)
    RES_FUNC        reduce using rule 127 (empty -> .)

    empty                          shift and go to state 18
    programa1                      shift and go to state 19

state 10

    (21) dato -> RES_BOOLEAN .

    ID              reduce using rule 21 (dato -> RES_BOOLEAN .)
    RPAREN          reduce using rule 21 (dato -> RES_BOOLEAN .)


state 11

    (18) dato -> RES_INT .

    ID              reduce using rule 18 (dato -> RES_INT .)
    RPAREN          reduce using rule 18 (dato -> RES_INT .)


state 12

    (22) dato -> RES_STRING .

    ID              reduce using rule 22 (dato -> RES_STRING .)
    RPAREN          reduce using rule 22 (dato -> RES_STRING .)


state 13

    (20) dato -> RES_DOUBLE .

    ID              reduce using rule 20 (dato -> RES_DOUBLE .)
    RPAREN          reduce using rule 20 (dato -> RES_DOUBLE .)


state 14

    (13) prototipos -> RES_FUNC dato . seen_dato ID LPAREN prototipos_1 RPAREN
    (14) seen_dato -> .

    ID              reduce using rule 14 (seen_dato -> .)

    seen_dato                      shift and go to state 20

state 15

    (19) dato -> RES_FLOAT .

    ID              reduce using rule 19 (dato -> RES_FLOAT .)
    RPAREN          reduce using rule 19 (dato -> RES_FLOAT .)


state 16

    (1) programa -> programa1 generaglo valida_entra_global programa2 . valida_salir_gobal programa3 main programa3
    (7) programa2 -> programa2 . vars
    (10) valida_salir_gobal -> .
    (27) vars -> . RES_DEF COL vars1

    RES_START       reduce using rule 10 (valida_salir_gobal -> .)
    RES_FUNC        reduce using rule 10 (valida_salir_gobal -> .)
    RES_DEF         shift and go to state 22

    vars                           shift and go to state 21
    valida_salir_gobal             shift and go to state 23

state 17

    (8) programa2 -> empty .

    RES_DEF         reduce using rule 8 (programa2 -> empty .)
    RES_START       reduce using rule 8 (programa2 -> empty .)
    RES_FUNC        reduce using rule 8 (programa2 -> empty .)


state 18

    (5) programa1 -> empty .

    RES_DEF         reduce using rule 5 (programa1 -> empty .)
    RES_START       reduce using rule 5 (programa1 -> empty .)
    RES_FUNC        reduce using rule 5 (programa1 -> empty .)


state 19

    (4) programa1 -> RES_PROTO prototipos seen_prototipo programa1 .

    RES_DEF         reduce using rule 4 (programa1 -> RES_PROTO prototipos seen_prototipo programa1 .)
    RES_START       reduce using rule 4 (programa1 -> RES_PROTO prototipos seen_prototipo programa1 .)
    RES_FUNC        reduce using rule 4 (programa1 -> RES_PROTO prototipos seen_prototipo programa1 .)


state 20

    (13) prototipos -> RES_FUNC dato seen_dato . ID LPAREN prototipos_1 RPAREN

    ID              shift and go to state 24


state 21

    (7) programa2 -> programa2 vars .

    RES_DEF         reduce using rule 7 (programa2 -> programa2 vars .)
    RES_START       reduce using rule 7 (programa2 -> programa2 vars .)
    RES_FUNC        reduce using rule 7 (programa2 -> programa2 vars .)


state 22

    (27) vars -> RES_DEF . COL vars1

    COL             shift and go to state 25


state 23

    (1) programa -> programa1 generaglo valida_entra_global programa2 valida_salir_gobal . programa3 main programa3
    (11) programa3 -> . programa3 modulos
    (12) programa3 -> . empty
    (127) empty -> .

    RES_START       reduce using rule 127 (empty -> .)
    RES_FUNC        reduce using rule 127 (empty -> .)

    programa3                      shift and go to state 26
    empty                          shift and go to state 27

state 24

    (13) prototipos -> RES_FUNC dato seen_dato ID . LPAREN prototipos_1 RPAREN

    LPAREN          shift and go to state 28


state 25

    (27) vars -> RES_DEF COL . vars1
    (28) vars1 -> . estructura vars1
    (29) vars1 -> . dato ID vars2 vars1_1
    (25) estructura -> . list
    (26) estructura -> . array
    (18) dato -> . RES_INT
    (19) dato -> . RES_FLOAT
    (20) dato -> . RES_DOUBLE
    (21) dato -> . RES_BOOLEAN
    (22) dato -> . RES_STRING
    (36) list -> . RES_LIST dato ID list1
    (42) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    estructura                     shift and go to state 31
    list                           shift and go to state 34
    vars1                          shift and go to state 30
    dato                           shift and go to state 33
    array                          shift and go to state 29

state 26

    (1) programa -> programa1 generaglo valida_entra_global programa2 valida_salir_gobal programa3 . main programa3
    (11) programa3 -> programa3 . modulos
    (121) main -> . RES_START comienza_main COL bloque RES_END
    (47) modulos -> . prototipos se_uso COL bloque
    (13) prototipos -> . RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN

    RES_START       shift and go to state 37
    RES_FUNC        shift and go to state 7

    prototipos                     shift and go to state 36
    modulos                        shift and go to state 39
    main                           shift and go to state 38

state 27

    (12) programa3 -> empty .

    RES_START       reduce using rule 12 (programa3 -> empty .)
    RES_FUNC        reduce using rule 12 (programa3 -> empty .)
    $end            reduce using rule 12 (programa3 -> empty .)


state 28

    (13) prototipos -> RES_FUNC dato seen_dato ID LPAREN . prototipos_1 RPAREN
    (15) prototipos_1 -> . tipo ID prototipos_2
    (23) tipo -> . dato
    (24) tipo -> . estructura
    (18) dato -> . RES_INT
    (19) dato -> . RES_FLOAT
    (20) dato -> . RES_DOUBLE
    (21) dato -> . RES_BOOLEAN
    (22) dato -> . RES_STRING
    (25) estructura -> . list
    (26) estructura -> . array
    (36) list -> . RES_LIST dato ID list1
    (42) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    tipo                           shift and go to state 41
    prototipos_1                   shift and go to state 40
    list                           shift and go to state 34
    estructura                     shift and go to state 42
    dato                           shift and go to state 43
    array                          shift and go to state 29

state 29

    (26) estructura -> array .

    ID              reduce using rule 26 (estructura -> array .)
    RES_INT         reduce using rule 26 (estructura -> array .)
    RES_FLOAT       reduce using rule 26 (estructura -> array .)
    RES_DOUBLE      reduce using rule 26 (estructura -> array .)
    RES_BOOLEAN     reduce using rule 26 (estructura -> array .)
    RES_STRING      reduce using rule 26 (estructura -> array .)
    RES_LIST        reduce using rule 26 (estructura -> array .)
    RES_ARRAY       reduce using rule 26 (estructura -> array .)
    RPAREN          reduce using rule 26 (estructura -> array .)


state 30

    (27) vars -> RES_DEF COL vars1 .

    RES_READ        reduce using rule 27 (vars -> RES_DEF COL vars1 .)
    RES_PRINT       reduce using rule 27 (vars -> RES_DEF COL vars1 .)
    ID              reduce using rule 27 (vars -> RES_DEF COL vars1 .)
    RES_DEF         reduce using rule 27 (vars -> RES_DEF COL vars1 .)
    RES_IF          reduce using rule 27 (vars -> RES_DEF COL vars1 .)
    RES_SWITCH      reduce using rule 27 (vars -> RES_DEF COL vars1 .)
    RES_WHILE       reduce using rule 27 (vars -> RES_DEF COL vars1 .)
    RES_FOR         reduce using rule 27 (vars -> RES_DEF COL vars1 .)
    RES_ELSE        reduce using rule 27 (vars -> RES_DEF COL vars1 .)
    E_END           reduce using rule 27 (vars -> RES_DEF COL vars1 .)
    RES_END         reduce using rule 27 (vars -> RES_DEF COL vars1 .)
    RES_START       reduce using rule 27 (vars -> RES_DEF COL vars1 .)
    RES_FUNC        reduce using rule 27 (vars -> RES_DEF COL vars1 .)
    $end            reduce using rule 27 (vars -> RES_DEF COL vars1 .)
    RES_CASE        reduce using rule 27 (vars -> RES_DEF COL vars1 .)


state 31

    (28) vars1 -> estructura . vars1
    (28) vars1 -> . estructura vars1
    (29) vars1 -> . dato ID vars2 vars1_1
    (25) estructura -> . list
    (26) estructura -> . array
    (18) dato -> . RES_INT
    (19) dato -> . RES_FLOAT
    (20) dato -> . RES_DOUBLE
    (21) dato -> . RES_BOOLEAN
    (22) dato -> . RES_STRING
    (36) list -> . RES_LIST dato ID list1
    (42) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    list                           shift and go to state 34
    estructura                     shift and go to state 31
    dato                           shift and go to state 33
    vars1                          shift and go to state 44
    array                          shift and go to state 29

state 32

    (36) list -> RES_LIST . dato ID list1
    (18) dato -> . RES_INT
    (19) dato -> . RES_FLOAT
    (20) dato -> . RES_DOUBLE
    (21) dato -> . RES_BOOLEAN
    (22) dato -> . RES_STRING

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12

    dato                           shift and go to state 45

state 33

    (29) vars1 -> dato . ID vars2 vars1_1

    ID              shift and go to state 46


state 34

    (25) estructura -> list .

    ID              reduce using rule 25 (estructura -> list .)
    RES_INT         reduce using rule 25 (estructura -> list .)
    RES_FLOAT       reduce using rule 25 (estructura -> list .)
    RES_DOUBLE      reduce using rule 25 (estructura -> list .)
    RES_BOOLEAN     reduce using rule 25 (estructura -> list .)
    RES_STRING      reduce using rule 25 (estructura -> list .)
    RES_LIST        reduce using rule 25 (estructura -> list .)
    RES_ARRAY       reduce using rule 25 (estructura -> list .)
    RPAREN          reduce using rule 25 (estructura -> list .)


state 35

    (42) array -> RES_ARRAY . dato ID LBRACKET CTE_INT RBRACKET array1
    (18) dato -> . RES_INT
    (19) dato -> . RES_FLOAT
    (20) dato -> . RES_DOUBLE
    (21) dato -> . RES_BOOLEAN
    (22) dato -> . RES_STRING

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12

    dato                           shift and go to state 47

state 36

    (47) modulos -> prototipos . se_uso COL bloque
    (48) se_uso -> .

    COL             reduce using rule 48 (se_uso -> .)

    se_uso                         shift and go to state 48

state 37

    (121) main -> RES_START . comienza_main COL bloque RES_END
    (122) comienza_main -> .

    COL             reduce using rule 122 (comienza_main -> .)

    comienza_main                  shift and go to state 49

state 38

    (1) programa -> programa1 generaglo valida_entra_global programa2 valida_salir_gobal programa3 main . programa3
    (11) programa3 -> . programa3 modulos
    (12) programa3 -> . empty
    (127) empty -> .

    RES_FUNC        reduce using rule 127 (empty -> .)
    $end            reduce using rule 127 (empty -> .)

    programa3                      shift and go to state 50
    empty                          shift and go to state 27

state 39

    (11) programa3 -> programa3 modulos .

    RES_START       reduce using rule 11 (programa3 -> programa3 modulos .)
    RES_FUNC        reduce using rule 11 (programa3 -> programa3 modulos .)
    $end            reduce using rule 11 (programa3 -> programa3 modulos .)


state 40

    (13) prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 . RPAREN

    RPAREN          shift and go to state 51


state 41

    (15) prototipos_1 -> tipo . ID prototipos_2

    ID              shift and go to state 52


state 42

    (24) tipo -> estructura .

    RPAREN          reduce using rule 24 (tipo -> estructura .)
    ID              reduce using rule 24 (tipo -> estructura .)


state 43

    (23) tipo -> dato .

    RPAREN          reduce using rule 23 (tipo -> dato .)
    ID              reduce using rule 23 (tipo -> dato .)


state 44

    (28) vars1 -> estructura vars1 .

    RES_DEF         reduce using rule 28 (vars1 -> estructura vars1 .)
    RES_START       reduce using rule 28 (vars1 -> estructura vars1 .)
    RES_FUNC        reduce using rule 28 (vars1 -> estructura vars1 .)
    RES_READ        reduce using rule 28 (vars1 -> estructura vars1 .)
    RES_PRINT       reduce using rule 28 (vars1 -> estructura vars1 .)
    ID              reduce using rule 28 (vars1 -> estructura vars1 .)
    RES_IF          reduce using rule 28 (vars1 -> estructura vars1 .)
    RES_SWITCH      reduce using rule 28 (vars1 -> estructura vars1 .)
    RES_WHILE       reduce using rule 28 (vars1 -> estructura vars1 .)
    RES_FOR         reduce using rule 28 (vars1 -> estructura vars1 .)
    $end            reduce using rule 28 (vars1 -> estructura vars1 .)
    RES_END         reduce using rule 28 (vars1 -> estructura vars1 .)
    E_END           reduce using rule 28 (vars1 -> estructura vars1 .)
    RES_ELSE        reduce using rule 28 (vars1 -> estructura vars1 .)
    RES_CASE        reduce using rule 28 (vars1 -> estructura vars1 .)


state 45

    (36) list -> RES_LIST dato . ID list1

    ID              shift and go to state 53


state 46

    (29) vars1 -> dato ID . vars2 vars1_1
    (32) vars2 -> . EQUALS cons
    (33) vars2 -> . vars3
    (34) vars3 -> . COMMA ID vars3
    (35) vars3 -> . empty
    (127) empty -> .

    EQUALS          shift and go to state 54
    COMMA           shift and go to state 57
    RES_INT         reduce using rule 127 (empty -> .)
    RES_FLOAT       reduce using rule 127 (empty -> .)
    RES_DOUBLE      reduce using rule 127 (empty -> .)
    RES_BOOLEAN     reduce using rule 127 (empty -> .)
    RES_STRING      reduce using rule 127 (empty -> .)
    RES_LIST        reduce using rule 127 (empty -> .)
    RES_ARRAY       reduce using rule 127 (empty -> .)
    RES_DEF         reduce using rule 127 (empty -> .)
    RES_START       reduce using rule 127 (empty -> .)
    RES_FUNC        reduce using rule 127 (empty -> .)
    RES_READ        reduce using rule 127 (empty -> .)
    RES_PRINT       reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RES_IF          reduce using rule 127 (empty -> .)
    RES_SWITCH      reduce using rule 127 (empty -> .)
    RES_WHILE       reduce using rule 127 (empty -> .)
    RES_FOR         reduce using rule 127 (empty -> .)
    $end            reduce using rule 127 (empty -> .)
    RES_END         reduce using rule 127 (empty -> .)
    E_END           reduce using rule 127 (empty -> .)
    RES_ELSE        reduce using rule 127 (empty -> .)
    RES_CASE        reduce using rule 127 (empty -> .)

    vars3                          shift and go to state 55
    vars2                          shift and go to state 56
    empty                          shift and go to state 58

state 47

    (42) array -> RES_ARRAY dato . ID LBRACKET CTE_INT RBRACKET array1

    ID              shift and go to state 59


state 48

    (47) modulos -> prototipos se_uso . COL bloque

    COL             shift and go to state 60


state 49

    (121) main -> RES_START comienza_main . COL bloque RES_END

    COL             shift and go to state 61


state 50

    (1) programa -> programa1 generaglo valida_entra_global programa2 valida_salir_gobal programa3 main programa3 .
    (11) programa3 -> programa3 . modulos
    (47) modulos -> . prototipos se_uso COL bloque
    (13) prototipos -> . RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN

    $end            reduce using rule 1 (programa -> programa1 generaglo valida_entra_global programa2 valida_salir_gobal programa3 main programa3 .)
    RES_FUNC        shift and go to state 7

    prototipos                     shift and go to state 36
    modulos                        shift and go to state 39

state 51

    (13) prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .

    COL             reduce using rule 13 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_PROTO       reduce using rule 13 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_DEF         reduce using rule 13 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_START       reduce using rule 13 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_FUNC        reduce using rule 13 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)


state 52

    (15) prototipos_1 -> tipo ID . prototipos_2
    (16) prototipos_2 -> . COMMA prototipos_1
    (17) prototipos_2 -> . empty
    (127) empty -> .

    COMMA           shift and go to state 63
    RPAREN          reduce using rule 127 (empty -> .)

    prototipos_2                   shift and go to state 62
    empty                          shift and go to state 64

state 53

    (36) list -> RES_LIST dato ID . list1
    (37) list1 -> . LCURLY cons_loop RCURLY
    (38) list1 -> . empty
    (127) empty -> .

    LCURLY          shift and go to state 66
    RES_INT         reduce using rule 127 (empty -> .)
    RES_FLOAT       reduce using rule 127 (empty -> .)
    RES_DOUBLE      reduce using rule 127 (empty -> .)
    RES_BOOLEAN     reduce using rule 127 (empty -> .)
    RES_STRING      reduce using rule 127 (empty -> .)
    RES_LIST        reduce using rule 127 (empty -> .)
    RES_ARRAY       reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)

    list1                          shift and go to state 65
    empty                          shift and go to state 67

state 54

    (32) vars2 -> EQUALS . cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    conslist                       shift and go to state 74
    consarray                      shift and go to state 71
    cons                           shift and go to state 69

state 55

    (33) vars2 -> vars3 .

    RES_INT         reduce using rule 33 (vars2 -> vars3 .)
    RES_FLOAT       reduce using rule 33 (vars2 -> vars3 .)
    RES_DOUBLE      reduce using rule 33 (vars2 -> vars3 .)
    RES_BOOLEAN     reduce using rule 33 (vars2 -> vars3 .)
    RES_STRING      reduce using rule 33 (vars2 -> vars3 .)
    RES_LIST        reduce using rule 33 (vars2 -> vars3 .)
    RES_ARRAY       reduce using rule 33 (vars2 -> vars3 .)
    RES_DEF         reduce using rule 33 (vars2 -> vars3 .)
    RES_START       reduce using rule 33 (vars2 -> vars3 .)
    RES_FUNC        reduce using rule 33 (vars2 -> vars3 .)
    RES_READ        reduce using rule 33 (vars2 -> vars3 .)
    RES_PRINT       reduce using rule 33 (vars2 -> vars3 .)
    ID              reduce using rule 33 (vars2 -> vars3 .)
    RES_IF          reduce using rule 33 (vars2 -> vars3 .)
    RES_SWITCH      reduce using rule 33 (vars2 -> vars3 .)
    RES_WHILE       reduce using rule 33 (vars2 -> vars3 .)
    RES_FOR         reduce using rule 33 (vars2 -> vars3 .)
    $end            reduce using rule 33 (vars2 -> vars3 .)
    RES_END         reduce using rule 33 (vars2 -> vars3 .)
    E_END           reduce using rule 33 (vars2 -> vars3 .)
    RES_ELSE        reduce using rule 33 (vars2 -> vars3 .)
    RES_CASE        reduce using rule 33 (vars2 -> vars3 .)


state 56

    (29) vars1 -> dato ID vars2 . vars1_1
    (30) vars1_1 -> . vars1
    (31) vars1_1 -> . empty
    (28) vars1 -> . estructura vars1
    (29) vars1 -> . dato ID vars2 vars1_1
    (127) empty -> .
    (25) estructura -> . list
    (26) estructura -> . array
    (18) dato -> . RES_INT
    (19) dato -> . RES_FLOAT
    (20) dato -> . RES_DOUBLE
    (21) dato -> . RES_BOOLEAN
    (22) dato -> . RES_STRING
    (36) list -> . RES_LIST dato ID list1
    (42) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_DEF         reduce using rule 127 (empty -> .)
    RES_START       reduce using rule 127 (empty -> .)
    RES_FUNC        reduce using rule 127 (empty -> .)
    RES_READ        reduce using rule 127 (empty -> .)
    RES_PRINT       reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RES_IF          reduce using rule 127 (empty -> .)
    RES_SWITCH      reduce using rule 127 (empty -> .)
    RES_WHILE       reduce using rule 127 (empty -> .)
    RES_FOR         reduce using rule 127 (empty -> .)
    $end            reduce using rule 127 (empty -> .)
    RES_END         reduce using rule 127 (empty -> .)
    E_END           reduce using rule 127 (empty -> .)
    RES_ELSE        reduce using rule 127 (empty -> .)
    RES_CASE        reduce using rule 127 (empty -> .)
    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    list                           shift and go to state 34
    estructura                     shift and go to state 31
    dato                           shift and go to state 33
    vars1                          shift and go to state 78
    vars1_1                        shift and go to state 79
    array                          shift and go to state 29
    empty                          shift and go to state 80

state 57

    (34) vars3 -> COMMA . ID vars3

    ID              shift and go to state 81


state 58

    (35) vars3 -> empty .

    RES_INT         reduce using rule 35 (vars3 -> empty .)
    RES_FLOAT       reduce using rule 35 (vars3 -> empty .)
    RES_DOUBLE      reduce using rule 35 (vars3 -> empty .)
    RES_BOOLEAN     reduce using rule 35 (vars3 -> empty .)
    RES_STRING      reduce using rule 35 (vars3 -> empty .)
    RES_LIST        reduce using rule 35 (vars3 -> empty .)
    RES_ARRAY       reduce using rule 35 (vars3 -> empty .)
    RES_DEF         reduce using rule 35 (vars3 -> empty .)
    RES_START       reduce using rule 35 (vars3 -> empty .)
    RES_FUNC        reduce using rule 35 (vars3 -> empty .)
    RES_READ        reduce using rule 35 (vars3 -> empty .)
    RES_PRINT       reduce using rule 35 (vars3 -> empty .)
    ID              reduce using rule 35 (vars3 -> empty .)
    RES_IF          reduce using rule 35 (vars3 -> empty .)
    RES_SWITCH      reduce using rule 35 (vars3 -> empty .)
    RES_WHILE       reduce using rule 35 (vars3 -> empty .)
    RES_FOR         reduce using rule 35 (vars3 -> empty .)
    $end            reduce using rule 35 (vars3 -> empty .)
    RES_END         reduce using rule 35 (vars3 -> empty .)
    E_END           reduce using rule 35 (vars3 -> empty .)
    RES_ELSE        reduce using rule 35 (vars3 -> empty .)
    RES_CASE        reduce using rule 35 (vars3 -> empty .)


state 59

    (42) array -> RES_ARRAY dato ID . LBRACKET CTE_INT RBRACKET array1

    LBRACKET        shift and go to state 82


state 60

    (47) modulos -> prototipos se_uso COL . bloque
    (49) bloque -> . estatutos bloque
    (50) bloque -> . empty
    (51) estatutos -> . condicion E_END
    (52) estatutos -> . ciclo E_END
    (53) estatutos -> . lectura
    (54) estatutos -> . escritura
    (55) estatutos -> . asignacion
    (56) estatutos -> . llamada
    (57) estatutos -> . vars
    (127) empty -> .
    (60) condicion -> . if
    (61) condicion -> . switch
    (58) ciclo -> . while
    (59) ciclo -> . for
    (65) lectura -> . RES_READ LPAREN tipo RPAREN
    (66) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (69) asignacion -> . ID seen_id_asignacion
    (62) llamada -> . ID LPAREN llamada1 RPAREN
    (27) vars -> . RES_DEF COL vars1
    (83) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (86) switch -> . RES_SWITCH COL switch2
    (80) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (81) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

    RES_START       reduce using rule 127 (empty -> .)
    RES_FUNC        reduce using rule 127 (empty -> .)
    $end            reduce using rule 127 (empty -> .)
    RES_READ        shift and go to state 99
    RES_PRINT       shift and go to state 93
    ID              shift and go to state 98
    RES_DEF         shift and go to state 22
    RES_IF          shift and go to state 86
    RES_SWITCH      shift and go to state 101
    RES_WHILE       shift and go to state 97
    RES_FOR         shift and go to state 84

    vars                           shift and go to state 83
    bloque                         shift and go to state 85
    if                             shift and go to state 87
    ciclo                          shift and go to state 88
    switch                         shift and go to state 89
    llamada                        shift and go to state 91
    condicion                      shift and go to state 92
    lectura                        shift and go to state 94
    empty                          shift and go to state 95
    estatutos                      shift and go to state 96
    for                            shift and go to state 90
    asignacion                     shift and go to state 100
    while                          shift and go to state 102
    escritura                      shift and go to state 103

state 61

    (121) main -> RES_START comienza_main COL . bloque RES_END
    (49) bloque -> . estatutos bloque
    (50) bloque -> . empty
    (51) estatutos -> . condicion E_END
    (52) estatutos -> . ciclo E_END
    (53) estatutos -> . lectura
    (54) estatutos -> . escritura
    (55) estatutos -> . asignacion
    (56) estatutos -> . llamada
    (57) estatutos -> . vars
    (127) empty -> .
    (60) condicion -> . if
    (61) condicion -> . switch
    (58) ciclo -> . while
    (59) ciclo -> . for
    (65) lectura -> . RES_READ LPAREN tipo RPAREN
    (66) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (69) asignacion -> . ID seen_id_asignacion
    (62) llamada -> . ID LPAREN llamada1 RPAREN
    (27) vars -> . RES_DEF COL vars1
    (83) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (86) switch -> . RES_SWITCH COL switch2
    (80) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (81) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

    RES_END         reduce using rule 127 (empty -> .)
    RES_READ        shift and go to state 99
    RES_PRINT       shift and go to state 93
    ID              shift and go to state 98
    RES_DEF         shift and go to state 22
    RES_IF          shift and go to state 86
    RES_SWITCH      shift and go to state 101
    RES_WHILE       shift and go to state 97
    RES_FOR         shift and go to state 84

    vars                           shift and go to state 83
    bloque                         shift and go to state 104
    if                             shift and go to state 87
    ciclo                          shift and go to state 88
    switch                         shift and go to state 89
    llamada                        shift and go to state 91
    condicion                      shift and go to state 92
    lectura                        shift and go to state 94
    empty                          shift and go to state 95
    estatutos                      shift and go to state 96
    for                            shift and go to state 90
    asignacion                     shift and go to state 100
    while                          shift and go to state 102
    escritura                      shift and go to state 103

state 62

    (15) prototipos_1 -> tipo ID prototipos_2 .

    RPAREN          reduce using rule 15 (prototipos_1 -> tipo ID prototipos_2 .)


state 63

    (16) prototipos_2 -> COMMA . prototipos_1
    (15) prototipos_1 -> . tipo ID prototipos_2
    (23) tipo -> . dato
    (24) tipo -> . estructura
    (18) dato -> . RES_INT
    (19) dato -> . RES_FLOAT
    (20) dato -> . RES_DOUBLE
    (21) dato -> . RES_BOOLEAN
    (22) dato -> . RES_STRING
    (25) estructura -> . list
    (26) estructura -> . array
    (36) list -> . RES_LIST dato ID list1
    (42) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    tipo                           shift and go to state 41
    prototipos_1                   shift and go to state 105
    list                           shift and go to state 34
    estructura                     shift and go to state 42
    dato                           shift and go to state 43
    array                          shift and go to state 29

state 64

    (17) prototipos_2 -> empty .

    RPAREN          reduce using rule 17 (prototipos_2 -> empty .)


state 65

    (36) list -> RES_LIST dato ID list1 .

    ID              reduce using rule 36 (list -> RES_LIST dato ID list1 .)
    RES_INT         reduce using rule 36 (list -> RES_LIST dato ID list1 .)
    RES_FLOAT       reduce using rule 36 (list -> RES_LIST dato ID list1 .)
    RES_DOUBLE      reduce using rule 36 (list -> RES_LIST dato ID list1 .)
    RES_BOOLEAN     reduce using rule 36 (list -> RES_LIST dato ID list1 .)
    RES_STRING      reduce using rule 36 (list -> RES_LIST dato ID list1 .)
    RES_LIST        reduce using rule 36 (list -> RES_LIST dato ID list1 .)
    RES_ARRAY       reduce using rule 36 (list -> RES_LIST dato ID list1 .)
    RPAREN          reduce using rule 36 (list -> RES_LIST dato ID list1 .)


state 66

    (37) list1 -> LCURLY . cons_loop RCURLY
    (39) cons_loop -> . cons cons_loop_1
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 106
    consarray                      shift and go to state 71
    conslist                       shift and go to state 74
    cons_loop                      shift and go to state 107

state 67

    (38) list1 -> empty .

    RES_INT         reduce using rule 38 (list1 -> empty .)
    RES_FLOAT       reduce using rule 38 (list1 -> empty .)
    RES_DOUBLE      reduce using rule 38 (list1 -> empty .)
    RES_BOOLEAN     reduce using rule 38 (list1 -> empty .)
    RES_STRING      reduce using rule 38 (list1 -> empty .)
    RES_LIST        reduce using rule 38 (list1 -> empty .)
    RES_ARRAY       reduce using rule 38 (list1 -> empty .)
    ID              reduce using rule 38 (list1 -> empty .)
    RPAREN          reduce using rule 38 (list1 -> empty .)


state 68

    (113) cons -> CTE_STRING .

    TIMES           reduce using rule 113 (cons -> CTE_STRING .)
    DIVIDE          reduce using rule 113 (cons -> CTE_STRING .)
    PLUS            reduce using rule 113 (cons -> CTE_STRING .)
    MINUS           reduce using rule 113 (cons -> CTE_STRING .)
    MIN             reduce using rule 113 (cons -> CTE_STRING .)
    MIN_EQ          reduce using rule 113 (cons -> CTE_STRING .)
    MAY             reduce using rule 113 (cons -> CTE_STRING .)
    MAY_EQ          reduce using rule 113 (cons -> CTE_STRING .)
    DIF             reduce using rule 113 (cons -> CTE_STRING .)
    EQ_EQ           reduce using rule 113 (cons -> CTE_STRING .)
    RPAREN          reduce using rule 113 (cons -> CTE_STRING .)
    RES_READ        reduce using rule 113 (cons -> CTE_STRING .)
    RES_PRINT       reduce using rule 113 (cons -> CTE_STRING .)
    ID              reduce using rule 113 (cons -> CTE_STRING .)
    RES_DEF         reduce using rule 113 (cons -> CTE_STRING .)
    RES_IF          reduce using rule 113 (cons -> CTE_STRING .)
    RES_SWITCH      reduce using rule 113 (cons -> CTE_STRING .)
    RES_WHILE       reduce using rule 113 (cons -> CTE_STRING .)
    RES_FOR         reduce using rule 113 (cons -> CTE_STRING .)
    RES_START       reduce using rule 113 (cons -> CTE_STRING .)
    RES_FUNC        reduce using rule 113 (cons -> CTE_STRING .)
    $end            reduce using rule 113 (cons -> CTE_STRING .)
    RES_END         reduce using rule 113 (cons -> CTE_STRING .)
    E_END           reduce using rule 113 (cons -> CTE_STRING .)
    RES_ELSE        reduce using rule 113 (cons -> CTE_STRING .)
    RES_CASE        reduce using rule 113 (cons -> CTE_STRING .)
    COL             reduce using rule 113 (cons -> CTE_STRING .)
    COMMA           reduce using rule 113 (cons -> CTE_STRING .)
    RBRACKET        reduce using rule 113 (cons -> CTE_STRING .)
    RCURLY          reduce using rule 113 (cons -> CTE_STRING .)
    RES_INT         reduce using rule 113 (cons -> CTE_STRING .)
    RES_FLOAT       reduce using rule 113 (cons -> CTE_STRING .)
    RES_DOUBLE      reduce using rule 113 (cons -> CTE_STRING .)
    RES_BOOLEAN     reduce using rule 113 (cons -> CTE_STRING .)
    RES_STRING      reduce using rule 113 (cons -> CTE_STRING .)
    RES_LIST        reduce using rule 113 (cons -> CTE_STRING .)
    RES_ARRAY       reduce using rule 113 (cons -> CTE_STRING .)


state 69

    (32) vars2 -> EQUALS cons .

    RES_INT         reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_FLOAT       reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_DOUBLE      reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_BOOLEAN     reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_STRING      reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_LIST        reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_ARRAY       reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_DEF         reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_START       reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_FUNC        reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_READ        reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_PRINT       reduce using rule 32 (vars2 -> EQUALS cons .)
    ID              reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_IF          reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_SWITCH      reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_WHILE       reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_FOR         reduce using rule 32 (vars2 -> EQUALS cons .)
    $end            reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_END         reduce using rule 32 (vars2 -> EQUALS cons .)
    E_END           reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_ELSE        reduce using rule 32 (vars2 -> EQUALS cons .)
    RES_CASE        reduce using rule 32 (vars2 -> EQUALS cons .)


state 70

    (112) cons -> CTE_DOUBLE .

    TIMES           reduce using rule 112 (cons -> CTE_DOUBLE .)
    DIVIDE          reduce using rule 112 (cons -> CTE_DOUBLE .)
    PLUS            reduce using rule 112 (cons -> CTE_DOUBLE .)
    MINUS           reduce using rule 112 (cons -> CTE_DOUBLE .)
    MIN             reduce using rule 112 (cons -> CTE_DOUBLE .)
    MIN_EQ          reduce using rule 112 (cons -> CTE_DOUBLE .)
    MAY             reduce using rule 112 (cons -> CTE_DOUBLE .)
    MAY_EQ          reduce using rule 112 (cons -> CTE_DOUBLE .)
    DIF             reduce using rule 112 (cons -> CTE_DOUBLE .)
    EQ_EQ           reduce using rule 112 (cons -> CTE_DOUBLE .)
    RPAREN          reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_READ        reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_PRINT       reduce using rule 112 (cons -> CTE_DOUBLE .)
    ID              reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_DEF         reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_IF          reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_SWITCH      reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_WHILE       reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_FOR         reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_START       reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_FUNC        reduce using rule 112 (cons -> CTE_DOUBLE .)
    $end            reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_END         reduce using rule 112 (cons -> CTE_DOUBLE .)
    E_END           reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_ELSE        reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_CASE        reduce using rule 112 (cons -> CTE_DOUBLE .)
    COL             reduce using rule 112 (cons -> CTE_DOUBLE .)
    COMMA           reduce using rule 112 (cons -> CTE_DOUBLE .)
    RBRACKET        reduce using rule 112 (cons -> CTE_DOUBLE .)
    RCURLY          reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_INT         reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_FLOAT       reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_DOUBLE      reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_BOOLEAN     reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_STRING      reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_LIST        reduce using rule 112 (cons -> CTE_DOUBLE .)
    RES_ARRAY       reduce using rule 112 (cons -> CTE_DOUBLE .)


state 71

    (116) cons -> consarray .

    TIMES           reduce using rule 116 (cons -> consarray .)
    DIVIDE          reduce using rule 116 (cons -> consarray .)
    PLUS            reduce using rule 116 (cons -> consarray .)
    MINUS           reduce using rule 116 (cons -> consarray .)
    MIN             reduce using rule 116 (cons -> consarray .)
    MIN_EQ          reduce using rule 116 (cons -> consarray .)
    MAY             reduce using rule 116 (cons -> consarray .)
    MAY_EQ          reduce using rule 116 (cons -> consarray .)
    DIF             reduce using rule 116 (cons -> consarray .)
    EQ_EQ           reduce using rule 116 (cons -> consarray .)
    RPAREN          reduce using rule 116 (cons -> consarray .)
    RES_READ        reduce using rule 116 (cons -> consarray .)
    RES_PRINT       reduce using rule 116 (cons -> consarray .)
    ID              reduce using rule 116 (cons -> consarray .)
    RES_DEF         reduce using rule 116 (cons -> consarray .)
    RES_IF          reduce using rule 116 (cons -> consarray .)
    RES_SWITCH      reduce using rule 116 (cons -> consarray .)
    RES_WHILE       reduce using rule 116 (cons -> consarray .)
    RES_FOR         reduce using rule 116 (cons -> consarray .)
    RES_START       reduce using rule 116 (cons -> consarray .)
    RES_FUNC        reduce using rule 116 (cons -> consarray .)
    $end            reduce using rule 116 (cons -> consarray .)
    RES_END         reduce using rule 116 (cons -> consarray .)
    E_END           reduce using rule 116 (cons -> consarray .)
    RES_ELSE        reduce using rule 116 (cons -> consarray .)
    RES_CASE        reduce using rule 116 (cons -> consarray .)
    COL             reduce using rule 116 (cons -> consarray .)
    COMMA           reduce using rule 116 (cons -> consarray .)
    RBRACKET        reduce using rule 116 (cons -> consarray .)
    RCURLY          reduce using rule 116 (cons -> consarray .)
    RES_INT         reduce using rule 116 (cons -> consarray .)
    RES_FLOAT       reduce using rule 116 (cons -> consarray .)
    RES_DOUBLE      reduce using rule 116 (cons -> consarray .)
    RES_BOOLEAN     reduce using rule 116 (cons -> consarray .)
    RES_STRING      reduce using rule 116 (cons -> consarray .)
    RES_LIST        reduce using rule 116 (cons -> consarray .)
    RES_ARRAY       reduce using rule 116 (cons -> consarray .)


state 72

    (111) cons -> CTE_FLOAT . exp_3
    (120) exp_3 -> .

    RES_INT         reduce using rule 120 (exp_3 -> .)
    RES_FLOAT       reduce using rule 120 (exp_3 -> .)
    RES_DOUBLE      reduce using rule 120 (exp_3 -> .)
    RES_BOOLEAN     reduce using rule 120 (exp_3 -> .)
    RES_STRING      reduce using rule 120 (exp_3 -> .)
    RES_LIST        reduce using rule 120 (exp_3 -> .)
    RES_ARRAY       reduce using rule 120 (exp_3 -> .)
    RES_DEF         reduce using rule 120 (exp_3 -> .)
    RES_START       reduce using rule 120 (exp_3 -> .)
    RES_FUNC        reduce using rule 120 (exp_3 -> .)
    RES_READ        reduce using rule 120 (exp_3 -> .)
    RES_PRINT       reduce using rule 120 (exp_3 -> .)
    ID              reduce using rule 120 (exp_3 -> .)
    RES_IF          reduce using rule 120 (exp_3 -> .)
    RES_SWITCH      reduce using rule 120 (exp_3 -> .)
    RES_WHILE       reduce using rule 120 (exp_3 -> .)
    RES_FOR         reduce using rule 120 (exp_3 -> .)
    $end            reduce using rule 120 (exp_3 -> .)
    RES_END         reduce using rule 120 (exp_3 -> .)
    E_END           reduce using rule 120 (exp_3 -> .)
    RES_ELSE        reduce using rule 120 (exp_3 -> .)
    RES_CASE        reduce using rule 120 (exp_3 -> .)
    COMMA           reduce using rule 120 (exp_3 -> .)
    RCURLY          reduce using rule 120 (exp_3 -> .)
    TIMES           reduce using rule 120 (exp_3 -> .)
    DIVIDE          reduce using rule 120 (exp_3 -> .)
    PLUS            reduce using rule 120 (exp_3 -> .)
    MINUS           reduce using rule 120 (exp_3 -> .)
    MIN             reduce using rule 120 (exp_3 -> .)
    MIN_EQ          reduce using rule 120 (exp_3 -> .)
    MAY             reduce using rule 120 (exp_3 -> .)
    MAY_EQ          reduce using rule 120 (exp_3 -> .)
    DIF             reduce using rule 120 (exp_3 -> .)
    EQ_EQ           reduce using rule 120 (exp_3 -> .)
    RPAREN          reduce using rule 120 (exp_3 -> .)
    COL             reduce using rule 120 (exp_3 -> .)
    RBRACKET        reduce using rule 120 (exp_3 -> .)

    exp_3                          shift and go to state 108

state 73

    (114) cons -> RES_TRUE .

    TIMES           reduce using rule 114 (cons -> RES_TRUE .)
    DIVIDE          reduce using rule 114 (cons -> RES_TRUE .)
    PLUS            reduce using rule 114 (cons -> RES_TRUE .)
    MINUS           reduce using rule 114 (cons -> RES_TRUE .)
    MIN             reduce using rule 114 (cons -> RES_TRUE .)
    MIN_EQ          reduce using rule 114 (cons -> RES_TRUE .)
    MAY             reduce using rule 114 (cons -> RES_TRUE .)
    MAY_EQ          reduce using rule 114 (cons -> RES_TRUE .)
    DIF             reduce using rule 114 (cons -> RES_TRUE .)
    EQ_EQ           reduce using rule 114 (cons -> RES_TRUE .)
    RPAREN          reduce using rule 114 (cons -> RES_TRUE .)
    RES_READ        reduce using rule 114 (cons -> RES_TRUE .)
    RES_PRINT       reduce using rule 114 (cons -> RES_TRUE .)
    ID              reduce using rule 114 (cons -> RES_TRUE .)
    RES_DEF         reduce using rule 114 (cons -> RES_TRUE .)
    RES_IF          reduce using rule 114 (cons -> RES_TRUE .)
    RES_SWITCH      reduce using rule 114 (cons -> RES_TRUE .)
    RES_WHILE       reduce using rule 114 (cons -> RES_TRUE .)
    RES_FOR         reduce using rule 114 (cons -> RES_TRUE .)
    RES_START       reduce using rule 114 (cons -> RES_TRUE .)
    RES_FUNC        reduce using rule 114 (cons -> RES_TRUE .)
    $end            reduce using rule 114 (cons -> RES_TRUE .)
    RES_END         reduce using rule 114 (cons -> RES_TRUE .)
    E_END           reduce using rule 114 (cons -> RES_TRUE .)
    RES_ELSE        reduce using rule 114 (cons -> RES_TRUE .)
    RES_CASE        reduce using rule 114 (cons -> RES_TRUE .)
    COL             reduce using rule 114 (cons -> RES_TRUE .)
    COMMA           reduce using rule 114 (cons -> RES_TRUE .)
    RBRACKET        reduce using rule 114 (cons -> RES_TRUE .)
    RCURLY          reduce using rule 114 (cons -> RES_TRUE .)
    RES_INT         reduce using rule 114 (cons -> RES_TRUE .)
    RES_FLOAT       reduce using rule 114 (cons -> RES_TRUE .)
    RES_DOUBLE      reduce using rule 114 (cons -> RES_TRUE .)
    RES_BOOLEAN     reduce using rule 114 (cons -> RES_TRUE .)
    RES_STRING      reduce using rule 114 (cons -> RES_TRUE .)
    RES_LIST        reduce using rule 114 (cons -> RES_TRUE .)
    RES_ARRAY       reduce using rule 114 (cons -> RES_TRUE .)


state 74

    (117) cons -> conslist .

    TIMES           reduce using rule 117 (cons -> conslist .)
    DIVIDE          reduce using rule 117 (cons -> conslist .)
    PLUS            reduce using rule 117 (cons -> conslist .)
    MINUS           reduce using rule 117 (cons -> conslist .)
    MIN             reduce using rule 117 (cons -> conslist .)
    MIN_EQ          reduce using rule 117 (cons -> conslist .)
    MAY             reduce using rule 117 (cons -> conslist .)
    MAY_EQ          reduce using rule 117 (cons -> conslist .)
    DIF             reduce using rule 117 (cons -> conslist .)
    EQ_EQ           reduce using rule 117 (cons -> conslist .)
    RPAREN          reduce using rule 117 (cons -> conslist .)
    RES_READ        reduce using rule 117 (cons -> conslist .)
    RES_PRINT       reduce using rule 117 (cons -> conslist .)
    ID              reduce using rule 117 (cons -> conslist .)
    RES_DEF         reduce using rule 117 (cons -> conslist .)
    RES_IF          reduce using rule 117 (cons -> conslist .)
    RES_SWITCH      reduce using rule 117 (cons -> conslist .)
    RES_WHILE       reduce using rule 117 (cons -> conslist .)
    RES_FOR         reduce using rule 117 (cons -> conslist .)
    RES_START       reduce using rule 117 (cons -> conslist .)
    RES_FUNC        reduce using rule 117 (cons -> conslist .)
    $end            reduce using rule 117 (cons -> conslist .)
    RES_END         reduce using rule 117 (cons -> conslist .)
    E_END           reduce using rule 117 (cons -> conslist .)
    RES_ELSE        reduce using rule 117 (cons -> conslist .)
    RES_CASE        reduce using rule 117 (cons -> conslist .)
    COL             reduce using rule 117 (cons -> conslist .)
    COMMA           reduce using rule 117 (cons -> conslist .)
    RBRACKET        reduce using rule 117 (cons -> conslist .)
    RCURLY          reduce using rule 117 (cons -> conslist .)
    RES_INT         reduce using rule 117 (cons -> conslist .)
    RES_FLOAT       reduce using rule 117 (cons -> conslist .)
    RES_DOUBLE      reduce using rule 117 (cons -> conslist .)
    RES_BOOLEAN     reduce using rule 117 (cons -> conslist .)
    RES_STRING      reduce using rule 117 (cons -> conslist .)
    RES_LIST        reduce using rule 117 (cons -> conslist .)
    RES_ARRAY       reduce using rule 117 (cons -> conslist .)


state 75

    (110) cons -> CTE_INT . exp_2
    (119) exp_2 -> .

    RES_INT         reduce using rule 119 (exp_2 -> .)
    RES_FLOAT       reduce using rule 119 (exp_2 -> .)
    RES_DOUBLE      reduce using rule 119 (exp_2 -> .)
    RES_BOOLEAN     reduce using rule 119 (exp_2 -> .)
    RES_STRING      reduce using rule 119 (exp_2 -> .)
    RES_LIST        reduce using rule 119 (exp_2 -> .)
    RES_ARRAY       reduce using rule 119 (exp_2 -> .)
    RES_DEF         reduce using rule 119 (exp_2 -> .)
    RES_START       reduce using rule 119 (exp_2 -> .)
    RES_FUNC        reduce using rule 119 (exp_2 -> .)
    RES_READ        reduce using rule 119 (exp_2 -> .)
    RES_PRINT       reduce using rule 119 (exp_2 -> .)
    ID              reduce using rule 119 (exp_2 -> .)
    RES_IF          reduce using rule 119 (exp_2 -> .)
    RES_SWITCH      reduce using rule 119 (exp_2 -> .)
    RES_WHILE       reduce using rule 119 (exp_2 -> .)
    RES_FOR         reduce using rule 119 (exp_2 -> .)
    $end            reduce using rule 119 (exp_2 -> .)
    RES_END         reduce using rule 119 (exp_2 -> .)
    E_END           reduce using rule 119 (exp_2 -> .)
    RES_ELSE        reduce using rule 119 (exp_2 -> .)
    RES_CASE        reduce using rule 119 (exp_2 -> .)
    COMMA           reduce using rule 119 (exp_2 -> .)
    RCURLY          reduce using rule 119 (exp_2 -> .)
    TIMES           reduce using rule 119 (exp_2 -> .)
    DIVIDE          reduce using rule 119 (exp_2 -> .)
    PLUS            reduce using rule 119 (exp_2 -> .)
    MINUS           reduce using rule 119 (exp_2 -> .)
    MIN             reduce using rule 119 (exp_2 -> .)
    MIN_EQ          reduce using rule 119 (exp_2 -> .)
    MAY             reduce using rule 119 (exp_2 -> .)
    MAY_EQ          reduce using rule 119 (exp_2 -> .)
    DIF             reduce using rule 119 (exp_2 -> .)
    EQ_EQ           reduce using rule 119 (exp_2 -> .)
    RPAREN          reduce using rule 119 (exp_2 -> .)
    COL             reduce using rule 119 (exp_2 -> .)
    RBRACKET        reduce using rule 119 (exp_2 -> .)

    exp_2                          shift and go to state 109

state 76

    (109) cons -> ID . exp_1
    (123) consarray -> ID . LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> ID . EQUALS LCURLY conslist1 RCURLY
    (118) exp_1 -> .

    LBRACKET        shift and go to state 111
    EQUALS          shift and go to state 110
    RES_INT         reduce using rule 118 (exp_1 -> .)
    RES_FLOAT       reduce using rule 118 (exp_1 -> .)
    RES_DOUBLE      reduce using rule 118 (exp_1 -> .)
    RES_BOOLEAN     reduce using rule 118 (exp_1 -> .)
    RES_STRING      reduce using rule 118 (exp_1 -> .)
    RES_LIST        reduce using rule 118 (exp_1 -> .)
    RES_ARRAY       reduce using rule 118 (exp_1 -> .)
    RES_DEF         reduce using rule 118 (exp_1 -> .)
    RES_START       reduce using rule 118 (exp_1 -> .)
    RES_FUNC        reduce using rule 118 (exp_1 -> .)
    RES_READ        reduce using rule 118 (exp_1 -> .)
    RES_PRINT       reduce using rule 118 (exp_1 -> .)
    ID              reduce using rule 118 (exp_1 -> .)
    RES_IF          reduce using rule 118 (exp_1 -> .)
    RES_SWITCH      reduce using rule 118 (exp_1 -> .)
    RES_WHILE       reduce using rule 118 (exp_1 -> .)
    RES_FOR         reduce using rule 118 (exp_1 -> .)
    $end            reduce using rule 118 (exp_1 -> .)
    RES_END         reduce using rule 118 (exp_1 -> .)
    E_END           reduce using rule 118 (exp_1 -> .)
    RES_ELSE        reduce using rule 118 (exp_1 -> .)
    RES_CASE        reduce using rule 118 (exp_1 -> .)
    COMMA           reduce using rule 118 (exp_1 -> .)
    RCURLY          reduce using rule 118 (exp_1 -> .)
    TIMES           reduce using rule 118 (exp_1 -> .)
    DIVIDE          reduce using rule 118 (exp_1 -> .)
    PLUS            reduce using rule 118 (exp_1 -> .)
    MINUS           reduce using rule 118 (exp_1 -> .)
    MIN             reduce using rule 118 (exp_1 -> .)
    MIN_EQ          reduce using rule 118 (exp_1 -> .)
    MAY             reduce using rule 118 (exp_1 -> .)
    MAY_EQ          reduce using rule 118 (exp_1 -> .)
    DIF             reduce using rule 118 (exp_1 -> .)
    EQ_EQ           reduce using rule 118 (exp_1 -> .)
    RPAREN          reduce using rule 118 (exp_1 -> .)
    COL             reduce using rule 118 (exp_1 -> .)
    RBRACKET        reduce using rule 118 (exp_1 -> .)

    exp_1                          shift and go to state 112

state 77

    (115) cons -> RES_FALSE .

    TIMES           reduce using rule 115 (cons -> RES_FALSE .)
    DIVIDE          reduce using rule 115 (cons -> RES_FALSE .)
    PLUS            reduce using rule 115 (cons -> RES_FALSE .)
    MINUS           reduce using rule 115 (cons -> RES_FALSE .)
    MIN             reduce using rule 115 (cons -> RES_FALSE .)
    MIN_EQ          reduce using rule 115 (cons -> RES_FALSE .)
    MAY             reduce using rule 115 (cons -> RES_FALSE .)
    MAY_EQ          reduce using rule 115 (cons -> RES_FALSE .)
    DIF             reduce using rule 115 (cons -> RES_FALSE .)
    EQ_EQ           reduce using rule 115 (cons -> RES_FALSE .)
    RPAREN          reduce using rule 115 (cons -> RES_FALSE .)
    RES_READ        reduce using rule 115 (cons -> RES_FALSE .)
    RES_PRINT       reduce using rule 115 (cons -> RES_FALSE .)
    ID              reduce using rule 115 (cons -> RES_FALSE .)
    RES_DEF         reduce using rule 115 (cons -> RES_FALSE .)
    RES_IF          reduce using rule 115 (cons -> RES_FALSE .)
    RES_SWITCH      reduce using rule 115 (cons -> RES_FALSE .)
    RES_WHILE       reduce using rule 115 (cons -> RES_FALSE .)
    RES_FOR         reduce using rule 115 (cons -> RES_FALSE .)
    RES_START       reduce using rule 115 (cons -> RES_FALSE .)
    RES_FUNC        reduce using rule 115 (cons -> RES_FALSE .)
    $end            reduce using rule 115 (cons -> RES_FALSE .)
    RES_END         reduce using rule 115 (cons -> RES_FALSE .)
    E_END           reduce using rule 115 (cons -> RES_FALSE .)
    RES_ELSE        reduce using rule 115 (cons -> RES_FALSE .)
    RES_CASE        reduce using rule 115 (cons -> RES_FALSE .)
    COL             reduce using rule 115 (cons -> RES_FALSE .)
    COMMA           reduce using rule 115 (cons -> RES_FALSE .)
    RBRACKET        reduce using rule 115 (cons -> RES_FALSE .)
    RCURLY          reduce using rule 115 (cons -> RES_FALSE .)
    RES_INT         reduce using rule 115 (cons -> RES_FALSE .)
    RES_FLOAT       reduce using rule 115 (cons -> RES_FALSE .)
    RES_DOUBLE      reduce using rule 115 (cons -> RES_FALSE .)
    RES_BOOLEAN     reduce using rule 115 (cons -> RES_FALSE .)
    RES_STRING      reduce using rule 115 (cons -> RES_FALSE .)
    RES_LIST        reduce using rule 115 (cons -> RES_FALSE .)
    RES_ARRAY       reduce using rule 115 (cons -> RES_FALSE .)


state 78

    (30) vars1_1 -> vars1 .

    RES_DEF         reduce using rule 30 (vars1_1 -> vars1 .)
    RES_START       reduce using rule 30 (vars1_1 -> vars1 .)
    RES_FUNC        reduce using rule 30 (vars1_1 -> vars1 .)
    RES_READ        reduce using rule 30 (vars1_1 -> vars1 .)
    RES_PRINT       reduce using rule 30 (vars1_1 -> vars1 .)
    ID              reduce using rule 30 (vars1_1 -> vars1 .)
    RES_IF          reduce using rule 30 (vars1_1 -> vars1 .)
    RES_SWITCH      reduce using rule 30 (vars1_1 -> vars1 .)
    RES_WHILE       reduce using rule 30 (vars1_1 -> vars1 .)
    RES_FOR         reduce using rule 30 (vars1_1 -> vars1 .)
    $end            reduce using rule 30 (vars1_1 -> vars1 .)
    RES_END         reduce using rule 30 (vars1_1 -> vars1 .)
    E_END           reduce using rule 30 (vars1_1 -> vars1 .)
    RES_ELSE        reduce using rule 30 (vars1_1 -> vars1 .)
    RES_CASE        reduce using rule 30 (vars1_1 -> vars1 .)


state 79

    (29) vars1 -> dato ID vars2 vars1_1 .

    RES_DEF         reduce using rule 29 (vars1 -> dato ID vars2 vars1_1 .)
    RES_START       reduce using rule 29 (vars1 -> dato ID vars2 vars1_1 .)
    RES_FUNC        reduce using rule 29 (vars1 -> dato ID vars2 vars1_1 .)
    RES_READ        reduce using rule 29 (vars1 -> dato ID vars2 vars1_1 .)
    RES_PRINT       reduce using rule 29 (vars1 -> dato ID vars2 vars1_1 .)
    ID              reduce using rule 29 (vars1 -> dato ID vars2 vars1_1 .)
    RES_IF          reduce using rule 29 (vars1 -> dato ID vars2 vars1_1 .)
    RES_SWITCH      reduce using rule 29 (vars1 -> dato ID vars2 vars1_1 .)
    RES_WHILE       reduce using rule 29 (vars1 -> dato ID vars2 vars1_1 .)
    RES_FOR         reduce using rule 29 (vars1 -> dato ID vars2 vars1_1 .)
    $end            reduce using rule 29 (vars1 -> dato ID vars2 vars1_1 .)
    RES_END         reduce using rule 29 (vars1 -> dato ID vars2 vars1_1 .)
    E_END           reduce using rule 29 (vars1 -> dato ID vars2 vars1_1 .)
    RES_ELSE        reduce using rule 29 (vars1 -> dato ID vars2 vars1_1 .)
    RES_CASE        reduce using rule 29 (vars1 -> dato ID vars2 vars1_1 .)


state 80

    (31) vars1_1 -> empty .

    RES_DEF         reduce using rule 31 (vars1_1 -> empty .)
    RES_START       reduce using rule 31 (vars1_1 -> empty .)
    RES_FUNC        reduce using rule 31 (vars1_1 -> empty .)
    RES_READ        reduce using rule 31 (vars1_1 -> empty .)
    RES_PRINT       reduce using rule 31 (vars1_1 -> empty .)
    ID              reduce using rule 31 (vars1_1 -> empty .)
    RES_IF          reduce using rule 31 (vars1_1 -> empty .)
    RES_SWITCH      reduce using rule 31 (vars1_1 -> empty .)
    RES_WHILE       reduce using rule 31 (vars1_1 -> empty .)
    RES_FOR         reduce using rule 31 (vars1_1 -> empty .)
    $end            reduce using rule 31 (vars1_1 -> empty .)
    RES_END         reduce using rule 31 (vars1_1 -> empty .)
    E_END           reduce using rule 31 (vars1_1 -> empty .)
    RES_ELSE        reduce using rule 31 (vars1_1 -> empty .)
    RES_CASE        reduce using rule 31 (vars1_1 -> empty .)


state 81

    (34) vars3 -> COMMA ID . vars3
    (34) vars3 -> . COMMA ID vars3
    (35) vars3 -> . empty
    (127) empty -> .

    COMMA           shift and go to state 57
    RES_INT         reduce using rule 127 (empty -> .)
    RES_FLOAT       reduce using rule 127 (empty -> .)
    RES_DOUBLE      reduce using rule 127 (empty -> .)
    RES_BOOLEAN     reduce using rule 127 (empty -> .)
    RES_STRING      reduce using rule 127 (empty -> .)
    RES_LIST        reduce using rule 127 (empty -> .)
    RES_ARRAY       reduce using rule 127 (empty -> .)
    RES_DEF         reduce using rule 127 (empty -> .)
    RES_START       reduce using rule 127 (empty -> .)
    RES_FUNC        reduce using rule 127 (empty -> .)
    RES_READ        reduce using rule 127 (empty -> .)
    RES_PRINT       reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RES_IF          reduce using rule 127 (empty -> .)
    RES_SWITCH      reduce using rule 127 (empty -> .)
    RES_WHILE       reduce using rule 127 (empty -> .)
    RES_FOR         reduce using rule 127 (empty -> .)
    $end            reduce using rule 127 (empty -> .)
    RES_END         reduce using rule 127 (empty -> .)
    E_END           reduce using rule 127 (empty -> .)
    RES_ELSE        reduce using rule 127 (empty -> .)
    RES_CASE        reduce using rule 127 (empty -> .)

    vars3                          shift and go to state 113
    empty                          shift and go to state 58

state 82

    (42) array -> RES_ARRAY dato ID LBRACKET . CTE_INT RBRACKET array1

    CTE_INT         shift and go to state 114


state 83

    (57) estatutos -> vars .

    RES_READ        reduce using rule 57 (estatutos -> vars .)
    RES_PRINT       reduce using rule 57 (estatutos -> vars .)
    ID              reduce using rule 57 (estatutos -> vars .)
    RES_DEF         reduce using rule 57 (estatutos -> vars .)
    RES_IF          reduce using rule 57 (estatutos -> vars .)
    RES_SWITCH      reduce using rule 57 (estatutos -> vars .)
    RES_WHILE       reduce using rule 57 (estatutos -> vars .)
    RES_FOR         reduce using rule 57 (estatutos -> vars .)
    RES_CASE        reduce using rule 57 (estatutos -> vars .)
    E_END           reduce using rule 57 (estatutos -> vars .)
    RES_START       reduce using rule 57 (estatutos -> vars .)
    RES_FUNC        reduce using rule 57 (estatutos -> vars .)
    $end            reduce using rule 57 (estatutos -> vars .)
    RES_END         reduce using rule 57 (estatutos -> vars .)
    RES_ELSE        reduce using rule 57 (estatutos -> vars .)


state 84

    (81) for -> RES_FOR . LPAREN forexp RPAREN COL bloque

    LPAREN          shift and go to state 115


state 85

    (47) modulos -> prototipos se_uso COL bloque .

    RES_FUNC        reduce using rule 47 (modulos -> prototipos se_uso COL bloque .)
    $end            reduce using rule 47 (modulos -> prototipos se_uso COL bloque .)
    RES_START       reduce using rule 47 (modulos -> prototipos se_uso COL bloque .)


state 86

    (83) if -> RES_IF . LPAREN expresion RPAREN COL bloque ifelse

    LPAREN          shift and go to state 116


state 87

    (60) condicion -> if .

    E_END           reduce using rule 60 (condicion -> if .)


state 88

    (52) estatutos -> ciclo . E_END

    E_END           shift and go to state 117


state 89

    (61) condicion -> switch .

    E_END           reduce using rule 61 (condicion -> switch .)


state 90

    (59) ciclo -> for .

    E_END           reduce using rule 59 (ciclo -> for .)


state 91

    (56) estatutos -> llamada .

    RES_READ        reduce using rule 56 (estatutos -> llamada .)
    RES_PRINT       reduce using rule 56 (estatutos -> llamada .)
    ID              reduce using rule 56 (estatutos -> llamada .)
    RES_DEF         reduce using rule 56 (estatutos -> llamada .)
    RES_IF          reduce using rule 56 (estatutos -> llamada .)
    RES_SWITCH      reduce using rule 56 (estatutos -> llamada .)
    RES_WHILE       reduce using rule 56 (estatutos -> llamada .)
    RES_FOR         reduce using rule 56 (estatutos -> llamada .)
    RES_CASE        reduce using rule 56 (estatutos -> llamada .)
    E_END           reduce using rule 56 (estatutos -> llamada .)
    RES_START       reduce using rule 56 (estatutos -> llamada .)
    RES_FUNC        reduce using rule 56 (estatutos -> llamada .)
    $end            reduce using rule 56 (estatutos -> llamada .)
    RES_END         reduce using rule 56 (estatutos -> llamada .)
    RES_ELSE        reduce using rule 56 (estatutos -> llamada .)


state 92

    (51) estatutos -> condicion . E_END

    E_END           shift and go to state 118


state 93

    (66) escritura -> RES_PRINT . LPAREN escritura1 RPAREN

    LPAREN          shift and go to state 119


state 94

    (53) estatutos -> lectura .

    RES_READ        reduce using rule 53 (estatutos -> lectura .)
    RES_PRINT       reduce using rule 53 (estatutos -> lectura .)
    ID              reduce using rule 53 (estatutos -> lectura .)
    RES_DEF         reduce using rule 53 (estatutos -> lectura .)
    RES_IF          reduce using rule 53 (estatutos -> lectura .)
    RES_SWITCH      reduce using rule 53 (estatutos -> lectura .)
    RES_WHILE       reduce using rule 53 (estatutos -> lectura .)
    RES_FOR         reduce using rule 53 (estatutos -> lectura .)
    RES_CASE        reduce using rule 53 (estatutos -> lectura .)
    E_END           reduce using rule 53 (estatutos -> lectura .)
    RES_START       reduce using rule 53 (estatutos -> lectura .)
    RES_FUNC        reduce using rule 53 (estatutos -> lectura .)
    $end            reduce using rule 53 (estatutos -> lectura .)
    RES_END         reduce using rule 53 (estatutos -> lectura .)
    RES_ELSE        reduce using rule 53 (estatutos -> lectura .)


state 95

    (50) bloque -> empty .

    RES_START       reduce using rule 50 (bloque -> empty .)
    RES_FUNC        reduce using rule 50 (bloque -> empty .)
    $end            reduce using rule 50 (bloque -> empty .)
    RES_ELSE        reduce using rule 50 (bloque -> empty .)
    E_END           reduce using rule 50 (bloque -> empty .)
    RES_END         reduce using rule 50 (bloque -> empty .)
    RES_CASE        reduce using rule 50 (bloque -> empty .)


state 96

    (49) bloque -> estatutos . bloque
    (49) bloque -> . estatutos bloque
    (50) bloque -> . empty
    (51) estatutos -> . condicion E_END
    (52) estatutos -> . ciclo E_END
    (53) estatutos -> . lectura
    (54) estatutos -> . escritura
    (55) estatutos -> . asignacion
    (56) estatutos -> . llamada
    (57) estatutos -> . vars
    (127) empty -> .
    (60) condicion -> . if
    (61) condicion -> . switch
    (58) ciclo -> . while
    (59) ciclo -> . for
    (65) lectura -> . RES_READ LPAREN tipo RPAREN
    (66) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (69) asignacion -> . ID seen_id_asignacion
    (62) llamada -> . ID LPAREN llamada1 RPAREN
    (27) vars -> . RES_DEF COL vars1
    (83) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (86) switch -> . RES_SWITCH COL switch2
    (80) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (81) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

    RES_START       reduce using rule 127 (empty -> .)
    RES_FUNC        reduce using rule 127 (empty -> .)
    $end            reduce using rule 127 (empty -> .)
    RES_END         reduce using rule 127 (empty -> .)
    E_END           reduce using rule 127 (empty -> .)
    RES_ELSE        reduce using rule 127 (empty -> .)
    RES_CASE        reduce using rule 127 (empty -> .)
    RES_READ        shift and go to state 99
    RES_PRINT       shift and go to state 93
    ID              shift and go to state 98
    RES_DEF         shift and go to state 22
    RES_IF          shift and go to state 86
    RES_SWITCH      shift and go to state 101
    RES_WHILE       shift and go to state 97
    RES_FOR         shift and go to state 84

    vars                           shift and go to state 83
    bloque                         shift and go to state 120
    if                             shift and go to state 87
    ciclo                          shift and go to state 88
    switch                         shift and go to state 89
    llamada                        shift and go to state 91
    condicion                      shift and go to state 92
    lectura                        shift and go to state 94
    empty                          shift and go to state 95
    estatutos                      shift and go to state 96
    for                            shift and go to state 90
    asignacion                     shift and go to state 100
    while                          shift and go to state 102
    escritura                      shift and go to state 103

state 97

    (80) while -> RES_WHILE . LPAREN expresion RPAREN COL bloque

    LPAREN          shift and go to state 121


state 98

    (69) asignacion -> ID . seen_id_asignacion
    (62) llamada -> ID . LPAREN llamada1 RPAREN
    (70) seen_id_asignacion -> . EQUALS asignacion1

    LPAREN          shift and go to state 124
    EQUALS          shift and go to state 123

    seen_id_asignacion             shift and go to state 122

state 99

    (65) lectura -> RES_READ . LPAREN tipo RPAREN

    LPAREN          shift and go to state 125


state 100

    (55) estatutos -> asignacion .

    RES_READ        reduce using rule 55 (estatutos -> asignacion .)
    RES_PRINT       reduce using rule 55 (estatutos -> asignacion .)
    ID              reduce using rule 55 (estatutos -> asignacion .)
    RES_DEF         reduce using rule 55 (estatutos -> asignacion .)
    RES_IF          reduce using rule 55 (estatutos -> asignacion .)
    RES_SWITCH      reduce using rule 55 (estatutos -> asignacion .)
    RES_WHILE       reduce using rule 55 (estatutos -> asignacion .)
    RES_FOR         reduce using rule 55 (estatutos -> asignacion .)
    RES_CASE        reduce using rule 55 (estatutos -> asignacion .)
    E_END           reduce using rule 55 (estatutos -> asignacion .)
    RES_START       reduce using rule 55 (estatutos -> asignacion .)
    RES_FUNC        reduce using rule 55 (estatutos -> asignacion .)
    $end            reduce using rule 55 (estatutos -> asignacion .)
    RES_END         reduce using rule 55 (estatutos -> asignacion .)
    RES_ELSE        reduce using rule 55 (estatutos -> asignacion .)


state 101

    (86) switch -> RES_SWITCH . COL switch2

    COL             shift and go to state 126


state 102

    (58) ciclo -> while .

    E_END           reduce using rule 58 (ciclo -> while .)


state 103

    (54) estatutos -> escritura .

    RES_READ        reduce using rule 54 (estatutos -> escritura .)
    RES_PRINT       reduce using rule 54 (estatutos -> escritura .)
    ID              reduce using rule 54 (estatutos -> escritura .)
    RES_DEF         reduce using rule 54 (estatutos -> escritura .)
    RES_IF          reduce using rule 54 (estatutos -> escritura .)
    RES_SWITCH      reduce using rule 54 (estatutos -> escritura .)
    RES_WHILE       reduce using rule 54 (estatutos -> escritura .)
    RES_FOR         reduce using rule 54 (estatutos -> escritura .)
    RES_CASE        reduce using rule 54 (estatutos -> escritura .)
    E_END           reduce using rule 54 (estatutos -> escritura .)
    RES_START       reduce using rule 54 (estatutos -> escritura .)
    RES_FUNC        reduce using rule 54 (estatutos -> escritura .)
    $end            reduce using rule 54 (estatutos -> escritura .)
    RES_END         reduce using rule 54 (estatutos -> escritura .)
    RES_ELSE        reduce using rule 54 (estatutos -> escritura .)


state 104

    (121) main -> RES_START comienza_main COL bloque . RES_END

    RES_END         shift and go to state 127


state 105

    (16) prototipos_2 -> COMMA prototipos_1 .

    RPAREN          reduce using rule 16 (prototipos_2 -> COMMA prototipos_1 .)


state 106

    (39) cons_loop -> cons . cons_loop_1
    (40) cons_loop_1 -> . COMMA cons_loop
    (41) cons_loop_1 -> . empty
    (127) empty -> .

    COMMA           shift and go to state 128
    RCURLY          reduce using rule 127 (empty -> .)

    empty                          shift and go to state 129
    cons_loop_1                    shift and go to state 130

state 107

    (37) list1 -> LCURLY cons_loop . RCURLY

    RCURLY          shift and go to state 131


state 108

    (111) cons -> CTE_FLOAT exp_3 .

    TIMES           reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    DIVIDE          reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    PLUS            reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    MINUS           reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    MIN             reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    MIN_EQ          reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    MAY             reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    MAY_EQ          reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    DIF             reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    EQ_EQ           reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RPAREN          reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_READ        reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_PRINT       reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    ID              reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_DEF         reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_IF          reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_SWITCH      reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_WHILE       reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_FOR         reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_START       reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_FUNC        reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    $end            reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_END         reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    E_END           reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_ELSE        reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_CASE        reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    COL             reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    COMMA           reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RBRACKET        reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RCURLY          reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_INT         reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_FLOAT       reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_DOUBLE      reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_BOOLEAN     reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_STRING      reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_LIST        reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)
    RES_ARRAY       reduce using rule 111 (cons -> CTE_FLOAT exp_3 .)


state 109

    (110) cons -> CTE_INT exp_2 .

    TIMES           reduce using rule 110 (cons -> CTE_INT exp_2 .)
    DIVIDE          reduce using rule 110 (cons -> CTE_INT exp_2 .)
    PLUS            reduce using rule 110 (cons -> CTE_INT exp_2 .)
    MINUS           reduce using rule 110 (cons -> CTE_INT exp_2 .)
    MIN             reduce using rule 110 (cons -> CTE_INT exp_2 .)
    MIN_EQ          reduce using rule 110 (cons -> CTE_INT exp_2 .)
    MAY             reduce using rule 110 (cons -> CTE_INT exp_2 .)
    MAY_EQ          reduce using rule 110 (cons -> CTE_INT exp_2 .)
    DIF             reduce using rule 110 (cons -> CTE_INT exp_2 .)
    EQ_EQ           reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RPAREN          reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_READ        reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_PRINT       reduce using rule 110 (cons -> CTE_INT exp_2 .)
    ID              reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_DEF         reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_IF          reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_SWITCH      reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_WHILE       reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_FOR         reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_START       reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_FUNC        reduce using rule 110 (cons -> CTE_INT exp_2 .)
    $end            reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_END         reduce using rule 110 (cons -> CTE_INT exp_2 .)
    E_END           reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_ELSE        reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_CASE        reduce using rule 110 (cons -> CTE_INT exp_2 .)
    COL             reduce using rule 110 (cons -> CTE_INT exp_2 .)
    COMMA           reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RBRACKET        reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RCURLY          reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_INT         reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_FLOAT       reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_DOUBLE      reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_BOOLEAN     reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_STRING      reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_LIST        reduce using rule 110 (cons -> CTE_INT exp_2 .)
    RES_ARRAY       reduce using rule 110 (cons -> CTE_INT exp_2 .)


state 110

    (124) conslist -> ID EQUALS . LCURLY conslist1 RCURLY

    LCURLY          shift and go to state 132


state 111

    (123) consarray -> ID LBRACKET . CTE_INT RBRACKET EQUALS cons

    CTE_INT         shift and go to state 133


state 112

    (109) cons -> ID exp_1 .

    TIMES           reduce using rule 109 (cons -> ID exp_1 .)
    DIVIDE          reduce using rule 109 (cons -> ID exp_1 .)
    PLUS            reduce using rule 109 (cons -> ID exp_1 .)
    MINUS           reduce using rule 109 (cons -> ID exp_1 .)
    MIN             reduce using rule 109 (cons -> ID exp_1 .)
    MIN_EQ          reduce using rule 109 (cons -> ID exp_1 .)
    MAY             reduce using rule 109 (cons -> ID exp_1 .)
    MAY_EQ          reduce using rule 109 (cons -> ID exp_1 .)
    DIF             reduce using rule 109 (cons -> ID exp_1 .)
    EQ_EQ           reduce using rule 109 (cons -> ID exp_1 .)
    RPAREN          reduce using rule 109 (cons -> ID exp_1 .)
    RES_READ        reduce using rule 109 (cons -> ID exp_1 .)
    RES_PRINT       reduce using rule 109 (cons -> ID exp_1 .)
    ID              reduce using rule 109 (cons -> ID exp_1 .)
    RES_DEF         reduce using rule 109 (cons -> ID exp_1 .)
    RES_IF          reduce using rule 109 (cons -> ID exp_1 .)
    RES_SWITCH      reduce using rule 109 (cons -> ID exp_1 .)
    RES_WHILE       reduce using rule 109 (cons -> ID exp_1 .)
    RES_FOR         reduce using rule 109 (cons -> ID exp_1 .)
    RES_START       reduce using rule 109 (cons -> ID exp_1 .)
    RES_FUNC        reduce using rule 109 (cons -> ID exp_1 .)
    $end            reduce using rule 109 (cons -> ID exp_1 .)
    RES_END         reduce using rule 109 (cons -> ID exp_1 .)
    E_END           reduce using rule 109 (cons -> ID exp_1 .)
    RES_ELSE        reduce using rule 109 (cons -> ID exp_1 .)
    RES_CASE        reduce using rule 109 (cons -> ID exp_1 .)
    COL             reduce using rule 109 (cons -> ID exp_1 .)
    COMMA           reduce using rule 109 (cons -> ID exp_1 .)
    RBRACKET        reduce using rule 109 (cons -> ID exp_1 .)
    RCURLY          reduce using rule 109 (cons -> ID exp_1 .)
    RES_INT         reduce using rule 109 (cons -> ID exp_1 .)
    RES_FLOAT       reduce using rule 109 (cons -> ID exp_1 .)
    RES_DOUBLE      reduce using rule 109 (cons -> ID exp_1 .)
    RES_BOOLEAN     reduce using rule 109 (cons -> ID exp_1 .)
    RES_STRING      reduce using rule 109 (cons -> ID exp_1 .)
    RES_LIST        reduce using rule 109 (cons -> ID exp_1 .)
    RES_ARRAY       reduce using rule 109 (cons -> ID exp_1 .)


state 113

    (34) vars3 -> COMMA ID vars3 .

    RES_INT         reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_FLOAT       reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_DOUBLE      reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_BOOLEAN     reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_STRING      reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_LIST        reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_ARRAY       reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_DEF         reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_START       reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_FUNC        reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_READ        reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_PRINT       reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    ID              reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_IF          reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_SWITCH      reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_WHILE       reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_FOR         reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    $end            reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_END         reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    E_END           reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_ELSE        reduce using rule 34 (vars3 -> COMMA ID vars3 .)
    RES_CASE        reduce using rule 34 (vars3 -> COMMA ID vars3 .)


state 114

    (42) array -> RES_ARRAY dato ID LBRACKET CTE_INT . RBRACKET array1

    RBRACKET        shift and go to state 134


state 115

    (81) for -> RES_FOR LPAREN . forexp RPAREN COL bloque
    (82) forexp -> . ID EQUALS cons COL expresion COL ID EQUALS expresion

    ID              shift and go to state 135

    forexp                         shift and go to state 136

state 116

    (83) if -> RES_IF LPAREN . expresion RPAREN COL bloque ifelse
    (89) expresion -> . exp expresion_1
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    expresion                      shift and go to state 143
    cons                           shift and go to state 137
    exp                            shift and go to state 144
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 117

    (52) estatutos -> ciclo E_END .

    RES_READ        reduce using rule 52 (estatutos -> ciclo E_END .)
    RES_PRINT       reduce using rule 52 (estatutos -> ciclo E_END .)
    ID              reduce using rule 52 (estatutos -> ciclo E_END .)
    RES_DEF         reduce using rule 52 (estatutos -> ciclo E_END .)
    RES_IF          reduce using rule 52 (estatutos -> ciclo E_END .)
    RES_SWITCH      reduce using rule 52 (estatutos -> ciclo E_END .)
    RES_WHILE       reduce using rule 52 (estatutos -> ciclo E_END .)
    RES_FOR         reduce using rule 52 (estatutos -> ciclo E_END .)
    RES_CASE        reduce using rule 52 (estatutos -> ciclo E_END .)
    E_END           reduce using rule 52 (estatutos -> ciclo E_END .)
    RES_START       reduce using rule 52 (estatutos -> ciclo E_END .)
    RES_FUNC        reduce using rule 52 (estatutos -> ciclo E_END .)
    $end            reduce using rule 52 (estatutos -> ciclo E_END .)
    RES_END         reduce using rule 52 (estatutos -> ciclo E_END .)
    RES_ELSE        reduce using rule 52 (estatutos -> ciclo E_END .)


state 118

    (51) estatutos -> condicion E_END .

    RES_READ        reduce using rule 51 (estatutos -> condicion E_END .)
    RES_PRINT       reduce using rule 51 (estatutos -> condicion E_END .)
    ID              reduce using rule 51 (estatutos -> condicion E_END .)
    RES_DEF         reduce using rule 51 (estatutos -> condicion E_END .)
    RES_IF          reduce using rule 51 (estatutos -> condicion E_END .)
    RES_SWITCH      reduce using rule 51 (estatutos -> condicion E_END .)
    RES_WHILE       reduce using rule 51 (estatutos -> condicion E_END .)
    RES_FOR         reduce using rule 51 (estatutos -> condicion E_END .)
    RES_CASE        reduce using rule 51 (estatutos -> condicion E_END .)
    E_END           reduce using rule 51 (estatutos -> condicion E_END .)
    RES_START       reduce using rule 51 (estatutos -> condicion E_END .)
    RES_FUNC        reduce using rule 51 (estatutos -> condicion E_END .)
    $end            reduce using rule 51 (estatutos -> condicion E_END .)
    RES_END         reduce using rule 51 (estatutos -> condicion E_END .)
    RES_ELSE        reduce using rule 51 (estatutos -> condicion E_END .)


state 119

    (66) escritura -> RES_PRINT LPAREN . escritura1 RPAREN
    (67) escritura1 -> . expresion
    (68) escritura1 -> . CTE_STRING
    (89) expresion -> . exp expresion_1
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_STRING      shift and go to state 145
    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    expresion                      shift and go to state 147
    cons                           shift and go to state 137
    exp                            shift and go to state 144
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    factor                         shift and go to state 141
    escritura1                     shift and go to state 146
    consarray                      shift and go to state 71

state 120

    (49) bloque -> estatutos bloque .

    RES_START       reduce using rule 49 (bloque -> estatutos bloque .)
    RES_FUNC        reduce using rule 49 (bloque -> estatutos bloque .)
    $end            reduce using rule 49 (bloque -> estatutos bloque .)
    RES_ELSE        reduce using rule 49 (bloque -> estatutos bloque .)
    E_END           reduce using rule 49 (bloque -> estatutos bloque .)
    RES_END         reduce using rule 49 (bloque -> estatutos bloque .)
    RES_CASE        reduce using rule 49 (bloque -> estatutos bloque .)


state 121

    (80) while -> RES_WHILE LPAREN . expresion RPAREN COL bloque
    (89) expresion -> . exp expresion_1
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    expresion                      shift and go to state 148
    cons                           shift and go to state 137
    exp                            shift and go to state 144
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 122

    (69) asignacion -> ID seen_id_asignacion .

    RES_READ        reduce using rule 69 (asignacion -> ID seen_id_asignacion .)
    RES_PRINT       reduce using rule 69 (asignacion -> ID seen_id_asignacion .)
    ID              reduce using rule 69 (asignacion -> ID seen_id_asignacion .)
    RES_DEF         reduce using rule 69 (asignacion -> ID seen_id_asignacion .)
    RES_IF          reduce using rule 69 (asignacion -> ID seen_id_asignacion .)
    RES_SWITCH      reduce using rule 69 (asignacion -> ID seen_id_asignacion .)
    RES_WHILE       reduce using rule 69 (asignacion -> ID seen_id_asignacion .)
    RES_FOR         reduce using rule 69 (asignacion -> ID seen_id_asignacion .)
    E_END           reduce using rule 69 (asignacion -> ID seen_id_asignacion .)
    RES_START       reduce using rule 69 (asignacion -> ID seen_id_asignacion .)
    RES_FUNC        reduce using rule 69 (asignacion -> ID seen_id_asignacion .)
    $end            reduce using rule 69 (asignacion -> ID seen_id_asignacion .)
    RES_END         reduce using rule 69 (asignacion -> ID seen_id_asignacion .)
    RES_ELSE        reduce using rule 69 (asignacion -> ID seen_id_asignacion .)
    RES_CASE        reduce using rule 69 (asignacion -> ID seen_id_asignacion .)


state 123

    (70) seen_id_asignacion -> EQUALS . asignacion1
    (71) asignacion1 -> . exp
    (72) asignacion1 -> . asignlist
    (73) asignacion1 -> . asignarray
    (97) exp -> . termino exp1
    (74) asignlist -> . LCURLY asignlist1 RCURLY
    (77) asignarray -> . LBRACKET asignarray1 RBRACKET
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LCURLY          shift and go to state 150
    LBRACKET        shift and go to state 149
    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 137
    asignarray                     shift and go to state 151
    factor                         shift and go to state 141
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    exp                            shift and go to state 153
    asignlist                      shift and go to state 152
    asignacion1                    shift and go to state 154
    consarray                      shift and go to state 71

state 124

    (62) llamada -> ID LPAREN . llamada1 RPAREN
    (63) llamada1 -> . expresion
    (64) llamada1 -> . empty
    (89) expresion -> . exp expresion_1
    (127) empty -> .
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    RPAREN          reduce using rule 127 (empty -> .)
    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    expresion                      shift and go to state 157
    cons                           shift and go to state 137
    exp                            shift and go to state 144
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    factor                         shift and go to state 141
    llamada1                       shift and go to state 155
    empty                          shift and go to state 156
    consarray                      shift and go to state 71

state 125

    (65) lectura -> RES_READ LPAREN . tipo RPAREN
    (23) tipo -> . dato
    (24) tipo -> . estructura
    (18) dato -> . RES_INT
    (19) dato -> . RES_FLOAT
    (20) dato -> . RES_DOUBLE
    (21) dato -> . RES_BOOLEAN
    (22) dato -> . RES_STRING
    (25) estructura -> . list
    (26) estructura -> . array
    (36) list -> . RES_LIST dato ID list1
    (42) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    tipo                           shift and go to state 158
    list                           shift and go to state 34
    estructura                     shift and go to state 42
    dato                           shift and go to state 43
    array                          shift and go to state 29

state 126

    (86) switch -> RES_SWITCH COL . switch2
    (87) switch2 -> . RES_CASE expresion COL bloque switch2
    (88) switch2 -> . empty
    (127) empty -> .

    RES_CASE        shift and go to state 160
    E_END           reduce using rule 127 (empty -> .)

    switch2                        shift and go to state 159
    empty                          shift and go to state 161

state 127

    (121) main -> RES_START comienza_main COL bloque RES_END .

    RES_FUNC        reduce using rule 121 (main -> RES_START comienza_main COL bloque RES_END .)
    $end            reduce using rule 121 (main -> RES_START comienza_main COL bloque RES_END .)


state 128

    (40) cons_loop_1 -> COMMA . cons_loop
    (39) cons_loop -> . cons cons_loop_1
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 106
    consarray                      shift and go to state 71
    conslist                       shift and go to state 74
    cons_loop                      shift and go to state 162

state 129

    (41) cons_loop_1 -> empty .

    RCURLY          reduce using rule 41 (cons_loop_1 -> empty .)


state 130

    (39) cons_loop -> cons cons_loop_1 .

    RCURLY          reduce using rule 39 (cons_loop -> cons cons_loop_1 .)


state 131

    (37) list1 -> LCURLY cons_loop RCURLY .

    RES_INT         reduce using rule 37 (list1 -> LCURLY cons_loop RCURLY .)
    RES_FLOAT       reduce using rule 37 (list1 -> LCURLY cons_loop RCURLY .)
    RES_DOUBLE      reduce using rule 37 (list1 -> LCURLY cons_loop RCURLY .)
    RES_BOOLEAN     reduce using rule 37 (list1 -> LCURLY cons_loop RCURLY .)
    RES_STRING      reduce using rule 37 (list1 -> LCURLY cons_loop RCURLY .)
    RES_LIST        reduce using rule 37 (list1 -> LCURLY cons_loop RCURLY .)
    RES_ARRAY       reduce using rule 37 (list1 -> LCURLY cons_loop RCURLY .)
    ID              reduce using rule 37 (list1 -> LCURLY cons_loop RCURLY .)
    RPAREN          reduce using rule 37 (list1 -> LCURLY cons_loop RCURLY .)


state 132

    (124) conslist -> ID EQUALS LCURLY . conslist1 RCURLY
    (125) conslist1 -> . cons
    (126) conslist1 -> . cons COMMA conslist1
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 163
    consarray                      shift and go to state 71
    conslist                       shift and go to state 74
    conslist1                      shift and go to state 164

state 133

    (123) consarray -> ID LBRACKET CTE_INT . RBRACKET EQUALS cons

    RBRACKET        shift and go to state 165


state 134

    (42) array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET . array1
    (43) array1 -> . COL LBRACKET array2 RBRACKET
    (44) array1 -> . empty
    (127) empty -> .

    COL             shift and go to state 167
    RES_INT         reduce using rule 127 (empty -> .)
    RES_FLOAT       reduce using rule 127 (empty -> .)
    RES_DOUBLE      reduce using rule 127 (empty -> .)
    RES_BOOLEAN     reduce using rule 127 (empty -> .)
    RES_STRING      reduce using rule 127 (empty -> .)
    RES_LIST        reduce using rule 127 (empty -> .)
    RES_ARRAY       reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)

    array1                         shift and go to state 166
    empty                          shift and go to state 168

state 135

    (82) forexp -> ID . EQUALS cons COL expresion COL ID EQUALS expresion

    EQUALS          shift and go to state 169


state 136

    (81) for -> RES_FOR LPAREN forexp . RPAREN COL bloque

    RPAREN          shift and go to state 170


state 137

    (106) factor -> cons .

    TIMES           reduce using rule 106 (factor -> cons .)
    DIVIDE          reduce using rule 106 (factor -> cons .)
    PLUS            reduce using rule 106 (factor -> cons .)
    MINUS           reduce using rule 106 (factor -> cons .)
    MIN             reduce using rule 106 (factor -> cons .)
    MIN_EQ          reduce using rule 106 (factor -> cons .)
    MAY             reduce using rule 106 (factor -> cons .)
    MAY_EQ          reduce using rule 106 (factor -> cons .)
    DIF             reduce using rule 106 (factor -> cons .)
    EQ_EQ           reduce using rule 106 (factor -> cons .)
    RPAREN          reduce using rule 106 (factor -> cons .)
    COL             reduce using rule 106 (factor -> cons .)
    RES_READ        reduce using rule 106 (factor -> cons .)
    RES_PRINT       reduce using rule 106 (factor -> cons .)
    ID              reduce using rule 106 (factor -> cons .)
    RES_DEF         reduce using rule 106 (factor -> cons .)
    RES_IF          reduce using rule 106 (factor -> cons .)
    RES_SWITCH      reduce using rule 106 (factor -> cons .)
    RES_WHILE       reduce using rule 106 (factor -> cons .)
    RES_FOR         reduce using rule 106 (factor -> cons .)
    RES_START       reduce using rule 106 (factor -> cons .)
    RES_FUNC        reduce using rule 106 (factor -> cons .)
    $end            reduce using rule 106 (factor -> cons .)
    RES_END         reduce using rule 106 (factor -> cons .)
    E_END           reduce using rule 106 (factor -> cons .)
    RES_ELSE        reduce using rule 106 (factor -> cons .)
    RES_CASE        reduce using rule 106 (factor -> cons .)


state 138

    (105) factor -> LPAREN . expresion RPAREN
    (89) expresion -> . exp expresion_1
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    expresion                      shift and go to state 171
    cons                           shift and go to state 137
    exp                            shift and go to state 144
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 139

    (97) exp -> termino . exp1
    (98) exp1 -> . PLUS exp
    (99) exp1 -> . MINUS exp
    (100) exp1 -> . empty
    (127) empty -> .

    PLUS            shift and go to state 173
    MINUS           shift and go to state 174
    MIN             reduce using rule 127 (empty -> .)
    MIN_EQ          reduce using rule 127 (empty -> .)
    MAY             reduce using rule 127 (empty -> .)
    MAY_EQ          reduce using rule 127 (empty -> .)
    DIF             reduce using rule 127 (empty -> .)
    EQ_EQ           reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    RES_READ        reduce using rule 127 (empty -> .)
    RES_PRINT       reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RES_DEF         reduce using rule 127 (empty -> .)
    RES_IF          reduce using rule 127 (empty -> .)
    RES_SWITCH      reduce using rule 127 (empty -> .)
    RES_WHILE       reduce using rule 127 (empty -> .)
    RES_FOR         reduce using rule 127 (empty -> .)
    RES_START       reduce using rule 127 (empty -> .)
    RES_FUNC        reduce using rule 127 (empty -> .)
    $end            reduce using rule 127 (empty -> .)
    RES_END         reduce using rule 127 (empty -> .)
    E_END           reduce using rule 127 (empty -> .)
    RES_ELSE        reduce using rule 127 (empty -> .)
    RES_CASE        reduce using rule 127 (empty -> .)
    COL             reduce using rule 127 (empty -> .)

    exp1                           shift and go to state 172
    empty                          shift and go to state 175

state 140

    (108) factor -> MINUS . cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    conslist                       shift and go to state 74
    consarray                      shift and go to state 71
    cons                           shift and go to state 176

state 141

    (101) termino -> factor . termino1
    (102) termino1 -> . TIMES termino
    (103) termino1 -> . DIVIDE termino
    (104) termino1 -> . empty
    (127) empty -> .

    TIMES           shift and go to state 179
    DIVIDE          shift and go to state 177
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    MIN             reduce using rule 127 (empty -> .)
    MIN_EQ          reduce using rule 127 (empty -> .)
    MAY             reduce using rule 127 (empty -> .)
    MAY_EQ          reduce using rule 127 (empty -> .)
    DIF             reduce using rule 127 (empty -> .)
    EQ_EQ           reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    RES_READ        reduce using rule 127 (empty -> .)
    RES_PRINT       reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RES_DEF         reduce using rule 127 (empty -> .)
    RES_IF          reduce using rule 127 (empty -> .)
    RES_SWITCH      reduce using rule 127 (empty -> .)
    RES_WHILE       reduce using rule 127 (empty -> .)
    RES_FOR         reduce using rule 127 (empty -> .)
    RES_START       reduce using rule 127 (empty -> .)
    RES_FUNC        reduce using rule 127 (empty -> .)
    $end            reduce using rule 127 (empty -> .)
    RES_END         reduce using rule 127 (empty -> .)
    E_END           reduce using rule 127 (empty -> .)
    RES_ELSE        reduce using rule 127 (empty -> .)
    RES_CASE        reduce using rule 127 (empty -> .)
    COL             reduce using rule 127 (empty -> .)

    termino1                       shift and go to state 178
    empty                          shift and go to state 180

state 142

    (107) factor -> PLUS . cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    conslist                       shift and go to state 74
    consarray                      shift and go to state 71
    cons                           shift and go to state 181

state 143

    (83) if -> RES_IF LPAREN expresion . RPAREN COL bloque ifelse

    RPAREN          shift and go to state 182


state 144

    (89) expresion -> exp . expresion_1
    (90) expresion_1 -> . MIN exp
    (91) expresion_1 -> . MIN_EQ exp
    (92) expresion_1 -> . MAY exp
    (93) expresion_1 -> . MAY_EQ exp
    (94) expresion_1 -> . DIF exp
    (95) expresion_1 -> . EQ_EQ exp
    (96) expresion_1 -> . empty
    (127) empty -> .

    MIN             shift and go to state 184
    MIN_EQ          shift and go to state 183
    MAY             shift and go to state 185
    MAY_EQ          shift and go to state 186
    DIF             shift and go to state 189
    EQ_EQ           shift and go to state 187
    RPAREN          reduce using rule 127 (empty -> .)
    COL             reduce using rule 127 (empty -> .)

    empty                          shift and go to state 190
    expresion_1                    shift and go to state 188

state 145

    (68) escritura1 -> CTE_STRING .
    (113) cons -> CTE_STRING .

  ! reduce/reduce conflict for RPAREN resolved using rule 68 (escritura1 -> CTE_STRING .)
    RPAREN          reduce using rule 68 (escritura1 -> CTE_STRING .)
    TIMES           reduce using rule 113 (cons -> CTE_STRING .)
    DIVIDE          reduce using rule 113 (cons -> CTE_STRING .)
    PLUS            reduce using rule 113 (cons -> CTE_STRING .)
    MINUS           reduce using rule 113 (cons -> CTE_STRING .)
    MIN             reduce using rule 113 (cons -> CTE_STRING .)
    MIN_EQ          reduce using rule 113 (cons -> CTE_STRING .)
    MAY             reduce using rule 113 (cons -> CTE_STRING .)
    MAY_EQ          reduce using rule 113 (cons -> CTE_STRING .)
    DIF             reduce using rule 113 (cons -> CTE_STRING .)
    EQ_EQ           reduce using rule 113 (cons -> CTE_STRING .)

  ! RPAREN          [ reduce using rule 113 (cons -> CTE_STRING .) ]


state 146

    (66) escritura -> RES_PRINT LPAREN escritura1 . RPAREN

    RPAREN          shift and go to state 191


state 147

    (67) escritura1 -> expresion .

    RPAREN          reduce using rule 67 (escritura1 -> expresion .)


state 148

    (80) while -> RES_WHILE LPAREN expresion . RPAREN COL bloque

    RPAREN          shift and go to state 192


state 149

    (77) asignarray -> LBRACKET . asignarray1 RBRACKET
    (78) asignarray1 -> . cons
    (79) asignarray1 -> . cons COMMA asignarray1
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 193
    consarray                      shift and go to state 71
    conslist                       shift and go to state 74
    asignarray1                    shift and go to state 194

state 150

    (74) asignlist -> LCURLY . asignlist1 RCURLY
    (75) asignlist1 -> . cons
    (76) asignlist1 -> . cons COMMA asignlist1
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    asignlist1                     shift and go to state 195
    cons                           shift and go to state 196
    consarray                      shift and go to state 71
    conslist                       shift and go to state 74

state 151

    (73) asignacion1 -> asignarray .

    RES_READ        reduce using rule 73 (asignacion1 -> asignarray .)
    RES_PRINT       reduce using rule 73 (asignacion1 -> asignarray .)
    ID              reduce using rule 73 (asignacion1 -> asignarray .)
    RES_DEF         reduce using rule 73 (asignacion1 -> asignarray .)
    RES_IF          reduce using rule 73 (asignacion1 -> asignarray .)
    RES_SWITCH      reduce using rule 73 (asignacion1 -> asignarray .)
    RES_WHILE       reduce using rule 73 (asignacion1 -> asignarray .)
    RES_FOR         reduce using rule 73 (asignacion1 -> asignarray .)
    RES_START       reduce using rule 73 (asignacion1 -> asignarray .)
    RES_FUNC        reduce using rule 73 (asignacion1 -> asignarray .)
    $end            reduce using rule 73 (asignacion1 -> asignarray .)
    RES_END         reduce using rule 73 (asignacion1 -> asignarray .)
    E_END           reduce using rule 73 (asignacion1 -> asignarray .)
    RES_ELSE        reduce using rule 73 (asignacion1 -> asignarray .)
    RES_CASE        reduce using rule 73 (asignacion1 -> asignarray .)


state 152

    (72) asignacion1 -> asignlist .

    RES_READ        reduce using rule 72 (asignacion1 -> asignlist .)
    RES_PRINT       reduce using rule 72 (asignacion1 -> asignlist .)
    ID              reduce using rule 72 (asignacion1 -> asignlist .)
    RES_DEF         reduce using rule 72 (asignacion1 -> asignlist .)
    RES_IF          reduce using rule 72 (asignacion1 -> asignlist .)
    RES_SWITCH      reduce using rule 72 (asignacion1 -> asignlist .)
    RES_WHILE       reduce using rule 72 (asignacion1 -> asignlist .)
    RES_FOR         reduce using rule 72 (asignacion1 -> asignlist .)
    RES_START       reduce using rule 72 (asignacion1 -> asignlist .)
    RES_FUNC        reduce using rule 72 (asignacion1 -> asignlist .)
    $end            reduce using rule 72 (asignacion1 -> asignlist .)
    RES_END         reduce using rule 72 (asignacion1 -> asignlist .)
    E_END           reduce using rule 72 (asignacion1 -> asignlist .)
    RES_ELSE        reduce using rule 72 (asignacion1 -> asignlist .)
    RES_CASE        reduce using rule 72 (asignacion1 -> asignlist .)


state 153

    (71) asignacion1 -> exp .

    RES_READ        reduce using rule 71 (asignacion1 -> exp .)
    RES_PRINT       reduce using rule 71 (asignacion1 -> exp .)
    ID              reduce using rule 71 (asignacion1 -> exp .)
    RES_DEF         reduce using rule 71 (asignacion1 -> exp .)
    RES_IF          reduce using rule 71 (asignacion1 -> exp .)
    RES_SWITCH      reduce using rule 71 (asignacion1 -> exp .)
    RES_WHILE       reduce using rule 71 (asignacion1 -> exp .)
    RES_FOR         reduce using rule 71 (asignacion1 -> exp .)
    RES_START       reduce using rule 71 (asignacion1 -> exp .)
    RES_FUNC        reduce using rule 71 (asignacion1 -> exp .)
    $end            reduce using rule 71 (asignacion1 -> exp .)
    RES_END         reduce using rule 71 (asignacion1 -> exp .)
    E_END           reduce using rule 71 (asignacion1 -> exp .)
    RES_ELSE        reduce using rule 71 (asignacion1 -> exp .)
    RES_CASE        reduce using rule 71 (asignacion1 -> exp .)


state 154

    (70) seen_id_asignacion -> EQUALS asignacion1 .

    RES_READ        reduce using rule 70 (seen_id_asignacion -> EQUALS asignacion1 .)
    RES_PRINT       reduce using rule 70 (seen_id_asignacion -> EQUALS asignacion1 .)
    ID              reduce using rule 70 (seen_id_asignacion -> EQUALS asignacion1 .)
    RES_DEF         reduce using rule 70 (seen_id_asignacion -> EQUALS asignacion1 .)
    RES_IF          reduce using rule 70 (seen_id_asignacion -> EQUALS asignacion1 .)
    RES_SWITCH      reduce using rule 70 (seen_id_asignacion -> EQUALS asignacion1 .)
    RES_WHILE       reduce using rule 70 (seen_id_asignacion -> EQUALS asignacion1 .)
    RES_FOR         reduce using rule 70 (seen_id_asignacion -> EQUALS asignacion1 .)
    RES_START       reduce using rule 70 (seen_id_asignacion -> EQUALS asignacion1 .)
    RES_FUNC        reduce using rule 70 (seen_id_asignacion -> EQUALS asignacion1 .)
    $end            reduce using rule 70 (seen_id_asignacion -> EQUALS asignacion1 .)
    RES_END         reduce using rule 70 (seen_id_asignacion -> EQUALS asignacion1 .)
    E_END           reduce using rule 70 (seen_id_asignacion -> EQUALS asignacion1 .)
    RES_ELSE        reduce using rule 70 (seen_id_asignacion -> EQUALS asignacion1 .)
    RES_CASE        reduce using rule 70 (seen_id_asignacion -> EQUALS asignacion1 .)


state 155

    (62) llamada -> ID LPAREN llamada1 . RPAREN

    RPAREN          shift and go to state 197


state 156

    (64) llamada1 -> empty .

    RPAREN          reduce using rule 64 (llamada1 -> empty .)


state 157

    (63) llamada1 -> expresion .

    RPAREN          reduce using rule 63 (llamada1 -> expresion .)


state 158

    (65) lectura -> RES_READ LPAREN tipo . RPAREN

    RPAREN          shift and go to state 198


state 159

    (86) switch -> RES_SWITCH COL switch2 .

    E_END           reduce using rule 86 (switch -> RES_SWITCH COL switch2 .)


state 160

    (87) switch2 -> RES_CASE . expresion COL bloque switch2
    (89) expresion -> . exp expresion_1
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    expresion                      shift and go to state 199
    cons                           shift and go to state 137
    exp                            shift and go to state 144
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 161

    (88) switch2 -> empty .

    E_END           reduce using rule 88 (switch2 -> empty .)


state 162

    (40) cons_loop_1 -> COMMA cons_loop .

    RCURLY          reduce using rule 40 (cons_loop_1 -> COMMA cons_loop .)


state 163

    (125) conslist1 -> cons .
    (126) conslist1 -> cons . COMMA conslist1

    RCURLY          reduce using rule 125 (conslist1 -> cons .)
    COMMA           shift and go to state 200


state 164

    (124) conslist -> ID EQUALS LCURLY conslist1 . RCURLY

    RCURLY          shift and go to state 201


state 165

    (123) consarray -> ID LBRACKET CTE_INT RBRACKET . EQUALS cons

    EQUALS          shift and go to state 202


state 166

    (42) array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .

    RES_INT         reduce using rule 42 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_FLOAT       reduce using rule 42 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_DOUBLE      reduce using rule 42 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_BOOLEAN     reduce using rule 42 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_STRING      reduce using rule 42 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_LIST        reduce using rule 42 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_ARRAY       reduce using rule 42 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RPAREN          reduce using rule 42 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    ID              reduce using rule 42 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)


state 167

    (43) array1 -> COL . LBRACKET array2 RBRACKET

    LBRACKET        shift and go to state 203


state 168

    (44) array1 -> empty .

    RES_INT         reduce using rule 44 (array1 -> empty .)
    RES_FLOAT       reduce using rule 44 (array1 -> empty .)
    RES_DOUBLE      reduce using rule 44 (array1 -> empty .)
    RES_BOOLEAN     reduce using rule 44 (array1 -> empty .)
    RES_STRING      reduce using rule 44 (array1 -> empty .)
    RES_LIST        reduce using rule 44 (array1 -> empty .)
    RES_ARRAY       reduce using rule 44 (array1 -> empty .)
    ID              reduce using rule 44 (array1 -> empty .)
    RPAREN          reduce using rule 44 (array1 -> empty .)


state 169

    (82) forexp -> ID EQUALS . cons COL expresion COL ID EQUALS expresion
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 204
    consarray                      shift and go to state 71
    conslist                       shift and go to state 74

state 170

    (81) for -> RES_FOR LPAREN forexp RPAREN . COL bloque

    COL             shift and go to state 205


state 171

    (105) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 206


state 172

    (97) exp -> termino exp1 .

    RPAREN          reduce using rule 97 (exp -> termino exp1 .)
    COL             reduce using rule 97 (exp -> termino exp1 .)
    MIN             reduce using rule 97 (exp -> termino exp1 .)
    MIN_EQ          reduce using rule 97 (exp -> termino exp1 .)
    MAY             reduce using rule 97 (exp -> termino exp1 .)
    MAY_EQ          reduce using rule 97 (exp -> termino exp1 .)
    DIF             reduce using rule 97 (exp -> termino exp1 .)
    EQ_EQ           reduce using rule 97 (exp -> termino exp1 .)
    RES_READ        reduce using rule 97 (exp -> termino exp1 .)
    RES_PRINT       reduce using rule 97 (exp -> termino exp1 .)
    ID              reduce using rule 97 (exp -> termino exp1 .)
    RES_DEF         reduce using rule 97 (exp -> termino exp1 .)
    RES_IF          reduce using rule 97 (exp -> termino exp1 .)
    RES_SWITCH      reduce using rule 97 (exp -> termino exp1 .)
    RES_WHILE       reduce using rule 97 (exp -> termino exp1 .)
    RES_FOR         reduce using rule 97 (exp -> termino exp1 .)
    RES_START       reduce using rule 97 (exp -> termino exp1 .)
    RES_FUNC        reduce using rule 97 (exp -> termino exp1 .)
    $end            reduce using rule 97 (exp -> termino exp1 .)
    RES_END         reduce using rule 97 (exp -> termino exp1 .)
    E_END           reduce using rule 97 (exp -> termino exp1 .)
    RES_ELSE        reduce using rule 97 (exp -> termino exp1 .)
    RES_CASE        reduce using rule 97 (exp -> termino exp1 .)


state 173

    (98) exp1 -> PLUS . exp
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 137
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    exp                            shift and go to state 207
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 174

    (99) exp1 -> MINUS . exp
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 137
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    exp                            shift and go to state 208
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 175

    (100) exp1 -> empty .

    MIN             reduce using rule 100 (exp1 -> empty .)
    MIN_EQ          reduce using rule 100 (exp1 -> empty .)
    MAY             reduce using rule 100 (exp1 -> empty .)
    MAY_EQ          reduce using rule 100 (exp1 -> empty .)
    DIF             reduce using rule 100 (exp1 -> empty .)
    EQ_EQ           reduce using rule 100 (exp1 -> empty .)
    RPAREN          reduce using rule 100 (exp1 -> empty .)
    RES_READ        reduce using rule 100 (exp1 -> empty .)
    RES_PRINT       reduce using rule 100 (exp1 -> empty .)
    ID              reduce using rule 100 (exp1 -> empty .)
    RES_DEF         reduce using rule 100 (exp1 -> empty .)
    RES_IF          reduce using rule 100 (exp1 -> empty .)
    RES_SWITCH      reduce using rule 100 (exp1 -> empty .)
    RES_WHILE       reduce using rule 100 (exp1 -> empty .)
    RES_FOR         reduce using rule 100 (exp1 -> empty .)
    RES_START       reduce using rule 100 (exp1 -> empty .)
    RES_FUNC        reduce using rule 100 (exp1 -> empty .)
    $end            reduce using rule 100 (exp1 -> empty .)
    RES_END         reduce using rule 100 (exp1 -> empty .)
    E_END           reduce using rule 100 (exp1 -> empty .)
    RES_ELSE        reduce using rule 100 (exp1 -> empty .)
    RES_CASE        reduce using rule 100 (exp1 -> empty .)
    COL             reduce using rule 100 (exp1 -> empty .)


state 176

    (108) factor -> MINUS cons .

    TIMES           reduce using rule 108 (factor -> MINUS cons .)
    DIVIDE          reduce using rule 108 (factor -> MINUS cons .)
    PLUS            reduce using rule 108 (factor -> MINUS cons .)
    MINUS           reduce using rule 108 (factor -> MINUS cons .)
    MIN             reduce using rule 108 (factor -> MINUS cons .)
    MIN_EQ          reduce using rule 108 (factor -> MINUS cons .)
    MAY             reduce using rule 108 (factor -> MINUS cons .)
    MAY_EQ          reduce using rule 108 (factor -> MINUS cons .)
    DIF             reduce using rule 108 (factor -> MINUS cons .)
    EQ_EQ           reduce using rule 108 (factor -> MINUS cons .)
    RPAREN          reduce using rule 108 (factor -> MINUS cons .)
    COL             reduce using rule 108 (factor -> MINUS cons .)
    RES_READ        reduce using rule 108 (factor -> MINUS cons .)
    RES_PRINT       reduce using rule 108 (factor -> MINUS cons .)
    ID              reduce using rule 108 (factor -> MINUS cons .)
    RES_DEF         reduce using rule 108 (factor -> MINUS cons .)
    RES_IF          reduce using rule 108 (factor -> MINUS cons .)
    RES_SWITCH      reduce using rule 108 (factor -> MINUS cons .)
    RES_WHILE       reduce using rule 108 (factor -> MINUS cons .)
    RES_FOR         reduce using rule 108 (factor -> MINUS cons .)
    RES_START       reduce using rule 108 (factor -> MINUS cons .)
    RES_FUNC        reduce using rule 108 (factor -> MINUS cons .)
    $end            reduce using rule 108 (factor -> MINUS cons .)
    RES_END         reduce using rule 108 (factor -> MINUS cons .)
    E_END           reduce using rule 108 (factor -> MINUS cons .)
    RES_ELSE        reduce using rule 108 (factor -> MINUS cons .)
    RES_CASE        reduce using rule 108 (factor -> MINUS cons .)


state 177

    (103) termino1 -> DIVIDE . termino
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 137
    conslist                       shift and go to state 74
    termino                        shift and go to state 209
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 178

    (101) termino -> factor termino1 .

    PLUS            reduce using rule 101 (termino -> factor termino1 .)
    MINUS           reduce using rule 101 (termino -> factor termino1 .)
    MIN             reduce using rule 101 (termino -> factor termino1 .)
    MIN_EQ          reduce using rule 101 (termino -> factor termino1 .)
    MAY             reduce using rule 101 (termino -> factor termino1 .)
    MAY_EQ          reduce using rule 101 (termino -> factor termino1 .)
    DIF             reduce using rule 101 (termino -> factor termino1 .)
    EQ_EQ           reduce using rule 101 (termino -> factor termino1 .)
    COL             reduce using rule 101 (termino -> factor termino1 .)
    RPAREN          reduce using rule 101 (termino -> factor termino1 .)
    RES_READ        reduce using rule 101 (termino -> factor termino1 .)
    RES_PRINT       reduce using rule 101 (termino -> factor termino1 .)
    ID              reduce using rule 101 (termino -> factor termino1 .)
    RES_DEF         reduce using rule 101 (termino -> factor termino1 .)
    RES_IF          reduce using rule 101 (termino -> factor termino1 .)
    RES_SWITCH      reduce using rule 101 (termino -> factor termino1 .)
    RES_WHILE       reduce using rule 101 (termino -> factor termino1 .)
    RES_FOR         reduce using rule 101 (termino -> factor termino1 .)
    RES_START       reduce using rule 101 (termino -> factor termino1 .)
    RES_FUNC        reduce using rule 101 (termino -> factor termino1 .)
    $end            reduce using rule 101 (termino -> factor termino1 .)
    RES_END         reduce using rule 101 (termino -> factor termino1 .)
    E_END           reduce using rule 101 (termino -> factor termino1 .)
    RES_ELSE        reduce using rule 101 (termino -> factor termino1 .)
    RES_CASE        reduce using rule 101 (termino -> factor termino1 .)


state 179

    (102) termino1 -> TIMES . termino
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 137
    conslist                       shift and go to state 74
    termino                        shift and go to state 210
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 180

    (104) termino1 -> empty .

    PLUS            reduce using rule 104 (termino1 -> empty .)
    MINUS           reduce using rule 104 (termino1 -> empty .)
    MIN             reduce using rule 104 (termino1 -> empty .)
    MIN_EQ          reduce using rule 104 (termino1 -> empty .)
    MAY             reduce using rule 104 (termino1 -> empty .)
    MAY_EQ          reduce using rule 104 (termino1 -> empty .)
    DIF             reduce using rule 104 (termino1 -> empty .)
    EQ_EQ           reduce using rule 104 (termino1 -> empty .)
    RPAREN          reduce using rule 104 (termino1 -> empty .)
    RES_READ        reduce using rule 104 (termino1 -> empty .)
    RES_PRINT       reduce using rule 104 (termino1 -> empty .)
    ID              reduce using rule 104 (termino1 -> empty .)
    RES_DEF         reduce using rule 104 (termino1 -> empty .)
    RES_IF          reduce using rule 104 (termino1 -> empty .)
    RES_SWITCH      reduce using rule 104 (termino1 -> empty .)
    RES_WHILE       reduce using rule 104 (termino1 -> empty .)
    RES_FOR         reduce using rule 104 (termino1 -> empty .)
    RES_START       reduce using rule 104 (termino1 -> empty .)
    RES_FUNC        reduce using rule 104 (termino1 -> empty .)
    $end            reduce using rule 104 (termino1 -> empty .)
    RES_END         reduce using rule 104 (termino1 -> empty .)
    E_END           reduce using rule 104 (termino1 -> empty .)
    RES_ELSE        reduce using rule 104 (termino1 -> empty .)
    RES_CASE        reduce using rule 104 (termino1 -> empty .)
    COL             reduce using rule 104 (termino1 -> empty .)


state 181

    (107) factor -> PLUS cons .

    TIMES           reduce using rule 107 (factor -> PLUS cons .)
    DIVIDE          reduce using rule 107 (factor -> PLUS cons .)
    PLUS            reduce using rule 107 (factor -> PLUS cons .)
    MINUS           reduce using rule 107 (factor -> PLUS cons .)
    MIN             reduce using rule 107 (factor -> PLUS cons .)
    MIN_EQ          reduce using rule 107 (factor -> PLUS cons .)
    MAY             reduce using rule 107 (factor -> PLUS cons .)
    MAY_EQ          reduce using rule 107 (factor -> PLUS cons .)
    DIF             reduce using rule 107 (factor -> PLUS cons .)
    EQ_EQ           reduce using rule 107 (factor -> PLUS cons .)
    RPAREN          reduce using rule 107 (factor -> PLUS cons .)
    COL             reduce using rule 107 (factor -> PLUS cons .)
    RES_READ        reduce using rule 107 (factor -> PLUS cons .)
    RES_PRINT       reduce using rule 107 (factor -> PLUS cons .)
    ID              reduce using rule 107 (factor -> PLUS cons .)
    RES_DEF         reduce using rule 107 (factor -> PLUS cons .)
    RES_IF          reduce using rule 107 (factor -> PLUS cons .)
    RES_SWITCH      reduce using rule 107 (factor -> PLUS cons .)
    RES_WHILE       reduce using rule 107 (factor -> PLUS cons .)
    RES_FOR         reduce using rule 107 (factor -> PLUS cons .)
    RES_START       reduce using rule 107 (factor -> PLUS cons .)
    RES_FUNC        reduce using rule 107 (factor -> PLUS cons .)
    $end            reduce using rule 107 (factor -> PLUS cons .)
    RES_END         reduce using rule 107 (factor -> PLUS cons .)
    E_END           reduce using rule 107 (factor -> PLUS cons .)
    RES_ELSE        reduce using rule 107 (factor -> PLUS cons .)
    RES_CASE        reduce using rule 107 (factor -> PLUS cons .)


state 182

    (83) if -> RES_IF LPAREN expresion RPAREN . COL bloque ifelse

    COL             shift and go to state 211


state 183

    (91) expresion_1 -> MIN_EQ . exp
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 137
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    exp                            shift and go to state 212
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 184

    (90) expresion_1 -> MIN . exp
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 137
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    exp                            shift and go to state 213
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 185

    (92) expresion_1 -> MAY . exp
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 137
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    exp                            shift and go to state 214
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 186

    (93) expresion_1 -> MAY_EQ . exp
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 137
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    exp                            shift and go to state 215
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 187

    (95) expresion_1 -> EQ_EQ . exp
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 137
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    exp                            shift and go to state 216
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 188

    (89) expresion -> exp expresion_1 .

    RPAREN          reduce using rule 89 (expresion -> exp expresion_1 .)
    COL             reduce using rule 89 (expresion -> exp expresion_1 .)


state 189

    (94) expresion_1 -> DIF . exp
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 137
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    exp                            shift and go to state 217
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 190

    (96) expresion_1 -> empty .

    RPAREN          reduce using rule 96 (expresion_1 -> empty .)
    COL             reduce using rule 96 (expresion_1 -> empty .)


state 191

    (66) escritura -> RES_PRINT LPAREN escritura1 RPAREN .

    RES_READ        reduce using rule 66 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_PRINT       reduce using rule 66 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    ID              reduce using rule 66 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_DEF         reduce using rule 66 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_IF          reduce using rule 66 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_SWITCH      reduce using rule 66 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_WHILE       reduce using rule 66 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_FOR         reduce using rule 66 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    E_END           reduce using rule 66 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_END         reduce using rule 66 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_ELSE        reduce using rule 66 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_START       reduce using rule 66 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_FUNC        reduce using rule 66 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    $end            reduce using rule 66 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_CASE        reduce using rule 66 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)


state 192

    (80) while -> RES_WHILE LPAREN expresion RPAREN . COL bloque

    COL             shift and go to state 218


state 193

    (78) asignarray1 -> cons .
    (79) asignarray1 -> cons . COMMA asignarray1

    RBRACKET        reduce using rule 78 (asignarray1 -> cons .)
    COMMA           shift and go to state 219


state 194

    (77) asignarray -> LBRACKET asignarray1 . RBRACKET

    RBRACKET        shift and go to state 220


state 195

    (74) asignlist -> LCURLY asignlist1 . RCURLY

    RCURLY          shift and go to state 221


state 196

    (75) asignlist1 -> cons .
    (76) asignlist1 -> cons . COMMA asignlist1

    RCURLY          reduce using rule 75 (asignlist1 -> cons .)
    COMMA           shift and go to state 222


state 197

    (62) llamada -> ID LPAREN llamada1 RPAREN .

    RES_READ        reduce using rule 62 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_PRINT       reduce using rule 62 (llamada -> ID LPAREN llamada1 RPAREN .)
    ID              reduce using rule 62 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_DEF         reduce using rule 62 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_IF          reduce using rule 62 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_SWITCH      reduce using rule 62 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_WHILE       reduce using rule 62 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_FOR         reduce using rule 62 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_START       reduce using rule 62 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_FUNC        reduce using rule 62 (llamada -> ID LPAREN llamada1 RPAREN .)
    $end            reduce using rule 62 (llamada -> ID LPAREN llamada1 RPAREN .)
    E_END           reduce using rule 62 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_ELSE        reduce using rule 62 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_CASE        reduce using rule 62 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_END         reduce using rule 62 (llamada -> ID LPAREN llamada1 RPAREN .)


state 198

    (65) lectura -> RES_READ LPAREN tipo RPAREN .

    RES_READ        reduce using rule 65 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_PRINT       reduce using rule 65 (lectura -> RES_READ LPAREN tipo RPAREN .)
    ID              reduce using rule 65 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_DEF         reduce using rule 65 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_IF          reduce using rule 65 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_SWITCH      reduce using rule 65 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_WHILE       reduce using rule 65 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_FOR         reduce using rule 65 (lectura -> RES_READ LPAREN tipo RPAREN .)
    E_END           reduce using rule 65 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_START       reduce using rule 65 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_FUNC        reduce using rule 65 (lectura -> RES_READ LPAREN tipo RPAREN .)
    $end            reduce using rule 65 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_END         reduce using rule 65 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_ELSE        reduce using rule 65 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_CASE        reduce using rule 65 (lectura -> RES_READ LPAREN tipo RPAREN .)


state 199

    (87) switch2 -> RES_CASE expresion . COL bloque switch2

    COL             shift and go to state 223


state 200

    (126) conslist1 -> cons COMMA . conslist1
    (125) conslist1 -> . cons
    (126) conslist1 -> . cons COMMA conslist1
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 163
    consarray                      shift and go to state 71
    conslist                       shift and go to state 74
    conslist1                      shift and go to state 224

state 201

    (124) conslist -> ID EQUALS LCURLY conslist1 RCURLY .

    COMMA           reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RCURLY          reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    TIMES           reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    DIVIDE          reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    PLUS            reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MINUS           reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RPAREN          reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    COL             reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MIN             reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MIN_EQ          reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MAY             reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MAY_EQ          reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    DIF             reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    EQ_EQ           reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_READ        reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_PRINT       reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    ID              reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_DEF         reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_IF          reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_SWITCH      reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_WHILE       reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FOR         reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_START       reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FUNC        reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    $end            reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_END         reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    E_END           reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_ELSE        reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_CASE        reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RBRACKET        reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_INT         reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FLOAT       reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_DOUBLE      reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_BOOLEAN     reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_STRING      reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_LIST        reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_ARRAY       reduce using rule 124 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)


state 202

    (123) consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS . cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    conslist                       shift and go to state 74
    consarray                      shift and go to state 71
    cons                           shift and go to state 225

state 203

    (43) array1 -> COL LBRACKET . array2 RBRACKET
    (45) array2 -> . cons
    (46) array2 -> . cons COMMA array2
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 226
    array2                         shift and go to state 227
    consarray                      shift and go to state 71
    conslist                       shift and go to state 74

state 204

    (82) forexp -> ID EQUALS cons . COL expresion COL ID EQUALS expresion

    COL             shift and go to state 228


state 205

    (81) for -> RES_FOR LPAREN forexp RPAREN COL . bloque
    (49) bloque -> . estatutos bloque
    (50) bloque -> . empty
    (51) estatutos -> . condicion E_END
    (52) estatutos -> . ciclo E_END
    (53) estatutos -> . lectura
    (54) estatutos -> . escritura
    (55) estatutos -> . asignacion
    (56) estatutos -> . llamada
    (57) estatutos -> . vars
    (127) empty -> .
    (60) condicion -> . if
    (61) condicion -> . switch
    (58) ciclo -> . while
    (59) ciclo -> . for
    (65) lectura -> . RES_READ LPAREN tipo RPAREN
    (66) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (69) asignacion -> . ID seen_id_asignacion
    (62) llamada -> . ID LPAREN llamada1 RPAREN
    (27) vars -> . RES_DEF COL vars1
    (83) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (86) switch -> . RES_SWITCH COL switch2
    (80) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (81) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

    E_END           reduce using rule 127 (empty -> .)
    RES_READ        shift and go to state 99
    RES_PRINT       shift and go to state 93
    ID              shift and go to state 98
    RES_DEF         shift and go to state 22
    RES_IF          shift and go to state 86
    RES_SWITCH      shift and go to state 101
    RES_WHILE       shift and go to state 97
    RES_FOR         shift and go to state 84

    vars                           shift and go to state 83
    bloque                         shift and go to state 229
    if                             shift and go to state 87
    ciclo                          shift and go to state 88
    switch                         shift and go to state 89
    llamada                        shift and go to state 91
    condicion                      shift and go to state 92
    lectura                        shift and go to state 94
    empty                          shift and go to state 95
    estatutos                      shift and go to state 96
    for                            shift and go to state 90
    asignacion                     shift and go to state 100
    while                          shift and go to state 102
    escritura                      shift and go to state 103

state 206

    (105) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    MIN             reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    MIN_EQ          reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    MAY             reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    MAY_EQ          reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    DIF             reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    EQ_EQ           reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    COL             reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    RES_READ        reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    RES_PRINT       reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    ID              reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    RES_DEF         reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    RES_IF          reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    RES_SWITCH      reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    RES_WHILE       reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    RES_FOR         reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    RES_START       reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    RES_FUNC        reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    $end            reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    RES_END         reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    E_END           reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    RES_ELSE        reduce using rule 105 (factor -> LPAREN expresion RPAREN .)
    RES_CASE        reduce using rule 105 (factor -> LPAREN expresion RPAREN .)


state 207

    (98) exp1 -> PLUS exp .

    MIN             reduce using rule 98 (exp1 -> PLUS exp .)
    MIN_EQ          reduce using rule 98 (exp1 -> PLUS exp .)
    MAY             reduce using rule 98 (exp1 -> PLUS exp .)
    MAY_EQ          reduce using rule 98 (exp1 -> PLUS exp .)
    DIF             reduce using rule 98 (exp1 -> PLUS exp .)
    EQ_EQ           reduce using rule 98 (exp1 -> PLUS exp .)
    RPAREN          reduce using rule 98 (exp1 -> PLUS exp .)
    RES_READ        reduce using rule 98 (exp1 -> PLUS exp .)
    RES_PRINT       reduce using rule 98 (exp1 -> PLUS exp .)
    ID              reduce using rule 98 (exp1 -> PLUS exp .)
    RES_DEF         reduce using rule 98 (exp1 -> PLUS exp .)
    RES_IF          reduce using rule 98 (exp1 -> PLUS exp .)
    RES_SWITCH      reduce using rule 98 (exp1 -> PLUS exp .)
    RES_WHILE       reduce using rule 98 (exp1 -> PLUS exp .)
    RES_FOR         reduce using rule 98 (exp1 -> PLUS exp .)
    RES_START       reduce using rule 98 (exp1 -> PLUS exp .)
    RES_FUNC        reduce using rule 98 (exp1 -> PLUS exp .)
    $end            reduce using rule 98 (exp1 -> PLUS exp .)
    RES_END         reduce using rule 98 (exp1 -> PLUS exp .)
    E_END           reduce using rule 98 (exp1 -> PLUS exp .)
    RES_ELSE        reduce using rule 98 (exp1 -> PLUS exp .)
    RES_CASE        reduce using rule 98 (exp1 -> PLUS exp .)
    COL             reduce using rule 98 (exp1 -> PLUS exp .)


state 208

    (99) exp1 -> MINUS exp .

    MIN             reduce using rule 99 (exp1 -> MINUS exp .)
    MIN_EQ          reduce using rule 99 (exp1 -> MINUS exp .)
    MAY             reduce using rule 99 (exp1 -> MINUS exp .)
    MAY_EQ          reduce using rule 99 (exp1 -> MINUS exp .)
    DIF             reduce using rule 99 (exp1 -> MINUS exp .)
    EQ_EQ           reduce using rule 99 (exp1 -> MINUS exp .)
    RPAREN          reduce using rule 99 (exp1 -> MINUS exp .)
    RES_READ        reduce using rule 99 (exp1 -> MINUS exp .)
    RES_PRINT       reduce using rule 99 (exp1 -> MINUS exp .)
    ID              reduce using rule 99 (exp1 -> MINUS exp .)
    RES_DEF         reduce using rule 99 (exp1 -> MINUS exp .)
    RES_IF          reduce using rule 99 (exp1 -> MINUS exp .)
    RES_SWITCH      reduce using rule 99 (exp1 -> MINUS exp .)
    RES_WHILE       reduce using rule 99 (exp1 -> MINUS exp .)
    RES_FOR         reduce using rule 99 (exp1 -> MINUS exp .)
    RES_START       reduce using rule 99 (exp1 -> MINUS exp .)
    RES_FUNC        reduce using rule 99 (exp1 -> MINUS exp .)
    $end            reduce using rule 99 (exp1 -> MINUS exp .)
    RES_END         reduce using rule 99 (exp1 -> MINUS exp .)
    E_END           reduce using rule 99 (exp1 -> MINUS exp .)
    RES_ELSE        reduce using rule 99 (exp1 -> MINUS exp .)
    RES_CASE        reduce using rule 99 (exp1 -> MINUS exp .)
    COL             reduce using rule 99 (exp1 -> MINUS exp .)


state 209

    (103) termino1 -> DIVIDE termino .

    PLUS            reduce using rule 103 (termino1 -> DIVIDE termino .)
    MINUS           reduce using rule 103 (termino1 -> DIVIDE termino .)
    MIN             reduce using rule 103 (termino1 -> DIVIDE termino .)
    MIN_EQ          reduce using rule 103 (termino1 -> DIVIDE termino .)
    MAY             reduce using rule 103 (termino1 -> DIVIDE termino .)
    MAY_EQ          reduce using rule 103 (termino1 -> DIVIDE termino .)
    DIF             reduce using rule 103 (termino1 -> DIVIDE termino .)
    EQ_EQ           reduce using rule 103 (termino1 -> DIVIDE termino .)
    RPAREN          reduce using rule 103 (termino1 -> DIVIDE termino .)
    RES_READ        reduce using rule 103 (termino1 -> DIVIDE termino .)
    RES_PRINT       reduce using rule 103 (termino1 -> DIVIDE termino .)
    ID              reduce using rule 103 (termino1 -> DIVIDE termino .)
    RES_DEF         reduce using rule 103 (termino1 -> DIVIDE termino .)
    RES_IF          reduce using rule 103 (termino1 -> DIVIDE termino .)
    RES_SWITCH      reduce using rule 103 (termino1 -> DIVIDE termino .)
    RES_WHILE       reduce using rule 103 (termino1 -> DIVIDE termino .)
    RES_FOR         reduce using rule 103 (termino1 -> DIVIDE termino .)
    RES_START       reduce using rule 103 (termino1 -> DIVIDE termino .)
    RES_FUNC        reduce using rule 103 (termino1 -> DIVIDE termino .)
    $end            reduce using rule 103 (termino1 -> DIVIDE termino .)
    RES_END         reduce using rule 103 (termino1 -> DIVIDE termino .)
    E_END           reduce using rule 103 (termino1 -> DIVIDE termino .)
    RES_ELSE        reduce using rule 103 (termino1 -> DIVIDE termino .)
    RES_CASE        reduce using rule 103 (termino1 -> DIVIDE termino .)
    COL             reduce using rule 103 (termino1 -> DIVIDE termino .)


state 210

    (102) termino1 -> TIMES termino .

    PLUS            reduce using rule 102 (termino1 -> TIMES termino .)
    MINUS           reduce using rule 102 (termino1 -> TIMES termino .)
    MIN             reduce using rule 102 (termino1 -> TIMES termino .)
    MIN_EQ          reduce using rule 102 (termino1 -> TIMES termino .)
    MAY             reduce using rule 102 (termino1 -> TIMES termino .)
    MAY_EQ          reduce using rule 102 (termino1 -> TIMES termino .)
    DIF             reduce using rule 102 (termino1 -> TIMES termino .)
    EQ_EQ           reduce using rule 102 (termino1 -> TIMES termino .)
    RPAREN          reduce using rule 102 (termino1 -> TIMES termino .)
    RES_READ        reduce using rule 102 (termino1 -> TIMES termino .)
    RES_PRINT       reduce using rule 102 (termino1 -> TIMES termino .)
    ID              reduce using rule 102 (termino1 -> TIMES termino .)
    RES_DEF         reduce using rule 102 (termino1 -> TIMES termino .)
    RES_IF          reduce using rule 102 (termino1 -> TIMES termino .)
    RES_SWITCH      reduce using rule 102 (termino1 -> TIMES termino .)
    RES_WHILE       reduce using rule 102 (termino1 -> TIMES termino .)
    RES_FOR         reduce using rule 102 (termino1 -> TIMES termino .)
    RES_START       reduce using rule 102 (termino1 -> TIMES termino .)
    RES_FUNC        reduce using rule 102 (termino1 -> TIMES termino .)
    $end            reduce using rule 102 (termino1 -> TIMES termino .)
    RES_END         reduce using rule 102 (termino1 -> TIMES termino .)
    E_END           reduce using rule 102 (termino1 -> TIMES termino .)
    RES_ELSE        reduce using rule 102 (termino1 -> TIMES termino .)
    RES_CASE        reduce using rule 102 (termino1 -> TIMES termino .)
    COL             reduce using rule 102 (termino1 -> TIMES termino .)


state 211

    (83) if -> RES_IF LPAREN expresion RPAREN COL . bloque ifelse
    (49) bloque -> . estatutos bloque
    (50) bloque -> . empty
    (51) estatutos -> . condicion E_END
    (52) estatutos -> . ciclo E_END
    (53) estatutos -> . lectura
    (54) estatutos -> . escritura
    (55) estatutos -> . asignacion
    (56) estatutos -> . llamada
    (57) estatutos -> . vars
    (127) empty -> .
    (60) condicion -> . if
    (61) condicion -> . switch
    (58) ciclo -> . while
    (59) ciclo -> . for
    (65) lectura -> . RES_READ LPAREN tipo RPAREN
    (66) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (69) asignacion -> . ID seen_id_asignacion
    (62) llamada -> . ID LPAREN llamada1 RPAREN
    (27) vars -> . RES_DEF COL vars1
    (83) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (86) switch -> . RES_SWITCH COL switch2
    (80) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (81) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

    RES_ELSE        reduce using rule 127 (empty -> .)
    E_END           reduce using rule 127 (empty -> .)
    RES_READ        shift and go to state 99
    RES_PRINT       shift and go to state 93
    ID              shift and go to state 98
    RES_DEF         shift and go to state 22
    RES_IF          shift and go to state 86
    RES_SWITCH      shift and go to state 101
    RES_WHILE       shift and go to state 97
    RES_FOR         shift and go to state 84

    vars                           shift and go to state 83
    bloque                         shift and go to state 230
    if                             shift and go to state 87
    ciclo                          shift and go to state 88
    switch                         shift and go to state 89
    llamada                        shift and go to state 91
    condicion                      shift and go to state 92
    lectura                        shift and go to state 94
    empty                          shift and go to state 95
    estatutos                      shift and go to state 96
    for                            shift and go to state 90
    asignacion                     shift and go to state 100
    while                          shift and go to state 102
    escritura                      shift and go to state 103

state 212

    (91) expresion_1 -> MIN_EQ exp .

    RPAREN          reduce using rule 91 (expresion_1 -> MIN_EQ exp .)
    COL             reduce using rule 91 (expresion_1 -> MIN_EQ exp .)


state 213

    (90) expresion_1 -> MIN exp .

    RPAREN          reduce using rule 90 (expresion_1 -> MIN exp .)
    COL             reduce using rule 90 (expresion_1 -> MIN exp .)


state 214

    (92) expresion_1 -> MAY exp .

    RPAREN          reduce using rule 92 (expresion_1 -> MAY exp .)
    COL             reduce using rule 92 (expresion_1 -> MAY exp .)


state 215

    (93) expresion_1 -> MAY_EQ exp .

    RPAREN          reduce using rule 93 (expresion_1 -> MAY_EQ exp .)
    COL             reduce using rule 93 (expresion_1 -> MAY_EQ exp .)


state 216

    (95) expresion_1 -> EQ_EQ exp .

    RPAREN          reduce using rule 95 (expresion_1 -> EQ_EQ exp .)
    COL             reduce using rule 95 (expresion_1 -> EQ_EQ exp .)


state 217

    (94) expresion_1 -> DIF exp .

    RPAREN          reduce using rule 94 (expresion_1 -> DIF exp .)
    COL             reduce using rule 94 (expresion_1 -> DIF exp .)


state 218

    (80) while -> RES_WHILE LPAREN expresion RPAREN COL . bloque
    (49) bloque -> . estatutos bloque
    (50) bloque -> . empty
    (51) estatutos -> . condicion E_END
    (52) estatutos -> . ciclo E_END
    (53) estatutos -> . lectura
    (54) estatutos -> . escritura
    (55) estatutos -> . asignacion
    (56) estatutos -> . llamada
    (57) estatutos -> . vars
    (127) empty -> .
    (60) condicion -> . if
    (61) condicion -> . switch
    (58) ciclo -> . while
    (59) ciclo -> . for
    (65) lectura -> . RES_READ LPAREN tipo RPAREN
    (66) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (69) asignacion -> . ID seen_id_asignacion
    (62) llamada -> . ID LPAREN llamada1 RPAREN
    (27) vars -> . RES_DEF COL vars1
    (83) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (86) switch -> . RES_SWITCH COL switch2
    (80) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (81) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

    E_END           reduce using rule 127 (empty -> .)
    RES_READ        shift and go to state 99
    RES_PRINT       shift and go to state 93
    ID              shift and go to state 98
    RES_DEF         shift and go to state 22
    RES_IF          shift and go to state 86
    RES_SWITCH      shift and go to state 101
    RES_WHILE       shift and go to state 97
    RES_FOR         shift and go to state 84

    vars                           shift and go to state 83
    bloque                         shift and go to state 231
    if                             shift and go to state 87
    ciclo                          shift and go to state 88
    switch                         shift and go to state 89
    llamada                        shift and go to state 91
    condicion                      shift and go to state 92
    lectura                        shift and go to state 94
    empty                          shift and go to state 95
    estatutos                      shift and go to state 96
    for                            shift and go to state 90
    asignacion                     shift and go to state 100
    while                          shift and go to state 102
    escritura                      shift and go to state 103

state 219

    (79) asignarray1 -> cons COMMA . asignarray1
    (78) asignarray1 -> . cons
    (79) asignarray1 -> . cons COMMA asignarray1
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 193
    consarray                      shift and go to state 71
    conslist                       shift and go to state 74
    asignarray1                    shift and go to state 232

state 220

    (77) asignarray -> LBRACKET asignarray1 RBRACKET .

    RES_READ        reduce using rule 77 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_PRINT       reduce using rule 77 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    ID              reduce using rule 77 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_DEF         reduce using rule 77 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_IF          reduce using rule 77 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_SWITCH      reduce using rule 77 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_WHILE       reduce using rule 77 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_FOR         reduce using rule 77 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_START       reduce using rule 77 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_FUNC        reduce using rule 77 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    $end            reduce using rule 77 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_END         reduce using rule 77 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    E_END           reduce using rule 77 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_ELSE        reduce using rule 77 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_CASE        reduce using rule 77 (asignarray -> LBRACKET asignarray1 RBRACKET .)


state 221

    (74) asignlist -> LCURLY asignlist1 RCURLY .

    RES_READ        reduce using rule 74 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_PRINT       reduce using rule 74 (asignlist -> LCURLY asignlist1 RCURLY .)
    ID              reduce using rule 74 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_DEF         reduce using rule 74 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_IF          reduce using rule 74 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_SWITCH      reduce using rule 74 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_WHILE       reduce using rule 74 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_FOR         reduce using rule 74 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_START       reduce using rule 74 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_FUNC        reduce using rule 74 (asignlist -> LCURLY asignlist1 RCURLY .)
    $end            reduce using rule 74 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_END         reduce using rule 74 (asignlist -> LCURLY asignlist1 RCURLY .)
    E_END           reduce using rule 74 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_ELSE        reduce using rule 74 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_CASE        reduce using rule 74 (asignlist -> LCURLY asignlist1 RCURLY .)


state 222

    (76) asignlist1 -> cons COMMA . asignlist1
    (75) asignlist1 -> . cons
    (76) asignlist1 -> . cons COMMA asignlist1
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    asignlist1                     shift and go to state 233
    cons                           shift and go to state 196
    consarray                      shift and go to state 71
    conslist                       shift and go to state 74

state 223

    (87) switch2 -> RES_CASE expresion COL . bloque switch2
    (49) bloque -> . estatutos bloque
    (50) bloque -> . empty
    (51) estatutos -> . condicion E_END
    (52) estatutos -> . ciclo E_END
    (53) estatutos -> . lectura
    (54) estatutos -> . escritura
    (55) estatutos -> . asignacion
    (56) estatutos -> . llamada
    (57) estatutos -> . vars
    (127) empty -> .
    (60) condicion -> . if
    (61) condicion -> . switch
    (58) ciclo -> . while
    (59) ciclo -> . for
    (65) lectura -> . RES_READ LPAREN tipo RPAREN
    (66) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (69) asignacion -> . ID seen_id_asignacion
    (62) llamada -> . ID LPAREN llamada1 RPAREN
    (27) vars -> . RES_DEF COL vars1
    (83) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (86) switch -> . RES_SWITCH COL switch2
    (80) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (81) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

    RES_CASE        reduce using rule 127 (empty -> .)
    E_END           reduce using rule 127 (empty -> .)
    RES_READ        shift and go to state 99
    RES_PRINT       shift and go to state 93
    ID              shift and go to state 98
    RES_DEF         shift and go to state 22
    RES_IF          shift and go to state 86
    RES_SWITCH      shift and go to state 101
    RES_WHILE       shift and go to state 97
    RES_FOR         shift and go to state 84

    vars                           shift and go to state 83
    bloque                         shift and go to state 234
    if                             shift and go to state 87
    ciclo                          shift and go to state 88
    switch                         shift and go to state 89
    llamada                        shift and go to state 91
    condicion                      shift and go to state 92
    lectura                        shift and go to state 94
    empty                          shift and go to state 95
    estatutos                      shift and go to state 96
    for                            shift and go to state 90
    asignacion                     shift and go to state 100
    while                          shift and go to state 102
    escritura                      shift and go to state 103

state 224

    (126) conslist1 -> cons COMMA conslist1 .

    RCURLY          reduce using rule 126 (conslist1 -> cons COMMA conslist1 .)


state 225

    (123) consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .

    TIMES           reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    DIVIDE          reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    PLUS            reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MINUS           reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MIN             reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MIN_EQ          reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MAY             reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MAY_EQ          reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    DIF             reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    EQ_EQ           reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RPAREN          reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_READ        reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_PRINT       reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    ID              reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_DEF         reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_IF          reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_SWITCH      reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_WHILE       reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_FOR         reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_START       reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_FUNC        reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    $end            reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_END         reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    E_END           reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_ELSE        reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_CASE        reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    COL             reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    COMMA           reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RBRACKET        reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RCURLY          reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_INT         reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_FLOAT       reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_DOUBLE      reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_BOOLEAN     reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_STRING      reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_LIST        reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_ARRAY       reduce using rule 123 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)


state 226

    (45) array2 -> cons .
    (46) array2 -> cons . COMMA array2

    RBRACKET        reduce using rule 45 (array2 -> cons .)
    COMMA           shift and go to state 235


state 227

    (43) array1 -> COL LBRACKET array2 . RBRACKET

    RBRACKET        shift and go to state 236


state 228

    (82) forexp -> ID EQUALS cons COL . expresion COL ID EQUALS expresion
    (89) expresion -> . exp expresion_1
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    expresion                      shift and go to state 237
    cons                           shift and go to state 137
    exp                            shift and go to state 144
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 229

    (81) for -> RES_FOR LPAREN forexp RPAREN COL bloque .

    E_END           reduce using rule 81 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)


state 230

    (83) if -> RES_IF LPAREN expresion RPAREN COL bloque . ifelse
    (84) ifelse -> . RES_ELSE COL bloque
    (85) ifelse -> . empty
    (127) empty -> .

    RES_ELSE        shift and go to state 238
    E_END           reduce using rule 127 (empty -> .)

    ifelse                         shift and go to state 239
    empty                          shift and go to state 240

state 231

    (80) while -> RES_WHILE LPAREN expresion RPAREN COL bloque .

    E_END           reduce using rule 80 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)


state 232

    (79) asignarray1 -> cons COMMA asignarray1 .

    RBRACKET        reduce using rule 79 (asignarray1 -> cons COMMA asignarray1 .)


state 233

    (76) asignlist1 -> cons COMMA asignlist1 .

    RCURLY          reduce using rule 76 (asignlist1 -> cons COMMA asignlist1 .)


state 234

    (87) switch2 -> RES_CASE expresion COL bloque . switch2
    (87) switch2 -> . RES_CASE expresion COL bloque switch2
    (88) switch2 -> . empty
    (127) empty -> .

    RES_CASE        shift and go to state 160
    E_END           reduce using rule 127 (empty -> .)

    switch2                        shift and go to state 241
    empty                          shift and go to state 161

state 235

    (46) array2 -> cons COMMA . array2
    (45) array2 -> . cons
    (46) array2 -> . cons COMMA array2
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    cons                           shift and go to state 226
    array2                         shift and go to state 242
    consarray                      shift and go to state 71
    conslist                       shift and go to state 74

state 236

    (43) array1 -> COL LBRACKET array2 RBRACKET .

    RES_INT         reduce using rule 43 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_FLOAT       reduce using rule 43 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_DOUBLE      reduce using rule 43 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_BOOLEAN     reduce using rule 43 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_STRING      reduce using rule 43 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_LIST        reduce using rule 43 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_ARRAY       reduce using rule 43 (array1 -> COL LBRACKET array2 RBRACKET .)
    ID              reduce using rule 43 (array1 -> COL LBRACKET array2 RBRACKET .)
    RPAREN          reduce using rule 43 (array1 -> COL LBRACKET array2 RBRACKET .)


state 237

    (82) forexp -> ID EQUALS cons COL expresion . COL ID EQUALS expresion

    COL             shift and go to state 243


state 238

    (84) ifelse -> RES_ELSE . COL bloque

    COL             shift and go to state 244


state 239

    (83) if -> RES_IF LPAREN expresion RPAREN COL bloque ifelse .

    E_END           reduce using rule 83 (if -> RES_IF LPAREN expresion RPAREN COL bloque ifelse .)


state 240

    (85) ifelse -> empty .

    E_END           reduce using rule 85 (ifelse -> empty .)


state 241

    (87) switch2 -> RES_CASE expresion COL bloque switch2 .

    E_END           reduce using rule 87 (switch2 -> RES_CASE expresion COL bloque switch2 .)


state 242

    (46) array2 -> cons COMMA array2 .

    RBRACKET        reduce using rule 46 (array2 -> cons COMMA array2 .)


state 243

    (82) forexp -> ID EQUALS cons COL expresion COL . ID EQUALS expresion

    ID              shift and go to state 245


state 244

    (84) ifelse -> RES_ELSE COL . bloque
    (49) bloque -> . estatutos bloque
    (50) bloque -> . empty
    (51) estatutos -> . condicion E_END
    (52) estatutos -> . ciclo E_END
    (53) estatutos -> . lectura
    (54) estatutos -> . escritura
    (55) estatutos -> . asignacion
    (56) estatutos -> . llamada
    (57) estatutos -> . vars
    (127) empty -> .
    (60) condicion -> . if
    (61) condicion -> . switch
    (58) ciclo -> . while
    (59) ciclo -> . for
    (65) lectura -> . RES_READ LPAREN tipo RPAREN
    (66) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (69) asignacion -> . ID seen_id_asignacion
    (62) llamada -> . ID LPAREN llamada1 RPAREN
    (27) vars -> . RES_DEF COL vars1
    (83) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (86) switch -> . RES_SWITCH COL switch2
    (80) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (81) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

    E_END           reduce using rule 127 (empty -> .)
    RES_READ        shift and go to state 99
    RES_PRINT       shift and go to state 93
    ID              shift and go to state 98
    RES_DEF         shift and go to state 22
    RES_IF          shift and go to state 86
    RES_SWITCH      shift and go to state 101
    RES_WHILE       shift and go to state 97
    RES_FOR         shift and go to state 84

    vars                           shift and go to state 83
    bloque                         shift and go to state 246
    if                             shift and go to state 87
    ciclo                          shift and go to state 88
    switch                         shift and go to state 89
    llamada                        shift and go to state 91
    condicion                      shift and go to state 92
    lectura                        shift and go to state 94
    empty                          shift and go to state 95
    estatutos                      shift and go to state 96
    for                            shift and go to state 90
    asignacion                     shift and go to state 100
    while                          shift and go to state 102
    escritura                      shift and go to state 103

state 245

    (82) forexp -> ID EQUALS cons COL expresion COL ID . EQUALS expresion

    EQUALS          shift and go to state 247


state 246

    (84) ifelse -> RES_ELSE COL bloque .

    E_END           reduce using rule 84 (ifelse -> RES_ELSE COL bloque .)


state 247

    (82) forexp -> ID EQUALS cons COL expresion COL ID EQUALS . expresion
    (89) expresion -> . exp expresion_1
    (97) exp -> . termino exp1
    (101) termino -> . factor termino1
    (105) factor -> . LPAREN expresion RPAREN
    (106) factor -> . cons
    (107) factor -> . PLUS cons
    (108) factor -> . MINUS cons
    (109) cons -> . ID exp_1
    (110) cons -> . CTE_INT exp_2
    (111) cons -> . CTE_FLOAT exp_3
    (112) cons -> . CTE_DOUBLE
    (113) cons -> . CTE_STRING
    (114) cons -> . RES_TRUE
    (115) cons -> . RES_FALSE
    (116) cons -> . consarray
    (117) cons -> . conslist
    (123) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (124) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 138
    PLUS            shift and go to state 142
    MINUS           shift and go to state 140
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 72
    CTE_DOUBLE      shift and go to state 70
    CTE_STRING      shift and go to state 68
    RES_TRUE        shift and go to state 73
    RES_FALSE       shift and go to state 77

    expresion                      shift and go to state 248
    cons                           shift and go to state 137
    exp                            shift and go to state 144
    conslist                       shift and go to state 74
    termino                        shift and go to state 139
    factor                         shift and go to state 141
    consarray                      shift and go to state 71

state 248

    (82) forexp -> ID EQUALS cons COL expresion COL ID EQUALS expresion .

    RPAREN          reduce using rule 82 (forexp -> ID EQUALS cons COL expresion COL ID EQUALS expresion .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 145 resolved using rule (escritura1 -> CTE_STRING)
WARNING: rejected rule (cons -> CTE_STRING) in state 145
