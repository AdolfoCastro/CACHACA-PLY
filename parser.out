Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RES_FUNC
    RES_SET
    RES_DOUBLE
    COMMENT
    RES_OR
    TAB
    RES_ELIF
    STRING
    NEW_LINE
    RES_TRUE
    CTE_DOUBLE
    RES_AND
    EQ_EQ
    RES_FALSE
    NOT

Grammar

Rule 0     S' -> programa
Rule 1     programa -> prototipos1 vars1 modulos1 main modulos1
Rule 2     prototipos1 -> prototipos
Rule 3     prototipos1 -> empty
Rule 4     modulos1 -> modulos
Rule 5     modulos1 -> empty
Rule 6     prototipos -> FUNC dato ID LPAREN tipo ID RPAREN
Rule 7     dato -> RES_INT
Rule 8     dato -> RES_FLOAT
Rule 9     dato -> RES_BOOLEAN
Rule 10    dato -> RES_STRING
Rule 11    tipo -> dato
Rule 12    tipo -> estructura
Rule 13    estructura -> list
Rule 14    estructura -> array
Rule 15    vars -> RES_DEF vars1
Rule 16    vars1 -> estructura
Rule 17    vars1 -> estructura vars1
Rule 18    vars1 -> dato VAR vars2
Rule 19    vars1 -> dato VAR vars2 vars1
Rule 20    vars2 -> EQUALS cons
Rule 21    vars2 -> vars3
Rule 22    vars3 -> COMMA VAR vars3
Rule 23    vars3 -> empty
Rule 24    list -> RES_LIST dato VAR brconsbr
Rule 25    list1 -> LCURLY conscommaa RCURLY
Rule 26    list1 -> empty
Rule 27    list2 -> cons
Rule 28    list2 -> cons COMMA list2
Rule 29    array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1
Rule 30    array1 -> COL LBRACKET array2 RBRACKET
Rule 31    array1 -> empty
Rule 32    array2 -> cons
Rule 33    array2 -> cons COMMA array2
Rule 34    modulos -> prototipos COL bloque
Rule 35    modulos -> prototipos COL
Rule 36    bloque -> estatutos bloque
Rule 37    bloque -> estatutos
Rule 38    bloque -> empty
Rule 39    ciclo -> while
Rule 40    ciclo -> for
Rule 41    estatutos -> condicion
Rule 42    estatutos -> ciclo
Rule 43    estatutos -> lectura
Rule 44    estatutos -> escritura
Rule 45    estatutos -> asignacion
Rule 46    estatutos -> llamadas
Rule 47    estatutos -> vars
Rule 48    condicion -> if
Rule 49    condicion -> switch
Rule 50    llamada -> VAR LPAREN llamada1 RPAREN
Rule 51    llamada1 -> expresion
Rule 52    llamada1 -> expresion COMMA llamada1
Rule 53    lectura -> RES_READ LPAREN tipo RPAREN
Rule 54    escritura -> RES_PRINT LPAREN escritura1 RPAREN
Rule 55    escritura1 -> expresion COMMA escritura1
Rule 56    escritura1 -> CTE_STRING COMMA escritura1
Rule 57    escritura1 -> expresion
Rule 58    escritura1 -> CTE_STRING
Rule 59    asignacion -> VAR EQUALS asignacion1
Rule 60    asignacion1 -> cons
Rule 61    asignacion1 -> VAR
Rule 62    asignacion1 -> expresion
Rule 63    asignacion1 -> asignlist
Rule 64    asignacion1 -> asignarray
Rule 65    asignlist -> LCURLY asignlist1 RCURLY
Rule 66    asignlist1 -> cons
Rule 67    asignlist1 -> cons COMMA asignlist1
Rule 68    asignarray -> LBRACKET asignarray1 RBRACKET
Rule 69    asignarray1 -> cons
Rule 70    asignarray1 -> cons COMMA asignarray1
Rule 71    while -> RES_WHILE LPAREN expresion RPAREN COL bloque
Rule 72    for -> RES_FOR LPAREN forexp RPAREN COL bloque
Rule 73    forexp -> ID EQUALS cons COL ID comparacion ID COL ID EQUALS expresion
Rule 74    forexp -> ID EQUALS cons COL ID comparacion cons COL ID EQUALS expresion
Rule 75    comparacion -> MAY
Rule 76    comparacion -> MAY_EQ
Rule 77    comparacion -> MIN
Rule 78    comparacion -> MIN_EQ
Rule 79    comparacion -> DIF
Rule 80    if -> RES_IF LPAREN expresion RPAREN COL bloque
Rule 81    if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque
Rule 82    switch -> RES_SWITCH COL switch2
Rule 83    switch2 -> RES_CASE expresion COL bloque switch2
Rule 84    switch2 -> empty
Rule 85    expresion -> exp
Rule 86    expresion -> exp MIN zexp
Rule 87    expresion -> exp MIN_EQ zexp
Rule 88    expresion -> exp MAY zexp
Rule 89    expresion -> exp MAY_EQ zexp
Rule 90    expresion -> exp DIF zexp
Rule 91    exp -> termino exp1
Rule 92    exp -> termino
Rule 93    exp1 -> PLUS exp
Rule 94    exp1 -> MINUS exp
Rule 95    termino -> factor termino1
Rule 96    termino -> factor
Rule 97    termino1 -> TIMES termino
Rule 98    termino1 -> DIVIDE termino
Rule 99    factor -> LPAREN expresion RPAREN
Rule 100   factor -> PLUS cons
Rule 101   factor -> MINUS cons
Rule 102   cons -> ID
Rule 103   cons -> CTE_INT
Rule 104   cons -> CTE_FLOAT
Rule 105   cons -> CTE_STRING
Rule 106   cons -> consarray
Rule 107   cons -> conslist
Rule 108   main -> RES_START COL bloque RES_END
Rule 109   consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons
Rule 110   conslist -> ID EQUALS LCURLY conslist1 RCURLY
Rule 111   conslist1 -> cons
Rule 112   conslist1 -> cons COMMA conslist1
Rule 113   empty -> <empty>

Terminals, with rules where they appear

COL                  : 30 34 35 71 72 73 73 74 74 80 81 81 82 83 108
COMMA                : 22 28 33 52 55 56 67 70 112
COMMENT              : 
CTE_DOUBLE           : 
CTE_FLOAT            : 104
CTE_INT              : 29 103 109
CTE_STRING           : 56 58 105
DIF                  : 79 90
DIVIDE               : 98
EQUALS               : 20 59 73 73 74 74 109 110
EQ_EQ                : 
FUNC                 : 6
ID                   : 6 6 73 73 73 73 74 74 74 102 109 110
LBRACKET             : 29 30 68 109
LCURLY               : 25 65 110
LPAREN               : 6 50 53 54 71 72 80 81 99
MAY                  : 75 88
MAY_EQ               : 76 89
MIN                  : 77 86
MINUS                : 94 101
MIN_EQ               : 78 87
NEW_LINE             : 
NOT                  : 
PLUS                 : 93 100
RBRACKET             : 29 30 68 109
RCURLY               : 25 65 110
RES_AND              : 
RES_ARRAY            : 29
RES_BOOLEAN          : 9
RES_CASE             : 83
RES_DEF              : 15
RES_DOUBLE           : 
RES_ELIF             : 
RES_ELSE             : 81
RES_END              : 108
RES_FALSE            : 
RES_FLOAT            : 8
RES_FOR              : 72
RES_FUNC             : 
RES_IF               : 80 81
RES_INT              : 7
RES_LIST             : 24
RES_OR               : 
RES_PRINT            : 54
RES_READ             : 53
RES_SET              : 
RES_START            : 108
RES_STRING           : 10
RES_SWITCH           : 82
RES_TRUE             : 
RES_WHILE            : 71
RPAREN               : 6 50 53 54 71 72 80 81 99
STRING               : 
TAB                  : 
TIMES                : 97
VAR                  : 18 19 22 24 29 50 59 61
brconsbr             : 24
conscommaa           : 25
error                : 
llamadas             : 46
zexp                 : 86 87 88 89 90

Nonterminals, with rules where they appear

array                : 14
array1               : 29
array2               : 30 33
asignacion           : 45
asignacion1          : 59
asignarray           : 64
asignarray1          : 68 70
asignlist            : 63
asignlist1           : 65 67
bloque               : 34 36 71 72 80 81 81 83 108
ciclo                : 42
comparacion          : 73 74
condicion            : 41
cons                 : 20 27 28 32 33 60 66 67 69 70 73 74 74 100 101 109 111 112
consarray            : 106
conslist             : 107
conslist1            : 110 112
dato                 : 6 11 18 19 24 29
empty                : 3 5 23 26 31 38 84
escritura            : 44
escritura1           : 54 55 56
estatutos            : 36 37
estructura           : 12 16 17
exp                  : 85 86 87 88 89 90 93 94
exp1                 : 91
expresion            : 51 52 55 57 62 71 73 74 80 81 83 99
factor               : 95 96
for                  : 40
forexp               : 72
if                   : 48
lectura              : 43
list                 : 13
list1                : 
list2                : 28
llamada              : 
llamada1             : 50 52
main                 : 1
modulos              : 4
modulos1             : 1 1
programa             : 0
prototipos           : 2 34 35
prototipos1          : 1
switch               : 49
switch2              : 82 83
termino              : 91 92 97 98
termino1             : 95
tipo                 : 6 53
vars                 : 47
vars1                : 1 15 17 19
vars2                : 18 19
vars3                : 21 22
while                : 39

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . prototipos1 vars1 modulos1 main modulos1
    (2) prototipos1 -> . prototipos
    (3) prototipos1 -> . empty
    (6) prototipos -> . FUNC dato ID LPAREN tipo ID RPAREN
    (113) empty -> .

    FUNC            shift and go to state 4
    RES_INT         reduce using rule 113 (empty -> .)
    RES_FLOAT       reduce using rule 113 (empty -> .)
    RES_BOOLEAN     reduce using rule 113 (empty -> .)
    RES_STRING      reduce using rule 113 (empty -> .)
    RES_LIST        reduce using rule 113 (empty -> .)
    RES_ARRAY       reduce using rule 113 (empty -> .)

    prototipos                     shift and go to state 1
    prototipos1                    shift and go to state 2
    programa                       shift and go to state 3
    empty                          shift and go to state 5

state 1

    (2) prototipos1 -> prototipos .

    RES_INT         reduce using rule 2 (prototipos1 -> prototipos .)
    RES_FLOAT       reduce using rule 2 (prototipos1 -> prototipos .)
    RES_BOOLEAN     reduce using rule 2 (prototipos1 -> prototipos .)
    RES_STRING      reduce using rule 2 (prototipos1 -> prototipos .)
    RES_LIST        reduce using rule 2 (prototipos1 -> prototipos .)
    RES_ARRAY       reduce using rule 2 (prototipos1 -> prototipos .)


state 2

    (1) programa -> prototipos1 . vars1 modulos1 main modulos1
    (16) vars1 -> . estructura
    (17) vars1 -> . estructura vars1
    (18) vars1 -> . dato VAR vars2
    (19) vars1 -> . dato VAR vars2 vars1
    (13) estructura -> . list
    (14) estructura -> . array
    (7) dato -> . RES_INT
    (8) dato -> . RES_FLOAT
    (9) dato -> . RES_BOOLEAN
    (10) dato -> . RES_STRING
    (24) list -> . RES_LIST dato VAR brconsbr
    (29) array -> . RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 14
    RES_FLOAT       shift and go to state 7
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 9
    RES_LIST        shift and go to state 6
    RES_ARRAY       shift and go to state 8

    list                           shift and go to state 10
    vars1                          shift and go to state 11
    dato                           shift and go to state 13
    estructura                     shift and go to state 15
    array                          shift and go to state 16

state 3

    (0) S' -> programa .



state 4

    (6) prototipos -> FUNC . dato ID LPAREN tipo ID RPAREN
    (7) dato -> . RES_INT
    (8) dato -> . RES_FLOAT
    (9) dato -> . RES_BOOLEAN
    (10) dato -> . RES_STRING

    RES_INT         shift and go to state 14
    RES_FLOAT       shift and go to state 7
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 9

    dato                           shift and go to state 17

state 5

    (3) prototipos1 -> empty .

    RES_INT         reduce using rule 3 (prototipos1 -> empty .)
    RES_FLOAT       reduce using rule 3 (prototipos1 -> empty .)
    RES_BOOLEAN     reduce using rule 3 (prototipos1 -> empty .)
    RES_STRING      reduce using rule 3 (prototipos1 -> empty .)
    RES_LIST        reduce using rule 3 (prototipos1 -> empty .)
    RES_ARRAY       reduce using rule 3 (prototipos1 -> empty .)


state 6

    (24) list -> RES_LIST . dato VAR brconsbr
    (7) dato -> . RES_INT
    (8) dato -> . RES_FLOAT
    (9) dato -> . RES_BOOLEAN
    (10) dato -> . RES_STRING

    RES_INT         shift and go to state 14
    RES_FLOAT       shift and go to state 7
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 9

    dato                           shift and go to state 18

state 7

    (8) dato -> RES_FLOAT .

    RPAREN          reduce using rule 8 (dato -> RES_FLOAT .)
    VAR             reduce using rule 8 (dato -> RES_FLOAT .)
    ID              reduce using rule 8 (dato -> RES_FLOAT .)


state 8

    (29) array -> RES_ARRAY . dato VAR LBRACKET CTE_INT RBRACKET array1
    (7) dato -> . RES_INT
    (8) dato -> . RES_FLOAT
    (9) dato -> . RES_BOOLEAN
    (10) dato -> . RES_STRING

    RES_INT         shift and go to state 14
    RES_FLOAT       shift and go to state 7
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 9

    dato                           shift and go to state 19

state 9

    (10) dato -> RES_STRING .

    RPAREN          reduce using rule 10 (dato -> RES_STRING .)
    VAR             reduce using rule 10 (dato -> RES_STRING .)
    ID              reduce using rule 10 (dato -> RES_STRING .)


state 10

    (13) estructura -> list .

    RES_INT         reduce using rule 13 (estructura -> list .)
    RES_FLOAT       reduce using rule 13 (estructura -> list .)
    RES_BOOLEAN     reduce using rule 13 (estructura -> list .)
    RES_STRING      reduce using rule 13 (estructura -> list .)
    RES_LIST        reduce using rule 13 (estructura -> list .)
    RES_ARRAY       reduce using rule 13 (estructura -> list .)
    FUNC            reduce using rule 13 (estructura -> list .)
    RES_START       reduce using rule 13 (estructura -> list .)
    llamadas        reduce using rule 13 (estructura -> list .)
    RES_READ        reduce using rule 13 (estructura -> list .)
    RES_PRINT       reduce using rule 13 (estructura -> list .)
    VAR             reduce using rule 13 (estructura -> list .)
    RES_DEF         reduce using rule 13 (estructura -> list .)
    RES_IF          reduce using rule 13 (estructura -> list .)
    RES_SWITCH      reduce using rule 13 (estructura -> list .)
    RES_WHILE       reduce using rule 13 (estructura -> list .)
    RES_FOR         reduce using rule 13 (estructura -> list .)
    $end            reduce using rule 13 (estructura -> list .)
    RES_END         reduce using rule 13 (estructura -> list .)
    RES_ELSE        reduce using rule 13 (estructura -> list .)
    RES_CASE        reduce using rule 13 (estructura -> list .)
    ID              reduce using rule 13 (estructura -> list .)
    RPAREN          reduce using rule 13 (estructura -> list .)


state 11

    (1) programa -> prototipos1 vars1 . modulos1 main modulos1
    (4) modulos1 -> . modulos
    (5) modulos1 -> . empty
    (34) modulos -> . prototipos COL bloque
    (35) modulos -> . prototipos COL
    (113) empty -> .
    (6) prototipos -> . FUNC dato ID LPAREN tipo ID RPAREN

    RES_START       reduce using rule 113 (empty -> .)
    FUNC            shift and go to state 4

    prototipos                     shift and go to state 20
    modulos1                       shift and go to state 21
    modulos                        shift and go to state 22
    empty                          shift and go to state 23

state 12

    (9) dato -> RES_BOOLEAN .

    RPAREN          reduce using rule 9 (dato -> RES_BOOLEAN .)
    VAR             reduce using rule 9 (dato -> RES_BOOLEAN .)
    ID              reduce using rule 9 (dato -> RES_BOOLEAN .)


state 13

    (18) vars1 -> dato . VAR vars2
    (19) vars1 -> dato . VAR vars2 vars1

    VAR             shift and go to state 24


state 14

    (7) dato -> RES_INT .

    RPAREN          reduce using rule 7 (dato -> RES_INT .)
    VAR             reduce using rule 7 (dato -> RES_INT .)
    ID              reduce using rule 7 (dato -> RES_INT .)


state 15

    (16) vars1 -> estructura .
    (17) vars1 -> estructura . vars1
    (16) vars1 -> . estructura
    (17) vars1 -> . estructura vars1
    (18) vars1 -> . dato VAR vars2
    (19) vars1 -> . dato VAR vars2 vars1
    (13) estructura -> . list
    (14) estructura -> . array
    (7) dato -> . RES_INT
    (8) dato -> . RES_FLOAT
    (9) dato -> . RES_BOOLEAN
    (10) dato -> . RES_STRING
    (24) list -> . RES_LIST dato VAR brconsbr
    (29) array -> . RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1

    FUNC            reduce using rule 16 (vars1 -> estructura .)
    RES_START       reduce using rule 16 (vars1 -> estructura .)
    llamadas        reduce using rule 16 (vars1 -> estructura .)
    RES_READ        reduce using rule 16 (vars1 -> estructura .)
    RES_PRINT       reduce using rule 16 (vars1 -> estructura .)
    VAR             reduce using rule 16 (vars1 -> estructura .)
    RES_DEF         reduce using rule 16 (vars1 -> estructura .)
    RES_IF          reduce using rule 16 (vars1 -> estructura .)
    RES_SWITCH      reduce using rule 16 (vars1 -> estructura .)
    RES_WHILE       reduce using rule 16 (vars1 -> estructura .)
    RES_FOR         reduce using rule 16 (vars1 -> estructura .)
    $end            reduce using rule 16 (vars1 -> estructura .)
    RES_END         reduce using rule 16 (vars1 -> estructura .)
    RES_ELSE        reduce using rule 16 (vars1 -> estructura .)
    RES_CASE        reduce using rule 16 (vars1 -> estructura .)
    RES_INT         shift and go to state 14
    RES_FLOAT       shift and go to state 7
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 9
    RES_LIST        shift and go to state 6
    RES_ARRAY       shift and go to state 8

    list                           shift and go to state 10
    estructura                     shift and go to state 15
    dato                           shift and go to state 13
    vars1                          shift and go to state 25
    array                          shift and go to state 16

state 16

    (14) estructura -> array .

    RES_INT         reduce using rule 14 (estructura -> array .)
    RES_FLOAT       reduce using rule 14 (estructura -> array .)
    RES_BOOLEAN     reduce using rule 14 (estructura -> array .)
    RES_STRING      reduce using rule 14 (estructura -> array .)
    RES_LIST        reduce using rule 14 (estructura -> array .)
    RES_ARRAY       reduce using rule 14 (estructura -> array .)
    FUNC            reduce using rule 14 (estructura -> array .)
    RES_START       reduce using rule 14 (estructura -> array .)
    llamadas        reduce using rule 14 (estructura -> array .)
    RES_READ        reduce using rule 14 (estructura -> array .)
    RES_PRINT       reduce using rule 14 (estructura -> array .)
    VAR             reduce using rule 14 (estructura -> array .)
    RES_DEF         reduce using rule 14 (estructura -> array .)
    RES_IF          reduce using rule 14 (estructura -> array .)
    RES_SWITCH      reduce using rule 14 (estructura -> array .)
    RES_WHILE       reduce using rule 14 (estructura -> array .)
    RES_FOR         reduce using rule 14 (estructura -> array .)
    $end            reduce using rule 14 (estructura -> array .)
    RES_END         reduce using rule 14 (estructura -> array .)
    RES_ELSE        reduce using rule 14 (estructura -> array .)
    RES_CASE        reduce using rule 14 (estructura -> array .)
    ID              reduce using rule 14 (estructura -> array .)
    RPAREN          reduce using rule 14 (estructura -> array .)


state 17

    (6) prototipos -> FUNC dato . ID LPAREN tipo ID RPAREN

    ID              shift and go to state 26


state 18

    (24) list -> RES_LIST dato . VAR brconsbr

    VAR             shift and go to state 27


state 19

    (29) array -> RES_ARRAY dato . VAR LBRACKET CTE_INT RBRACKET array1

    VAR             shift and go to state 28


state 20

    (34) modulos -> prototipos . COL bloque
    (35) modulos -> prototipos . COL

    COL             shift and go to state 29


state 21

    (1) programa -> prototipos1 vars1 modulos1 . main modulos1
    (108) main -> . RES_START COL bloque RES_END

    RES_START       shift and go to state 30

    main                           shift and go to state 31

state 22

    (4) modulos1 -> modulos .

    RES_START       reduce using rule 4 (modulos1 -> modulos .)
    $end            reduce using rule 4 (modulos1 -> modulos .)


state 23

    (5) modulos1 -> empty .

    RES_START       reduce using rule 5 (modulos1 -> empty .)
    $end            reduce using rule 5 (modulos1 -> empty .)


state 24

    (18) vars1 -> dato VAR . vars2
    (19) vars1 -> dato VAR . vars2 vars1
    (20) vars2 -> . EQUALS cons
    (21) vars2 -> . vars3
    (22) vars3 -> . COMMA VAR vars3
    (23) vars3 -> . empty
    (113) empty -> .

    EQUALS          shift and go to state 32
    COMMA           shift and go to state 35
    RES_INT         reduce using rule 113 (empty -> .)
    RES_FLOAT       reduce using rule 113 (empty -> .)
    RES_BOOLEAN     reduce using rule 113 (empty -> .)
    RES_STRING      reduce using rule 113 (empty -> .)
    RES_LIST        reduce using rule 113 (empty -> .)
    RES_ARRAY       reduce using rule 113 (empty -> .)
    FUNC            reduce using rule 113 (empty -> .)
    RES_START       reduce using rule 113 (empty -> .)
    llamadas        reduce using rule 113 (empty -> .)
    RES_READ        reduce using rule 113 (empty -> .)
    RES_PRINT       reduce using rule 113 (empty -> .)
    VAR             reduce using rule 113 (empty -> .)
    RES_DEF         reduce using rule 113 (empty -> .)
    RES_IF          reduce using rule 113 (empty -> .)
    RES_SWITCH      reduce using rule 113 (empty -> .)
    RES_WHILE       reduce using rule 113 (empty -> .)
    RES_FOR         reduce using rule 113 (empty -> .)
    $end            reduce using rule 113 (empty -> .)
    RES_END         reduce using rule 113 (empty -> .)
    RES_ELSE        reduce using rule 113 (empty -> .)
    RES_CASE        reduce using rule 113 (empty -> .)

    vars3                          shift and go to state 33
    vars2                          shift and go to state 34
    empty                          shift and go to state 36

state 25

    (17) vars1 -> estructura vars1 .

    FUNC            reduce using rule 17 (vars1 -> estructura vars1 .)
    RES_START       reduce using rule 17 (vars1 -> estructura vars1 .)
    llamadas        reduce using rule 17 (vars1 -> estructura vars1 .)
    RES_READ        reduce using rule 17 (vars1 -> estructura vars1 .)
    RES_PRINT       reduce using rule 17 (vars1 -> estructura vars1 .)
    VAR             reduce using rule 17 (vars1 -> estructura vars1 .)
    RES_DEF         reduce using rule 17 (vars1 -> estructura vars1 .)
    RES_IF          reduce using rule 17 (vars1 -> estructura vars1 .)
    RES_SWITCH      reduce using rule 17 (vars1 -> estructura vars1 .)
    RES_WHILE       reduce using rule 17 (vars1 -> estructura vars1 .)
    RES_FOR         reduce using rule 17 (vars1 -> estructura vars1 .)
    $end            reduce using rule 17 (vars1 -> estructura vars1 .)
    RES_END         reduce using rule 17 (vars1 -> estructura vars1 .)
    RES_ELSE        reduce using rule 17 (vars1 -> estructura vars1 .)
    RES_CASE        reduce using rule 17 (vars1 -> estructura vars1 .)


state 26

    (6) prototipos -> FUNC dato ID . LPAREN tipo ID RPAREN

    LPAREN          shift and go to state 37


state 27

    (24) list -> RES_LIST dato VAR . brconsbr

    brconsbr        shift and go to state 38


state 28

    (29) array -> RES_ARRAY dato VAR . LBRACKET CTE_INT RBRACKET array1

    LBRACKET        shift and go to state 39


state 29

    (34) modulos -> prototipos COL . bloque
    (35) modulos -> prototipos COL .
    (36) bloque -> . estatutos bloque
    (37) bloque -> . estatutos
    (38) bloque -> . empty
    (41) estatutos -> . condicion
    (42) estatutos -> . ciclo
    (43) estatutos -> . lectura
    (44) estatutos -> . escritura
    (45) estatutos -> . asignacion
    (46) estatutos -> . llamadas
    (47) estatutos -> . vars
    (113) empty -> .
    (48) condicion -> . if
    (49) condicion -> . switch
    (39) ciclo -> . while
    (40) ciclo -> . for
    (53) lectura -> . RES_READ LPAREN tipo RPAREN
    (54) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (59) asignacion -> . VAR EQUALS asignacion1
    (15) vars -> . RES_DEF vars1
    (80) if -> . RES_IF LPAREN expresion RPAREN COL bloque
    (81) if -> . RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque
    (82) switch -> . RES_SWITCH COL switch2
    (71) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (72) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

  ! reduce/reduce conflict for RES_START resolved using rule 35 (modulos -> prototipos COL .)
  ! reduce/reduce conflict for $end resolved using rule 35 (modulos -> prototipos COL .)
    RES_START       reduce using rule 35 (modulos -> prototipos COL .)
    $end            reduce using rule 35 (modulos -> prototipos COL .)
    llamadas        shift and go to state 42
    RES_READ        shift and go to state 57
    RES_PRINT       shift and go to state 45
    VAR             shift and go to state 56
    RES_DEF         shift and go to state 49
    RES_IF          shift and go to state 44
    RES_SWITCH      shift and go to state 59
    RES_WHILE       shift and go to state 55
    RES_FOR         shift and go to state 41

  ! RES_START       [ reduce using rule 113 (empty -> .) ]
  ! $end            [ reduce using rule 113 (empty -> .) ]

    ciclo                          shift and go to state 46
    asignacion                     shift and go to state 58
    vars                           shift and go to state 40
    while                          shift and go to state 60
    for                            shift and go to state 47
    switch                         shift and go to state 48
    estatutos                      shift and go to state 54
    condicion                      shift and go to state 50
    bloque                         shift and go to state 43
    if                             shift and go to state 51
    lectura                        shift and go to state 52
    empty                          shift and go to state 53
    escritura                      shift and go to state 61

state 30

    (108) main -> RES_START . COL bloque RES_END

    COL             shift and go to state 62


state 31

    (1) programa -> prototipos1 vars1 modulos1 main . modulos1
    (4) modulos1 -> . modulos
    (5) modulos1 -> . empty
    (34) modulos -> . prototipos COL bloque
    (35) modulos -> . prototipos COL
    (113) empty -> .
    (6) prototipos -> . FUNC dato ID LPAREN tipo ID RPAREN

    $end            reduce using rule 113 (empty -> .)
    FUNC            shift and go to state 4

    prototipos                     shift and go to state 20
    modulos1                       shift and go to state 63
    modulos                        shift and go to state 22
    empty                          shift and go to state 23

state 32

    (20) vars2 -> EQUALS . cons
    (102) cons -> . ID
    (103) cons -> . CTE_INT
    (104) cons -> . CTE_FLOAT
    (105) cons -> . CTE_STRING
    (106) cons -> . consarray
    (107) cons -> . conslist
    (109) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 70
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 67
    CTE_STRING      shift and go to state 64

    conslist                       shift and go to state 68
    cons                           shift and go to state 65
    consarray                      shift and go to state 66

state 33

    (21) vars2 -> vars3 .

    RES_INT         reduce using rule 21 (vars2 -> vars3 .)
    RES_FLOAT       reduce using rule 21 (vars2 -> vars3 .)
    RES_BOOLEAN     reduce using rule 21 (vars2 -> vars3 .)
    RES_STRING      reduce using rule 21 (vars2 -> vars3 .)
    RES_LIST        reduce using rule 21 (vars2 -> vars3 .)
    RES_ARRAY       reduce using rule 21 (vars2 -> vars3 .)
    FUNC            reduce using rule 21 (vars2 -> vars3 .)
    RES_START       reduce using rule 21 (vars2 -> vars3 .)
    llamadas        reduce using rule 21 (vars2 -> vars3 .)
    RES_READ        reduce using rule 21 (vars2 -> vars3 .)
    RES_PRINT       reduce using rule 21 (vars2 -> vars3 .)
    VAR             reduce using rule 21 (vars2 -> vars3 .)
    RES_DEF         reduce using rule 21 (vars2 -> vars3 .)
    RES_IF          reduce using rule 21 (vars2 -> vars3 .)
    RES_SWITCH      reduce using rule 21 (vars2 -> vars3 .)
    RES_WHILE       reduce using rule 21 (vars2 -> vars3 .)
    RES_FOR         reduce using rule 21 (vars2 -> vars3 .)
    $end            reduce using rule 21 (vars2 -> vars3 .)
    RES_END         reduce using rule 21 (vars2 -> vars3 .)
    RES_ELSE        reduce using rule 21 (vars2 -> vars3 .)
    RES_CASE        reduce using rule 21 (vars2 -> vars3 .)


state 34

    (18) vars1 -> dato VAR vars2 .
    (19) vars1 -> dato VAR vars2 . vars1
    (16) vars1 -> . estructura
    (17) vars1 -> . estructura vars1
    (18) vars1 -> . dato VAR vars2
    (19) vars1 -> . dato VAR vars2 vars1
    (13) estructura -> . list
    (14) estructura -> . array
    (7) dato -> . RES_INT
    (8) dato -> . RES_FLOAT
    (9) dato -> . RES_BOOLEAN
    (10) dato -> . RES_STRING
    (24) list -> . RES_LIST dato VAR brconsbr
    (29) array -> . RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1

    FUNC            reduce using rule 18 (vars1 -> dato VAR vars2 .)
    RES_START       reduce using rule 18 (vars1 -> dato VAR vars2 .)
    llamadas        reduce using rule 18 (vars1 -> dato VAR vars2 .)
    RES_READ        reduce using rule 18 (vars1 -> dato VAR vars2 .)
    RES_PRINT       reduce using rule 18 (vars1 -> dato VAR vars2 .)
    VAR             reduce using rule 18 (vars1 -> dato VAR vars2 .)
    RES_DEF         reduce using rule 18 (vars1 -> dato VAR vars2 .)
    RES_IF          reduce using rule 18 (vars1 -> dato VAR vars2 .)
    RES_SWITCH      reduce using rule 18 (vars1 -> dato VAR vars2 .)
    RES_WHILE       reduce using rule 18 (vars1 -> dato VAR vars2 .)
    RES_FOR         reduce using rule 18 (vars1 -> dato VAR vars2 .)
    $end            reduce using rule 18 (vars1 -> dato VAR vars2 .)
    RES_END         reduce using rule 18 (vars1 -> dato VAR vars2 .)
    RES_ELSE        reduce using rule 18 (vars1 -> dato VAR vars2 .)
    RES_CASE        reduce using rule 18 (vars1 -> dato VAR vars2 .)
    RES_INT         shift and go to state 14
    RES_FLOAT       shift and go to state 7
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 9
    RES_LIST        shift and go to state 6
    RES_ARRAY       shift and go to state 8

    list                           shift and go to state 10
    estructura                     shift and go to state 15
    dato                           shift and go to state 13
    vars1                          shift and go to state 71
    array                          shift and go to state 16

state 35

    (22) vars3 -> COMMA . VAR vars3

    VAR             shift and go to state 72


state 36

    (23) vars3 -> empty .

    RES_INT         reduce using rule 23 (vars3 -> empty .)
    RES_FLOAT       reduce using rule 23 (vars3 -> empty .)
    RES_BOOLEAN     reduce using rule 23 (vars3 -> empty .)
    RES_STRING      reduce using rule 23 (vars3 -> empty .)
    RES_LIST        reduce using rule 23 (vars3 -> empty .)
    RES_ARRAY       reduce using rule 23 (vars3 -> empty .)
    FUNC            reduce using rule 23 (vars3 -> empty .)
    RES_START       reduce using rule 23 (vars3 -> empty .)
    llamadas        reduce using rule 23 (vars3 -> empty .)
    RES_READ        reduce using rule 23 (vars3 -> empty .)
    RES_PRINT       reduce using rule 23 (vars3 -> empty .)
    VAR             reduce using rule 23 (vars3 -> empty .)
    RES_DEF         reduce using rule 23 (vars3 -> empty .)
    RES_IF          reduce using rule 23 (vars3 -> empty .)
    RES_SWITCH      reduce using rule 23 (vars3 -> empty .)
    RES_WHILE       reduce using rule 23 (vars3 -> empty .)
    RES_FOR         reduce using rule 23 (vars3 -> empty .)
    $end            reduce using rule 23 (vars3 -> empty .)
    RES_END         reduce using rule 23 (vars3 -> empty .)
    RES_ELSE        reduce using rule 23 (vars3 -> empty .)
    RES_CASE        reduce using rule 23 (vars3 -> empty .)


state 37

    (6) prototipos -> FUNC dato ID LPAREN . tipo ID RPAREN
    (11) tipo -> . dato
    (12) tipo -> . estructura
    (7) dato -> . RES_INT
    (8) dato -> . RES_FLOAT
    (9) dato -> . RES_BOOLEAN
    (10) dato -> . RES_STRING
    (13) estructura -> . list
    (14) estructura -> . array
    (24) list -> . RES_LIST dato VAR brconsbr
    (29) array -> . RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 14
    RES_FLOAT       shift and go to state 7
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 9
    RES_LIST        shift and go to state 6
    RES_ARRAY       shift and go to state 8

    tipo                           shift and go to state 73
    list                           shift and go to state 10
    estructura                     shift and go to state 74
    dato                           shift and go to state 75
    array                          shift and go to state 16

state 38

    (24) list -> RES_LIST dato VAR brconsbr .

    RPAREN          reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_INT         reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_FLOAT       reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_BOOLEAN     reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_STRING      reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_LIST        reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_ARRAY       reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    FUNC            reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_START       reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    llamadas        reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_READ        reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_PRINT       reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    VAR             reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_DEF         reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_IF          reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_SWITCH      reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_WHILE       reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_FOR         reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    $end            reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_END         reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_ELSE        reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    RES_CASE        reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)
    ID              reduce using rule 24 (list -> RES_LIST dato VAR brconsbr .)


state 39

    (29) array -> RES_ARRAY dato VAR LBRACKET . CTE_INT RBRACKET array1

    CTE_INT         shift and go to state 76


state 40

    (47) estatutos -> vars .

    llamadas        reduce using rule 47 (estatutos -> vars .)
    RES_READ        reduce using rule 47 (estatutos -> vars .)
    RES_PRINT       reduce using rule 47 (estatutos -> vars .)
    VAR             reduce using rule 47 (estatutos -> vars .)
    RES_DEF         reduce using rule 47 (estatutos -> vars .)
    RES_IF          reduce using rule 47 (estatutos -> vars .)
    RES_SWITCH      reduce using rule 47 (estatutos -> vars .)
    RES_WHILE       reduce using rule 47 (estatutos -> vars .)
    RES_FOR         reduce using rule 47 (estatutos -> vars .)
    RES_START       reduce using rule 47 (estatutos -> vars .)
    $end            reduce using rule 47 (estatutos -> vars .)
    RES_END         reduce using rule 47 (estatutos -> vars .)
    RES_ELSE        reduce using rule 47 (estatutos -> vars .)
    RES_CASE        reduce using rule 47 (estatutos -> vars .)


state 41

    (72) for -> RES_FOR . LPAREN forexp RPAREN COL bloque

    LPAREN          shift and go to state 77


state 42

    (46) estatutos -> llamadas .

    llamadas        reduce using rule 46 (estatutos -> llamadas .)
    RES_READ        reduce using rule 46 (estatutos -> llamadas .)
    RES_PRINT       reduce using rule 46 (estatutos -> llamadas .)
    VAR             reduce using rule 46 (estatutos -> llamadas .)
    RES_DEF         reduce using rule 46 (estatutos -> llamadas .)
    RES_IF          reduce using rule 46 (estatutos -> llamadas .)
    RES_SWITCH      reduce using rule 46 (estatutos -> llamadas .)
    RES_WHILE       reduce using rule 46 (estatutos -> llamadas .)
    RES_FOR         reduce using rule 46 (estatutos -> llamadas .)
    RES_START       reduce using rule 46 (estatutos -> llamadas .)
    $end            reduce using rule 46 (estatutos -> llamadas .)
    RES_END         reduce using rule 46 (estatutos -> llamadas .)
    RES_ELSE        reduce using rule 46 (estatutos -> llamadas .)
    RES_CASE        reduce using rule 46 (estatutos -> llamadas .)


state 43

    (34) modulos -> prototipos COL bloque .

    RES_START       reduce using rule 34 (modulos -> prototipos COL bloque .)
    $end            reduce using rule 34 (modulos -> prototipos COL bloque .)


state 44

    (80) if -> RES_IF . LPAREN expresion RPAREN COL bloque
    (81) if -> RES_IF . LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque

    LPAREN          shift and go to state 78


state 45

    (54) escritura -> RES_PRINT . LPAREN escritura1 RPAREN

    LPAREN          shift and go to state 79


state 46

    (42) estatutos -> ciclo .

    llamadas        reduce using rule 42 (estatutos -> ciclo .)
    RES_READ        reduce using rule 42 (estatutos -> ciclo .)
    RES_PRINT       reduce using rule 42 (estatutos -> ciclo .)
    VAR             reduce using rule 42 (estatutos -> ciclo .)
    RES_DEF         reduce using rule 42 (estatutos -> ciclo .)
    RES_IF          reduce using rule 42 (estatutos -> ciclo .)
    RES_SWITCH      reduce using rule 42 (estatutos -> ciclo .)
    RES_WHILE       reduce using rule 42 (estatutos -> ciclo .)
    RES_FOR         reduce using rule 42 (estatutos -> ciclo .)
    RES_START       reduce using rule 42 (estatutos -> ciclo .)
    $end            reduce using rule 42 (estatutos -> ciclo .)
    RES_END         reduce using rule 42 (estatutos -> ciclo .)
    RES_ELSE        reduce using rule 42 (estatutos -> ciclo .)
    RES_CASE        reduce using rule 42 (estatutos -> ciclo .)


state 47

    (40) ciclo -> for .

    llamadas        reduce using rule 40 (ciclo -> for .)
    RES_READ        reduce using rule 40 (ciclo -> for .)
    RES_PRINT       reduce using rule 40 (ciclo -> for .)
    VAR             reduce using rule 40 (ciclo -> for .)
    RES_DEF         reduce using rule 40 (ciclo -> for .)
    RES_IF          reduce using rule 40 (ciclo -> for .)
    RES_SWITCH      reduce using rule 40 (ciclo -> for .)
    RES_WHILE       reduce using rule 40 (ciclo -> for .)
    RES_FOR         reduce using rule 40 (ciclo -> for .)
    RES_START       reduce using rule 40 (ciclo -> for .)
    $end            reduce using rule 40 (ciclo -> for .)
    RES_END         reduce using rule 40 (ciclo -> for .)
    RES_ELSE        reduce using rule 40 (ciclo -> for .)
    RES_CASE        reduce using rule 40 (ciclo -> for .)


state 48

    (49) condicion -> switch .

    llamadas        reduce using rule 49 (condicion -> switch .)
    RES_READ        reduce using rule 49 (condicion -> switch .)
    RES_PRINT       reduce using rule 49 (condicion -> switch .)
    VAR             reduce using rule 49 (condicion -> switch .)
    RES_DEF         reduce using rule 49 (condicion -> switch .)
    RES_IF          reduce using rule 49 (condicion -> switch .)
    RES_SWITCH      reduce using rule 49 (condicion -> switch .)
    RES_WHILE       reduce using rule 49 (condicion -> switch .)
    RES_FOR         reduce using rule 49 (condicion -> switch .)
    RES_START       reduce using rule 49 (condicion -> switch .)
    $end            reduce using rule 49 (condicion -> switch .)
    RES_END         reduce using rule 49 (condicion -> switch .)
    RES_ELSE        reduce using rule 49 (condicion -> switch .)
    RES_CASE        reduce using rule 49 (condicion -> switch .)


state 49

    (15) vars -> RES_DEF . vars1
    (16) vars1 -> . estructura
    (17) vars1 -> . estructura vars1
    (18) vars1 -> . dato VAR vars2
    (19) vars1 -> . dato VAR vars2 vars1
    (13) estructura -> . list
    (14) estructura -> . array
    (7) dato -> . RES_INT
    (8) dato -> . RES_FLOAT
    (9) dato -> . RES_BOOLEAN
    (10) dato -> . RES_STRING
    (24) list -> . RES_LIST dato VAR brconsbr
    (29) array -> . RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 14
    RES_FLOAT       shift and go to state 7
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 9
    RES_LIST        shift and go to state 6
    RES_ARRAY       shift and go to state 8

    estructura                     shift and go to state 15
    list                           shift and go to state 10
    vars1                          shift and go to state 80
    dato                           shift and go to state 13
    array                          shift and go to state 16

state 50

    (41) estatutos -> condicion .

    llamadas        reduce using rule 41 (estatutos -> condicion .)
    RES_READ        reduce using rule 41 (estatutos -> condicion .)
    RES_PRINT       reduce using rule 41 (estatutos -> condicion .)
    VAR             reduce using rule 41 (estatutos -> condicion .)
    RES_DEF         reduce using rule 41 (estatutos -> condicion .)
    RES_IF          reduce using rule 41 (estatutos -> condicion .)
    RES_SWITCH      reduce using rule 41 (estatutos -> condicion .)
    RES_WHILE       reduce using rule 41 (estatutos -> condicion .)
    RES_FOR         reduce using rule 41 (estatutos -> condicion .)
    RES_START       reduce using rule 41 (estatutos -> condicion .)
    $end            reduce using rule 41 (estatutos -> condicion .)
    RES_END         reduce using rule 41 (estatutos -> condicion .)
    RES_ELSE        reduce using rule 41 (estatutos -> condicion .)
    RES_CASE        reduce using rule 41 (estatutos -> condicion .)


state 51

    (48) condicion -> if .

    llamadas        reduce using rule 48 (condicion -> if .)
    RES_READ        reduce using rule 48 (condicion -> if .)
    RES_PRINT       reduce using rule 48 (condicion -> if .)
    VAR             reduce using rule 48 (condicion -> if .)
    RES_DEF         reduce using rule 48 (condicion -> if .)
    RES_IF          reduce using rule 48 (condicion -> if .)
    RES_SWITCH      reduce using rule 48 (condicion -> if .)
    RES_WHILE       reduce using rule 48 (condicion -> if .)
    RES_FOR         reduce using rule 48 (condicion -> if .)
    RES_START       reduce using rule 48 (condicion -> if .)
    $end            reduce using rule 48 (condicion -> if .)
    RES_END         reduce using rule 48 (condicion -> if .)
    RES_ELSE        reduce using rule 48 (condicion -> if .)
    RES_CASE        reduce using rule 48 (condicion -> if .)


state 52

    (43) estatutos -> lectura .

    llamadas        reduce using rule 43 (estatutos -> lectura .)
    RES_READ        reduce using rule 43 (estatutos -> lectura .)
    RES_PRINT       reduce using rule 43 (estatutos -> lectura .)
    VAR             reduce using rule 43 (estatutos -> lectura .)
    RES_DEF         reduce using rule 43 (estatutos -> lectura .)
    RES_IF          reduce using rule 43 (estatutos -> lectura .)
    RES_SWITCH      reduce using rule 43 (estatutos -> lectura .)
    RES_WHILE       reduce using rule 43 (estatutos -> lectura .)
    RES_FOR         reduce using rule 43 (estatutos -> lectura .)
    RES_START       reduce using rule 43 (estatutos -> lectura .)
    $end            reduce using rule 43 (estatutos -> lectura .)
    RES_END         reduce using rule 43 (estatutos -> lectura .)
    RES_ELSE        reduce using rule 43 (estatutos -> lectura .)
    RES_CASE        reduce using rule 43 (estatutos -> lectura .)


state 53

    (38) bloque -> empty .

    RES_START       reduce using rule 38 (bloque -> empty .)
    $end            reduce using rule 38 (bloque -> empty .)
    llamadas        reduce using rule 38 (bloque -> empty .)
    RES_READ        reduce using rule 38 (bloque -> empty .)
    RES_PRINT       reduce using rule 38 (bloque -> empty .)
    VAR             reduce using rule 38 (bloque -> empty .)
    RES_DEF         reduce using rule 38 (bloque -> empty .)
    RES_IF          reduce using rule 38 (bloque -> empty .)
    RES_SWITCH      reduce using rule 38 (bloque -> empty .)
    RES_WHILE       reduce using rule 38 (bloque -> empty .)
    RES_FOR         reduce using rule 38 (bloque -> empty .)
    RES_END         reduce using rule 38 (bloque -> empty .)
    RES_ELSE        reduce using rule 38 (bloque -> empty .)
    RES_CASE        reduce using rule 38 (bloque -> empty .)


state 54

    (36) bloque -> estatutos . bloque
    (37) bloque -> estatutos .
    (36) bloque -> . estatutos bloque
    (37) bloque -> . estatutos
    (38) bloque -> . empty
    (41) estatutos -> . condicion
    (42) estatutos -> . ciclo
    (43) estatutos -> . lectura
    (44) estatutos -> . escritura
    (45) estatutos -> . asignacion
    (46) estatutos -> . llamadas
    (47) estatutos -> . vars
    (113) empty -> .
    (48) condicion -> . if
    (49) condicion -> . switch
    (39) ciclo -> . while
    (40) ciclo -> . for
    (53) lectura -> . RES_READ LPAREN tipo RPAREN
    (54) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (59) asignacion -> . VAR EQUALS asignacion1
    (15) vars -> . RES_DEF vars1
    (80) if -> . RES_IF LPAREN expresion RPAREN COL bloque
    (81) if -> . RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque
    (82) switch -> . RES_SWITCH COL switch2
    (71) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (72) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

  ! shift/reduce conflict for llamadas resolved as shift
  ! shift/reduce conflict for llamadas resolved as shift
  ! reduce/reduce conflict for RES_READ resolved using rule 37 (bloque -> estatutos .)
  ! reduce/reduce conflict for RES_PRINT resolved using rule 37 (bloque -> estatutos .)
  ! reduce/reduce conflict for VAR resolved using rule 37 (bloque -> estatutos .)
  ! reduce/reduce conflict for RES_DEF resolved using rule 37 (bloque -> estatutos .)
  ! reduce/reduce conflict for RES_IF resolved using rule 37 (bloque -> estatutos .)
  ! reduce/reduce conflict for RES_SWITCH resolved using rule 37 (bloque -> estatutos .)
  ! reduce/reduce conflict for RES_WHILE resolved using rule 37 (bloque -> estatutos .)
  ! reduce/reduce conflict for RES_FOR resolved using rule 37 (bloque -> estatutos .)
  ! reduce/reduce conflict for RES_START resolved using rule 37 (bloque -> estatutos .)
  ! reduce/reduce conflict for $end resolved using rule 37 (bloque -> estatutos .)
  ! reduce/reduce conflict for RES_END resolved using rule 37 (bloque -> estatutos .)
  ! reduce/reduce conflict for RES_ELSE resolved using rule 37 (bloque -> estatutos .)
  ! reduce/reduce conflict for RES_CASE resolved using rule 37 (bloque -> estatutos .)
  ! shift/reduce conflict for RES_READ resolved as shift
  ! shift/reduce conflict for RES_PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for RES_DEF resolved as shift
  ! shift/reduce conflict for RES_IF resolved as shift
  ! shift/reduce conflict for RES_SWITCH resolved as shift
  ! shift/reduce conflict for RES_WHILE resolved as shift
  ! shift/reduce conflict for RES_FOR resolved as shift
    RES_START       reduce using rule 37 (bloque -> estatutos .)
    $end            reduce using rule 37 (bloque -> estatutos .)
    RES_END         reduce using rule 37 (bloque -> estatutos .)
    RES_ELSE        reduce using rule 37 (bloque -> estatutos .)
    RES_CASE        reduce using rule 37 (bloque -> estatutos .)
    llamadas        shift and go to state 42
    RES_READ        shift and go to state 57
    RES_PRINT       shift and go to state 45
    VAR             shift and go to state 56
    RES_DEF         shift and go to state 49
    RES_IF          shift and go to state 44
    RES_SWITCH      shift and go to state 59
    RES_WHILE       shift and go to state 55
    RES_FOR         shift and go to state 41

  ! llamadas        [ reduce using rule 37 (bloque -> estatutos .) ]
  ! RES_READ        [ reduce using rule 37 (bloque -> estatutos .) ]
  ! RES_PRINT       [ reduce using rule 37 (bloque -> estatutos .) ]
  ! VAR             [ reduce using rule 37 (bloque -> estatutos .) ]
  ! RES_DEF         [ reduce using rule 37 (bloque -> estatutos .) ]
  ! RES_IF          [ reduce using rule 37 (bloque -> estatutos .) ]
  ! RES_SWITCH      [ reduce using rule 37 (bloque -> estatutos .) ]
  ! RES_WHILE       [ reduce using rule 37 (bloque -> estatutos .) ]
  ! RES_FOR         [ reduce using rule 37 (bloque -> estatutos .) ]
  ! llamadas        [ reduce using rule 113 (empty -> .) ]
  ! RES_READ        [ reduce using rule 113 (empty -> .) ]
  ! RES_PRINT       [ reduce using rule 113 (empty -> .) ]
  ! VAR             [ reduce using rule 113 (empty -> .) ]
  ! RES_DEF         [ reduce using rule 113 (empty -> .) ]
  ! RES_IF          [ reduce using rule 113 (empty -> .) ]
  ! RES_SWITCH      [ reduce using rule 113 (empty -> .) ]
  ! RES_WHILE       [ reduce using rule 113 (empty -> .) ]
  ! RES_FOR         [ reduce using rule 113 (empty -> .) ]
  ! RES_START       [ reduce using rule 113 (empty -> .) ]
  ! $end            [ reduce using rule 113 (empty -> .) ]
  ! RES_END         [ reduce using rule 113 (empty -> .) ]
  ! RES_ELSE        [ reduce using rule 113 (empty -> .) ]
  ! RES_CASE        [ reduce using rule 113 (empty -> .) ]

    ciclo                          shift and go to state 46
    asignacion                     shift and go to state 58
    vars                           shift and go to state 40
    while                          shift and go to state 60
    for                            shift and go to state 47
    switch                         shift and go to state 48
    estatutos                      shift and go to state 54
    condicion                      shift and go to state 50
    bloque                         shift and go to state 81
    if                             shift and go to state 51
    lectura                        shift and go to state 52
    empty                          shift and go to state 53
    escritura                      shift and go to state 61

state 55

    (71) while -> RES_WHILE . LPAREN expresion RPAREN COL bloque

    LPAREN          shift and go to state 82


state 56

    (59) asignacion -> VAR . EQUALS asignacion1

    EQUALS          shift and go to state 83


state 57

    (53) lectura -> RES_READ . LPAREN tipo RPAREN

    LPAREN          shift and go to state 84


state 58

    (45) estatutos -> asignacion .

    llamadas        reduce using rule 45 (estatutos -> asignacion .)
    RES_READ        reduce using rule 45 (estatutos -> asignacion .)
    RES_PRINT       reduce using rule 45 (estatutos -> asignacion .)
    VAR             reduce using rule 45 (estatutos -> asignacion .)
    RES_DEF         reduce using rule 45 (estatutos -> asignacion .)
    RES_IF          reduce using rule 45 (estatutos -> asignacion .)
    RES_SWITCH      reduce using rule 45 (estatutos -> asignacion .)
    RES_WHILE       reduce using rule 45 (estatutos -> asignacion .)
    RES_FOR         reduce using rule 45 (estatutos -> asignacion .)
    RES_START       reduce using rule 45 (estatutos -> asignacion .)
    $end            reduce using rule 45 (estatutos -> asignacion .)
    RES_END         reduce using rule 45 (estatutos -> asignacion .)
    RES_ELSE        reduce using rule 45 (estatutos -> asignacion .)
    RES_CASE        reduce using rule 45 (estatutos -> asignacion .)


state 59

    (82) switch -> RES_SWITCH . COL switch2

    COL             shift and go to state 85


state 60

    (39) ciclo -> while .

    llamadas        reduce using rule 39 (ciclo -> while .)
    RES_READ        reduce using rule 39 (ciclo -> while .)
    RES_PRINT       reduce using rule 39 (ciclo -> while .)
    VAR             reduce using rule 39 (ciclo -> while .)
    RES_DEF         reduce using rule 39 (ciclo -> while .)
    RES_IF          reduce using rule 39 (ciclo -> while .)
    RES_SWITCH      reduce using rule 39 (ciclo -> while .)
    RES_WHILE       reduce using rule 39 (ciclo -> while .)
    RES_FOR         reduce using rule 39 (ciclo -> while .)
    RES_START       reduce using rule 39 (ciclo -> while .)
    $end            reduce using rule 39 (ciclo -> while .)
    RES_END         reduce using rule 39 (ciclo -> while .)
    RES_ELSE        reduce using rule 39 (ciclo -> while .)
    RES_CASE        reduce using rule 39 (ciclo -> while .)


state 61

    (44) estatutos -> escritura .

    llamadas        reduce using rule 44 (estatutos -> escritura .)
    RES_READ        reduce using rule 44 (estatutos -> escritura .)
    RES_PRINT       reduce using rule 44 (estatutos -> escritura .)
    VAR             reduce using rule 44 (estatutos -> escritura .)
    RES_DEF         reduce using rule 44 (estatutos -> escritura .)
    RES_IF          reduce using rule 44 (estatutos -> escritura .)
    RES_SWITCH      reduce using rule 44 (estatutos -> escritura .)
    RES_WHILE       reduce using rule 44 (estatutos -> escritura .)
    RES_FOR         reduce using rule 44 (estatutos -> escritura .)
    RES_START       reduce using rule 44 (estatutos -> escritura .)
    $end            reduce using rule 44 (estatutos -> escritura .)
    RES_END         reduce using rule 44 (estatutos -> escritura .)
    RES_ELSE        reduce using rule 44 (estatutos -> escritura .)
    RES_CASE        reduce using rule 44 (estatutos -> escritura .)


state 62

    (108) main -> RES_START COL . bloque RES_END
    (36) bloque -> . estatutos bloque
    (37) bloque -> . estatutos
    (38) bloque -> . empty
    (41) estatutos -> . condicion
    (42) estatutos -> . ciclo
    (43) estatutos -> . lectura
    (44) estatutos -> . escritura
    (45) estatutos -> . asignacion
    (46) estatutos -> . llamadas
    (47) estatutos -> . vars
    (113) empty -> .
    (48) condicion -> . if
    (49) condicion -> . switch
    (39) ciclo -> . while
    (40) ciclo -> . for
    (53) lectura -> . RES_READ LPAREN tipo RPAREN
    (54) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (59) asignacion -> . VAR EQUALS asignacion1
    (15) vars -> . RES_DEF vars1
    (80) if -> . RES_IF LPAREN expresion RPAREN COL bloque
    (81) if -> . RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque
    (82) switch -> . RES_SWITCH COL switch2
    (71) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (72) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

    llamadas        shift and go to state 42
    RES_END         reduce using rule 113 (empty -> .)
    RES_READ        shift and go to state 57
    RES_PRINT       shift and go to state 45
    VAR             shift and go to state 56
    RES_DEF         shift and go to state 49
    RES_IF          shift and go to state 44
    RES_SWITCH      shift and go to state 59
    RES_WHILE       shift and go to state 55
    RES_FOR         shift and go to state 41

    ciclo                          shift and go to state 46
    asignacion                     shift and go to state 58
    vars                           shift and go to state 40
    while                          shift and go to state 60
    for                            shift and go to state 47
    switch                         shift and go to state 48
    estatutos                      shift and go to state 54
    condicion                      shift and go to state 50
    bloque                         shift and go to state 86
    if                             shift and go to state 51
    lectura                        shift and go to state 52
    empty                          shift and go to state 53
    escritura                      shift and go to state 61

state 63

    (1) programa -> prototipos1 vars1 modulos1 main modulos1 .

    $end            reduce using rule 1 (programa -> prototipos1 vars1 modulos1 main modulos1 .)


state 64

    (105) cons -> CTE_STRING .

    RES_INT         reduce using rule 105 (cons -> CTE_STRING .)
    RES_FLOAT       reduce using rule 105 (cons -> CTE_STRING .)
    RES_BOOLEAN     reduce using rule 105 (cons -> CTE_STRING .)
    RES_STRING      reduce using rule 105 (cons -> CTE_STRING .)
    RES_LIST        reduce using rule 105 (cons -> CTE_STRING .)
    RES_ARRAY       reduce using rule 105 (cons -> CTE_STRING .)
    FUNC            reduce using rule 105 (cons -> CTE_STRING .)
    RES_START       reduce using rule 105 (cons -> CTE_STRING .)
    llamadas        reduce using rule 105 (cons -> CTE_STRING .)
    RES_READ        reduce using rule 105 (cons -> CTE_STRING .)
    RES_PRINT       reduce using rule 105 (cons -> CTE_STRING .)
    VAR             reduce using rule 105 (cons -> CTE_STRING .)
    RES_DEF         reduce using rule 105 (cons -> CTE_STRING .)
    RES_IF          reduce using rule 105 (cons -> CTE_STRING .)
    RES_SWITCH      reduce using rule 105 (cons -> CTE_STRING .)
    RES_WHILE       reduce using rule 105 (cons -> CTE_STRING .)
    RES_FOR         reduce using rule 105 (cons -> CTE_STRING .)
    $end            reduce using rule 105 (cons -> CTE_STRING .)
    RES_END         reduce using rule 105 (cons -> CTE_STRING .)
    RES_ELSE        reduce using rule 105 (cons -> CTE_STRING .)
    RES_CASE        reduce using rule 105 (cons -> CTE_STRING .)
    TIMES           reduce using rule 105 (cons -> CTE_STRING .)
    DIVIDE          reduce using rule 105 (cons -> CTE_STRING .)
    PLUS            reduce using rule 105 (cons -> CTE_STRING .)
    MINUS           reduce using rule 105 (cons -> CTE_STRING .)
    MIN             reduce using rule 105 (cons -> CTE_STRING .)
    MIN_EQ          reduce using rule 105 (cons -> CTE_STRING .)
    MAY             reduce using rule 105 (cons -> CTE_STRING .)
    MAY_EQ          reduce using rule 105 (cons -> CTE_STRING .)
    DIF             reduce using rule 105 (cons -> CTE_STRING .)
    RPAREN          reduce using rule 105 (cons -> CTE_STRING .)
    COMMA           reduce using rule 105 (cons -> CTE_STRING .)
    COL             reduce using rule 105 (cons -> CTE_STRING .)
    RBRACKET        reduce using rule 105 (cons -> CTE_STRING .)
    RCURLY          reduce using rule 105 (cons -> CTE_STRING .)


state 65

    (20) vars2 -> EQUALS cons .

    RES_INT         reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_FLOAT       reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_BOOLEAN     reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_STRING      reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_LIST        reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_ARRAY       reduce using rule 20 (vars2 -> EQUALS cons .)
    FUNC            reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_START       reduce using rule 20 (vars2 -> EQUALS cons .)
    llamadas        reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_READ        reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_PRINT       reduce using rule 20 (vars2 -> EQUALS cons .)
    VAR             reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_DEF         reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_IF          reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_SWITCH      reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_WHILE       reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_FOR         reduce using rule 20 (vars2 -> EQUALS cons .)
    $end            reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_END         reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_ELSE        reduce using rule 20 (vars2 -> EQUALS cons .)
    RES_CASE        reduce using rule 20 (vars2 -> EQUALS cons .)


state 66

    (106) cons -> consarray .

    RES_INT         reduce using rule 106 (cons -> consarray .)
    RES_FLOAT       reduce using rule 106 (cons -> consarray .)
    RES_BOOLEAN     reduce using rule 106 (cons -> consarray .)
    RES_STRING      reduce using rule 106 (cons -> consarray .)
    RES_LIST        reduce using rule 106 (cons -> consarray .)
    RES_ARRAY       reduce using rule 106 (cons -> consarray .)
    FUNC            reduce using rule 106 (cons -> consarray .)
    RES_START       reduce using rule 106 (cons -> consarray .)
    llamadas        reduce using rule 106 (cons -> consarray .)
    RES_READ        reduce using rule 106 (cons -> consarray .)
    RES_PRINT       reduce using rule 106 (cons -> consarray .)
    VAR             reduce using rule 106 (cons -> consarray .)
    RES_DEF         reduce using rule 106 (cons -> consarray .)
    RES_IF          reduce using rule 106 (cons -> consarray .)
    RES_SWITCH      reduce using rule 106 (cons -> consarray .)
    RES_WHILE       reduce using rule 106 (cons -> consarray .)
    RES_FOR         reduce using rule 106 (cons -> consarray .)
    $end            reduce using rule 106 (cons -> consarray .)
    RES_END         reduce using rule 106 (cons -> consarray .)
    RES_ELSE        reduce using rule 106 (cons -> consarray .)
    RES_CASE        reduce using rule 106 (cons -> consarray .)
    TIMES           reduce using rule 106 (cons -> consarray .)
    DIVIDE          reduce using rule 106 (cons -> consarray .)
    PLUS            reduce using rule 106 (cons -> consarray .)
    MINUS           reduce using rule 106 (cons -> consarray .)
    MIN             reduce using rule 106 (cons -> consarray .)
    MIN_EQ          reduce using rule 106 (cons -> consarray .)
    MAY             reduce using rule 106 (cons -> consarray .)
    MAY_EQ          reduce using rule 106 (cons -> consarray .)
    DIF             reduce using rule 106 (cons -> consarray .)
    RPAREN          reduce using rule 106 (cons -> consarray .)
    COMMA           reduce using rule 106 (cons -> consarray .)
    COL             reduce using rule 106 (cons -> consarray .)
    RBRACKET        reduce using rule 106 (cons -> consarray .)
    RCURLY          reduce using rule 106 (cons -> consarray .)


state 67

    (104) cons -> CTE_FLOAT .

    RES_INT         reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_FLOAT       reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_BOOLEAN     reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_STRING      reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_LIST        reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_ARRAY       reduce using rule 104 (cons -> CTE_FLOAT .)
    FUNC            reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_START       reduce using rule 104 (cons -> CTE_FLOAT .)
    llamadas        reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_READ        reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_PRINT       reduce using rule 104 (cons -> CTE_FLOAT .)
    VAR             reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_DEF         reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_IF          reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_SWITCH      reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_WHILE       reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_FOR         reduce using rule 104 (cons -> CTE_FLOAT .)
    $end            reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_END         reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_ELSE        reduce using rule 104 (cons -> CTE_FLOAT .)
    RES_CASE        reduce using rule 104 (cons -> CTE_FLOAT .)
    TIMES           reduce using rule 104 (cons -> CTE_FLOAT .)
    DIVIDE          reduce using rule 104 (cons -> CTE_FLOAT .)
    PLUS            reduce using rule 104 (cons -> CTE_FLOAT .)
    MINUS           reduce using rule 104 (cons -> CTE_FLOAT .)
    MIN             reduce using rule 104 (cons -> CTE_FLOAT .)
    MIN_EQ          reduce using rule 104 (cons -> CTE_FLOAT .)
    MAY             reduce using rule 104 (cons -> CTE_FLOAT .)
    MAY_EQ          reduce using rule 104 (cons -> CTE_FLOAT .)
    DIF             reduce using rule 104 (cons -> CTE_FLOAT .)
    RPAREN          reduce using rule 104 (cons -> CTE_FLOAT .)
    COMMA           reduce using rule 104 (cons -> CTE_FLOAT .)
    COL             reduce using rule 104 (cons -> CTE_FLOAT .)
    RBRACKET        reduce using rule 104 (cons -> CTE_FLOAT .)
    RCURLY          reduce using rule 104 (cons -> CTE_FLOAT .)


state 68

    (107) cons -> conslist .

    RES_INT         reduce using rule 107 (cons -> conslist .)
    RES_FLOAT       reduce using rule 107 (cons -> conslist .)
    RES_BOOLEAN     reduce using rule 107 (cons -> conslist .)
    RES_STRING      reduce using rule 107 (cons -> conslist .)
    RES_LIST        reduce using rule 107 (cons -> conslist .)
    RES_ARRAY       reduce using rule 107 (cons -> conslist .)
    FUNC            reduce using rule 107 (cons -> conslist .)
    RES_START       reduce using rule 107 (cons -> conslist .)
    llamadas        reduce using rule 107 (cons -> conslist .)
    RES_READ        reduce using rule 107 (cons -> conslist .)
    RES_PRINT       reduce using rule 107 (cons -> conslist .)
    VAR             reduce using rule 107 (cons -> conslist .)
    RES_DEF         reduce using rule 107 (cons -> conslist .)
    RES_IF          reduce using rule 107 (cons -> conslist .)
    RES_SWITCH      reduce using rule 107 (cons -> conslist .)
    RES_WHILE       reduce using rule 107 (cons -> conslist .)
    RES_FOR         reduce using rule 107 (cons -> conslist .)
    $end            reduce using rule 107 (cons -> conslist .)
    RES_END         reduce using rule 107 (cons -> conslist .)
    RES_ELSE        reduce using rule 107 (cons -> conslist .)
    RES_CASE        reduce using rule 107 (cons -> conslist .)
    TIMES           reduce using rule 107 (cons -> conslist .)
    DIVIDE          reduce using rule 107 (cons -> conslist .)
    PLUS            reduce using rule 107 (cons -> conslist .)
    MINUS           reduce using rule 107 (cons -> conslist .)
    MIN             reduce using rule 107 (cons -> conslist .)
    MIN_EQ          reduce using rule 107 (cons -> conslist .)
    MAY             reduce using rule 107 (cons -> conslist .)
    MAY_EQ          reduce using rule 107 (cons -> conslist .)
    DIF             reduce using rule 107 (cons -> conslist .)
    RPAREN          reduce using rule 107 (cons -> conslist .)
    COMMA           reduce using rule 107 (cons -> conslist .)
    COL             reduce using rule 107 (cons -> conslist .)
    RBRACKET        reduce using rule 107 (cons -> conslist .)
    RCURLY          reduce using rule 107 (cons -> conslist .)


state 69

    (103) cons -> CTE_INT .

    RES_INT         reduce using rule 103 (cons -> CTE_INT .)
    RES_FLOAT       reduce using rule 103 (cons -> CTE_INT .)
    RES_BOOLEAN     reduce using rule 103 (cons -> CTE_INT .)
    RES_STRING      reduce using rule 103 (cons -> CTE_INT .)
    RES_LIST        reduce using rule 103 (cons -> CTE_INT .)
    RES_ARRAY       reduce using rule 103 (cons -> CTE_INT .)
    FUNC            reduce using rule 103 (cons -> CTE_INT .)
    RES_START       reduce using rule 103 (cons -> CTE_INT .)
    llamadas        reduce using rule 103 (cons -> CTE_INT .)
    RES_READ        reduce using rule 103 (cons -> CTE_INT .)
    RES_PRINT       reduce using rule 103 (cons -> CTE_INT .)
    VAR             reduce using rule 103 (cons -> CTE_INT .)
    RES_DEF         reduce using rule 103 (cons -> CTE_INT .)
    RES_IF          reduce using rule 103 (cons -> CTE_INT .)
    RES_SWITCH      reduce using rule 103 (cons -> CTE_INT .)
    RES_WHILE       reduce using rule 103 (cons -> CTE_INT .)
    RES_FOR         reduce using rule 103 (cons -> CTE_INT .)
    $end            reduce using rule 103 (cons -> CTE_INT .)
    RES_END         reduce using rule 103 (cons -> CTE_INT .)
    RES_ELSE        reduce using rule 103 (cons -> CTE_INT .)
    RES_CASE        reduce using rule 103 (cons -> CTE_INT .)
    TIMES           reduce using rule 103 (cons -> CTE_INT .)
    DIVIDE          reduce using rule 103 (cons -> CTE_INT .)
    PLUS            reduce using rule 103 (cons -> CTE_INT .)
    MINUS           reduce using rule 103 (cons -> CTE_INT .)
    MIN             reduce using rule 103 (cons -> CTE_INT .)
    MIN_EQ          reduce using rule 103 (cons -> CTE_INT .)
    MAY             reduce using rule 103 (cons -> CTE_INT .)
    MAY_EQ          reduce using rule 103 (cons -> CTE_INT .)
    DIF             reduce using rule 103 (cons -> CTE_INT .)
    RPAREN          reduce using rule 103 (cons -> CTE_INT .)
    COMMA           reduce using rule 103 (cons -> CTE_INT .)
    COL             reduce using rule 103 (cons -> CTE_INT .)
    RBRACKET        reduce using rule 103 (cons -> CTE_INT .)
    RCURLY          reduce using rule 103 (cons -> CTE_INT .)


state 70

    (102) cons -> ID .
    (109) consarray -> ID . LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> ID . EQUALS LCURLY conslist1 RCURLY

    RES_INT         reduce using rule 102 (cons -> ID .)
    RES_FLOAT       reduce using rule 102 (cons -> ID .)
    RES_BOOLEAN     reduce using rule 102 (cons -> ID .)
    RES_STRING      reduce using rule 102 (cons -> ID .)
    RES_LIST        reduce using rule 102 (cons -> ID .)
    RES_ARRAY       reduce using rule 102 (cons -> ID .)
    FUNC            reduce using rule 102 (cons -> ID .)
    RES_START       reduce using rule 102 (cons -> ID .)
    llamadas        reduce using rule 102 (cons -> ID .)
    RES_READ        reduce using rule 102 (cons -> ID .)
    RES_PRINT       reduce using rule 102 (cons -> ID .)
    VAR             reduce using rule 102 (cons -> ID .)
    RES_DEF         reduce using rule 102 (cons -> ID .)
    RES_IF          reduce using rule 102 (cons -> ID .)
    RES_SWITCH      reduce using rule 102 (cons -> ID .)
    RES_WHILE       reduce using rule 102 (cons -> ID .)
    RES_FOR         reduce using rule 102 (cons -> ID .)
    $end            reduce using rule 102 (cons -> ID .)
    RES_END         reduce using rule 102 (cons -> ID .)
    RES_ELSE        reduce using rule 102 (cons -> ID .)
    RES_CASE        reduce using rule 102 (cons -> ID .)
    TIMES           reduce using rule 102 (cons -> ID .)
    DIVIDE          reduce using rule 102 (cons -> ID .)
    PLUS            reduce using rule 102 (cons -> ID .)
    MINUS           reduce using rule 102 (cons -> ID .)
    MIN             reduce using rule 102 (cons -> ID .)
    MIN_EQ          reduce using rule 102 (cons -> ID .)
    MAY             reduce using rule 102 (cons -> ID .)
    MAY_EQ          reduce using rule 102 (cons -> ID .)
    DIF             reduce using rule 102 (cons -> ID .)
    RPAREN          reduce using rule 102 (cons -> ID .)
    COMMA           reduce using rule 102 (cons -> ID .)
    COL             reduce using rule 102 (cons -> ID .)
    RBRACKET        reduce using rule 102 (cons -> ID .)
    RCURLY          reduce using rule 102 (cons -> ID .)
    LBRACKET        shift and go to state 88
    EQUALS          shift and go to state 87


state 71

    (19) vars1 -> dato VAR vars2 vars1 .

    FUNC            reduce using rule 19 (vars1 -> dato VAR vars2 vars1 .)
    RES_START       reduce using rule 19 (vars1 -> dato VAR vars2 vars1 .)
    llamadas        reduce using rule 19 (vars1 -> dato VAR vars2 vars1 .)
    RES_READ        reduce using rule 19 (vars1 -> dato VAR vars2 vars1 .)
    RES_PRINT       reduce using rule 19 (vars1 -> dato VAR vars2 vars1 .)
    VAR             reduce using rule 19 (vars1 -> dato VAR vars2 vars1 .)
    RES_DEF         reduce using rule 19 (vars1 -> dato VAR vars2 vars1 .)
    RES_IF          reduce using rule 19 (vars1 -> dato VAR vars2 vars1 .)
    RES_SWITCH      reduce using rule 19 (vars1 -> dato VAR vars2 vars1 .)
    RES_WHILE       reduce using rule 19 (vars1 -> dato VAR vars2 vars1 .)
    RES_FOR         reduce using rule 19 (vars1 -> dato VAR vars2 vars1 .)
    $end            reduce using rule 19 (vars1 -> dato VAR vars2 vars1 .)
    RES_END         reduce using rule 19 (vars1 -> dato VAR vars2 vars1 .)
    RES_ELSE        reduce using rule 19 (vars1 -> dato VAR vars2 vars1 .)
    RES_CASE        reduce using rule 19 (vars1 -> dato VAR vars2 vars1 .)


state 72

    (22) vars3 -> COMMA VAR . vars3
    (22) vars3 -> . COMMA VAR vars3
    (23) vars3 -> . empty
    (113) empty -> .

    COMMA           shift and go to state 35
    RES_INT         reduce using rule 113 (empty -> .)
    RES_FLOAT       reduce using rule 113 (empty -> .)
    RES_BOOLEAN     reduce using rule 113 (empty -> .)
    RES_STRING      reduce using rule 113 (empty -> .)
    RES_LIST        reduce using rule 113 (empty -> .)
    RES_ARRAY       reduce using rule 113 (empty -> .)
    FUNC            reduce using rule 113 (empty -> .)
    RES_START       reduce using rule 113 (empty -> .)
    llamadas        reduce using rule 113 (empty -> .)
    RES_READ        reduce using rule 113 (empty -> .)
    RES_PRINT       reduce using rule 113 (empty -> .)
    VAR             reduce using rule 113 (empty -> .)
    RES_DEF         reduce using rule 113 (empty -> .)
    RES_IF          reduce using rule 113 (empty -> .)
    RES_SWITCH      reduce using rule 113 (empty -> .)
    RES_WHILE       reduce using rule 113 (empty -> .)
    RES_FOR         reduce using rule 113 (empty -> .)
    $end            reduce using rule 113 (empty -> .)
    RES_END         reduce using rule 113 (empty -> .)
    RES_ELSE        reduce using rule 113 (empty -> .)
    RES_CASE        reduce using rule 113 (empty -> .)

    vars3                          shift and go to state 89
    empty                          shift and go to state 36

state 73

    (6) prototipos -> FUNC dato ID LPAREN tipo . ID RPAREN

    ID              shift and go to state 90


state 74

    (12) tipo -> estructura .

    ID              reduce using rule 12 (tipo -> estructura .)
    RPAREN          reduce using rule 12 (tipo -> estructura .)


state 75

    (11) tipo -> dato .

    ID              reduce using rule 11 (tipo -> dato .)
    RPAREN          reduce using rule 11 (tipo -> dato .)


state 76

    (29) array -> RES_ARRAY dato VAR LBRACKET CTE_INT . RBRACKET array1

    RBRACKET        shift and go to state 91


state 77

    (72) for -> RES_FOR LPAREN . forexp RPAREN COL bloque
    (73) forexp -> . ID EQUALS cons COL ID comparacion ID COL ID EQUALS expresion
    (74) forexp -> . ID EQUALS cons COL ID comparacion cons COL ID EQUALS expresion

    ID              shift and go to state 92

    forexp                         shift and go to state 93

state 78

    (80) if -> RES_IF LPAREN . expresion RPAREN COL bloque
    (81) if -> RES_IF LPAREN . expresion RPAREN COL bloque RES_ELSE COL bloque
    (85) expresion -> . exp
    (86) expresion -> . exp MIN zexp
    (87) expresion -> . exp MIN_EQ zexp
    (88) expresion -> . exp MAY zexp
    (89) expresion -> . exp MAY_EQ zexp
    (90) expresion -> . exp DIF zexp
    (91) exp -> . termino exp1
    (92) exp -> . termino
    (95) termino -> . factor termino1
    (96) termino -> . factor
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . PLUS cons
    (101) factor -> . MINUS cons

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 95
    MINUS           shift and go to state 100

    expresion                      shift and go to state 94
    termino                        shift and go to state 96
    exp                            shift and go to state 99
    factor                         shift and go to state 98

state 79

    (54) escritura -> RES_PRINT LPAREN . escritura1 RPAREN
    (55) escritura1 -> . expresion COMMA escritura1
    (56) escritura1 -> . CTE_STRING COMMA escritura1
    (57) escritura1 -> . expresion
    (58) escritura1 -> . CTE_STRING
    (85) expresion -> . exp
    (86) expresion -> . exp MIN zexp
    (87) expresion -> . exp MIN_EQ zexp
    (88) expresion -> . exp MAY zexp
    (89) expresion -> . exp MAY_EQ zexp
    (90) expresion -> . exp DIF zexp
    (91) exp -> . termino exp1
    (92) exp -> . termino
    (95) termino -> . factor termino1
    (96) termino -> . factor
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . PLUS cons
    (101) factor -> . MINUS cons

    CTE_STRING      shift and go to state 102
    LPAREN          shift and go to state 97
    PLUS            shift and go to state 95
    MINUS           shift and go to state 100

    expresion                      shift and go to state 101
    termino                        shift and go to state 96
    exp                            shift and go to state 99
    factor                         shift and go to state 98
    escritura1                     shift and go to state 103

state 80

    (15) vars -> RES_DEF vars1 .

    llamadas        reduce using rule 15 (vars -> RES_DEF vars1 .)
    RES_READ        reduce using rule 15 (vars -> RES_DEF vars1 .)
    RES_PRINT       reduce using rule 15 (vars -> RES_DEF vars1 .)
    VAR             reduce using rule 15 (vars -> RES_DEF vars1 .)
    RES_DEF         reduce using rule 15 (vars -> RES_DEF vars1 .)
    RES_IF          reduce using rule 15 (vars -> RES_DEF vars1 .)
    RES_SWITCH      reduce using rule 15 (vars -> RES_DEF vars1 .)
    RES_WHILE       reduce using rule 15 (vars -> RES_DEF vars1 .)
    RES_FOR         reduce using rule 15 (vars -> RES_DEF vars1 .)
    RES_START       reduce using rule 15 (vars -> RES_DEF vars1 .)
    $end            reduce using rule 15 (vars -> RES_DEF vars1 .)
    RES_END         reduce using rule 15 (vars -> RES_DEF vars1 .)
    RES_ELSE        reduce using rule 15 (vars -> RES_DEF vars1 .)
    RES_CASE        reduce using rule 15 (vars -> RES_DEF vars1 .)


state 81

    (36) bloque -> estatutos bloque .

    RES_START       reduce using rule 36 (bloque -> estatutos bloque .)
    $end            reduce using rule 36 (bloque -> estatutos bloque .)
    llamadas        reduce using rule 36 (bloque -> estatutos bloque .)
    RES_READ        reduce using rule 36 (bloque -> estatutos bloque .)
    RES_PRINT       reduce using rule 36 (bloque -> estatutos bloque .)
    VAR             reduce using rule 36 (bloque -> estatutos bloque .)
    RES_DEF         reduce using rule 36 (bloque -> estatutos bloque .)
    RES_IF          reduce using rule 36 (bloque -> estatutos bloque .)
    RES_SWITCH      reduce using rule 36 (bloque -> estatutos bloque .)
    RES_WHILE       reduce using rule 36 (bloque -> estatutos bloque .)
    RES_FOR         reduce using rule 36 (bloque -> estatutos bloque .)
    RES_END         reduce using rule 36 (bloque -> estatutos bloque .)
    RES_ELSE        reduce using rule 36 (bloque -> estatutos bloque .)
    RES_CASE        reduce using rule 36 (bloque -> estatutos bloque .)


state 82

    (71) while -> RES_WHILE LPAREN . expresion RPAREN COL bloque
    (85) expresion -> . exp
    (86) expresion -> . exp MIN zexp
    (87) expresion -> . exp MIN_EQ zexp
    (88) expresion -> . exp MAY zexp
    (89) expresion -> . exp MAY_EQ zexp
    (90) expresion -> . exp DIF zexp
    (91) exp -> . termino exp1
    (92) exp -> . termino
    (95) termino -> . factor termino1
    (96) termino -> . factor
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . PLUS cons
    (101) factor -> . MINUS cons

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 95
    MINUS           shift and go to state 100

    expresion                      shift and go to state 104
    termino                        shift and go to state 96
    exp                            shift and go to state 99
    factor                         shift and go to state 98

state 83

    (59) asignacion -> VAR EQUALS . asignacion1
    (60) asignacion1 -> . cons
    (61) asignacion1 -> . VAR
    (62) asignacion1 -> . expresion
    (63) asignacion1 -> . asignlist
    (64) asignacion1 -> . asignarray
    (102) cons -> . ID
    (103) cons -> . CTE_INT
    (104) cons -> . CTE_FLOAT
    (105) cons -> . CTE_STRING
    (106) cons -> . consarray
    (107) cons -> . conslist
    (85) expresion -> . exp
    (86) expresion -> . exp MIN zexp
    (87) expresion -> . exp MIN_EQ zexp
    (88) expresion -> . exp MAY zexp
    (89) expresion -> . exp MAY_EQ zexp
    (90) expresion -> . exp DIF zexp
    (65) asignlist -> . LCURLY asignlist1 RCURLY
    (68) asignarray -> . LBRACKET asignarray1 RBRACKET
    (109) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> . ID EQUALS LCURLY conslist1 RCURLY
    (91) exp -> . termino exp1
    (92) exp -> . termino
    (95) termino -> . factor termino1
    (96) termino -> . factor
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . PLUS cons
    (101) factor -> . MINUS cons

    VAR             shift and go to state 110
    ID              shift and go to state 70
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 67
    CTE_STRING      shift and go to state 64
    LCURLY          shift and go to state 107
    LBRACKET        shift and go to state 106
    LPAREN          shift and go to state 97
    PLUS            shift and go to state 95
    MINUS           shift and go to state 100

    expresion                      shift and go to state 111
    cons                           shift and go to state 105
    factor                         shift and go to state 98
    asignarray                     shift and go to state 108
    consarray                      shift and go to state 66
    conslist                       shift and go to state 68
    termino                        shift and go to state 96
    exp                            shift and go to state 99
    asignlist                      shift and go to state 109
    asignacion1                    shift and go to state 112

state 84

    (53) lectura -> RES_READ LPAREN . tipo RPAREN
    (11) tipo -> . dato
    (12) tipo -> . estructura
    (7) dato -> . RES_INT
    (8) dato -> . RES_FLOAT
    (9) dato -> . RES_BOOLEAN
    (10) dato -> . RES_STRING
    (13) estructura -> . list
    (14) estructura -> . array
    (24) list -> . RES_LIST dato VAR brconsbr
    (29) array -> . RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 14
    RES_FLOAT       shift and go to state 7
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 9
    RES_LIST        shift and go to state 6
    RES_ARRAY       shift and go to state 8

    tipo                           shift and go to state 113
    list                           shift and go to state 10
    estructura                     shift and go to state 74
    dato                           shift and go to state 75
    array                          shift and go to state 16

state 85

    (82) switch -> RES_SWITCH COL . switch2
    (83) switch2 -> . RES_CASE expresion COL bloque switch2
    (84) switch2 -> . empty
    (113) empty -> .

  ! shift/reduce conflict for RES_CASE resolved as shift
    RES_CASE        shift and go to state 115
    llamadas        reduce using rule 113 (empty -> .)
    RES_READ        reduce using rule 113 (empty -> .)
    RES_PRINT       reduce using rule 113 (empty -> .)
    VAR             reduce using rule 113 (empty -> .)
    RES_DEF         reduce using rule 113 (empty -> .)
    RES_IF          reduce using rule 113 (empty -> .)
    RES_SWITCH      reduce using rule 113 (empty -> .)
    RES_WHILE       reduce using rule 113 (empty -> .)
    RES_FOR         reduce using rule 113 (empty -> .)
    RES_START       reduce using rule 113 (empty -> .)
    $end            reduce using rule 113 (empty -> .)
    RES_END         reduce using rule 113 (empty -> .)
    RES_ELSE        reduce using rule 113 (empty -> .)

  ! RES_CASE        [ reduce using rule 113 (empty -> .) ]

    switch2                        shift and go to state 114
    empty                          shift and go to state 116

state 86

    (108) main -> RES_START COL bloque . RES_END

    RES_END         shift and go to state 117


state 87

    (110) conslist -> ID EQUALS . LCURLY conslist1 RCURLY

    LCURLY          shift and go to state 118


state 88

    (109) consarray -> ID LBRACKET . CTE_INT RBRACKET EQUALS cons

    CTE_INT         shift and go to state 119


state 89

    (22) vars3 -> COMMA VAR vars3 .

    RES_INT         reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_FLOAT       reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_BOOLEAN     reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_STRING      reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_LIST        reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_ARRAY       reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    FUNC            reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_START       reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    llamadas        reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_READ        reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_PRINT       reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    VAR             reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_DEF         reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_IF          reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_SWITCH      reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_WHILE       reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_FOR         reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    $end            reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_END         reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_ELSE        reduce using rule 22 (vars3 -> COMMA VAR vars3 .)
    RES_CASE        reduce using rule 22 (vars3 -> COMMA VAR vars3 .)


state 90

    (6) prototipos -> FUNC dato ID LPAREN tipo ID . RPAREN

    RPAREN          shift and go to state 120


state 91

    (29) array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET . array1
    (30) array1 -> . COL LBRACKET array2 RBRACKET
    (31) array1 -> . empty
    (113) empty -> .

    COL             shift and go to state 122
    RES_INT         reduce using rule 113 (empty -> .)
    RES_FLOAT       reduce using rule 113 (empty -> .)
    RES_BOOLEAN     reduce using rule 113 (empty -> .)
    RES_STRING      reduce using rule 113 (empty -> .)
    RES_LIST        reduce using rule 113 (empty -> .)
    RES_ARRAY       reduce using rule 113 (empty -> .)
    FUNC            reduce using rule 113 (empty -> .)
    RES_START       reduce using rule 113 (empty -> .)
    llamadas        reduce using rule 113 (empty -> .)
    RES_READ        reduce using rule 113 (empty -> .)
    RES_PRINT       reduce using rule 113 (empty -> .)
    VAR             reduce using rule 113 (empty -> .)
    RES_DEF         reduce using rule 113 (empty -> .)
    RES_IF          reduce using rule 113 (empty -> .)
    RES_SWITCH      reduce using rule 113 (empty -> .)
    RES_WHILE       reduce using rule 113 (empty -> .)
    RES_FOR         reduce using rule 113 (empty -> .)
    $end            reduce using rule 113 (empty -> .)
    RES_END         reduce using rule 113 (empty -> .)
    RES_ELSE        reduce using rule 113 (empty -> .)
    RES_CASE        reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    RPAREN          reduce using rule 113 (empty -> .)

    array1                         shift and go to state 121
    empty                          shift and go to state 123

state 92

    (73) forexp -> ID . EQUALS cons COL ID comparacion ID COL ID EQUALS expresion
    (74) forexp -> ID . EQUALS cons COL ID comparacion cons COL ID EQUALS expresion

    EQUALS          shift and go to state 124


state 93

    (72) for -> RES_FOR LPAREN forexp . RPAREN COL bloque

    RPAREN          shift and go to state 125


state 94

    (80) if -> RES_IF LPAREN expresion . RPAREN COL bloque
    (81) if -> RES_IF LPAREN expresion . RPAREN COL bloque RES_ELSE COL bloque

    RPAREN          shift and go to state 126


state 95

    (100) factor -> PLUS . cons
    (102) cons -> . ID
    (103) cons -> . CTE_INT
    (104) cons -> . CTE_FLOAT
    (105) cons -> . CTE_STRING
    (106) cons -> . consarray
    (107) cons -> . conslist
    (109) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 70
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 67
    CTE_STRING      shift and go to state 64

    conslist                       shift and go to state 68
    cons                           shift and go to state 127
    consarray                      shift and go to state 66

state 96

    (91) exp -> termino . exp1
    (92) exp -> termino .
    (93) exp1 -> . PLUS exp
    (94) exp1 -> . MINUS exp

    MIN             reduce using rule 92 (exp -> termino .)
    MIN_EQ          reduce using rule 92 (exp -> termino .)
    MAY             reduce using rule 92 (exp -> termino .)
    MAY_EQ          reduce using rule 92 (exp -> termino .)
    DIF             reduce using rule 92 (exp -> termino .)
    RPAREN          reduce using rule 92 (exp -> termino .)
    COMMA           reduce using rule 92 (exp -> termino .)
    llamadas        reduce using rule 92 (exp -> termino .)
    RES_READ        reduce using rule 92 (exp -> termino .)
    RES_PRINT       reduce using rule 92 (exp -> termino .)
    VAR             reduce using rule 92 (exp -> termino .)
    RES_DEF         reduce using rule 92 (exp -> termino .)
    RES_IF          reduce using rule 92 (exp -> termino .)
    RES_SWITCH      reduce using rule 92 (exp -> termino .)
    RES_WHILE       reduce using rule 92 (exp -> termino .)
    RES_FOR         reduce using rule 92 (exp -> termino .)
    RES_START       reduce using rule 92 (exp -> termino .)
    $end            reduce using rule 92 (exp -> termino .)
    RES_END         reduce using rule 92 (exp -> termino .)
    RES_ELSE        reduce using rule 92 (exp -> termino .)
    RES_CASE        reduce using rule 92 (exp -> termino .)
    COL             reduce using rule 92 (exp -> termino .)
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130

    exp1                           shift and go to state 128

state 97

    (99) factor -> LPAREN . expresion RPAREN
    (85) expresion -> . exp
    (86) expresion -> . exp MIN zexp
    (87) expresion -> . exp MIN_EQ zexp
    (88) expresion -> . exp MAY zexp
    (89) expresion -> . exp MAY_EQ zexp
    (90) expresion -> . exp DIF zexp
    (91) exp -> . termino exp1
    (92) exp -> . termino
    (95) termino -> . factor termino1
    (96) termino -> . factor
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . PLUS cons
    (101) factor -> . MINUS cons

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 95
    MINUS           shift and go to state 100

    expresion                      shift and go to state 131
    termino                        shift and go to state 96
    exp                            shift and go to state 99
    factor                         shift and go to state 98

state 98

    (95) termino -> factor . termino1
    (96) termino -> factor .
    (97) termino1 -> . TIMES termino
    (98) termino1 -> . DIVIDE termino

    PLUS            reduce using rule 96 (termino -> factor .)
    MINUS           reduce using rule 96 (termino -> factor .)
    MIN             reduce using rule 96 (termino -> factor .)
    MIN_EQ          reduce using rule 96 (termino -> factor .)
    MAY             reduce using rule 96 (termino -> factor .)
    MAY_EQ          reduce using rule 96 (termino -> factor .)
    DIF             reduce using rule 96 (termino -> factor .)
    COMMA           reduce using rule 96 (termino -> factor .)
    RPAREN          reduce using rule 96 (termino -> factor .)
    llamadas        reduce using rule 96 (termino -> factor .)
    RES_READ        reduce using rule 96 (termino -> factor .)
    RES_PRINT       reduce using rule 96 (termino -> factor .)
    VAR             reduce using rule 96 (termino -> factor .)
    RES_DEF         reduce using rule 96 (termino -> factor .)
    RES_IF          reduce using rule 96 (termino -> factor .)
    RES_SWITCH      reduce using rule 96 (termino -> factor .)
    RES_WHILE       reduce using rule 96 (termino -> factor .)
    RES_FOR         reduce using rule 96 (termino -> factor .)
    RES_START       reduce using rule 96 (termino -> factor .)
    $end            reduce using rule 96 (termino -> factor .)
    RES_END         reduce using rule 96 (termino -> factor .)
    RES_ELSE        reduce using rule 96 (termino -> factor .)
    RES_CASE        reduce using rule 96 (termino -> factor .)
    COL             reduce using rule 96 (termino -> factor .)
    TIMES           shift and go to state 134
    DIVIDE          shift and go to state 132

    termino1                       shift and go to state 133

state 99

    (85) expresion -> exp .
    (86) expresion -> exp . MIN zexp
    (87) expresion -> exp . MIN_EQ zexp
    (88) expresion -> exp . MAY zexp
    (89) expresion -> exp . MAY_EQ zexp
    (90) expresion -> exp . DIF zexp

    COMMA           reduce using rule 85 (expresion -> exp .)
    RPAREN          reduce using rule 85 (expresion -> exp .)
    COL             reduce using rule 85 (expresion -> exp .)
    llamadas        reduce using rule 85 (expresion -> exp .)
    RES_READ        reduce using rule 85 (expresion -> exp .)
    RES_PRINT       reduce using rule 85 (expresion -> exp .)
    VAR             reduce using rule 85 (expresion -> exp .)
    RES_DEF         reduce using rule 85 (expresion -> exp .)
    RES_IF          reduce using rule 85 (expresion -> exp .)
    RES_SWITCH      reduce using rule 85 (expresion -> exp .)
    RES_WHILE       reduce using rule 85 (expresion -> exp .)
    RES_FOR         reduce using rule 85 (expresion -> exp .)
    RES_START       reduce using rule 85 (expresion -> exp .)
    $end            reduce using rule 85 (expresion -> exp .)
    RES_END         reduce using rule 85 (expresion -> exp .)
    RES_ELSE        reduce using rule 85 (expresion -> exp .)
    RES_CASE        reduce using rule 85 (expresion -> exp .)
    MIN             shift and go to state 136
    MIN_EQ          shift and go to state 135
    MAY             shift and go to state 137
    MAY_EQ          shift and go to state 138
    DIF             shift and go to state 139


state 100

    (101) factor -> MINUS . cons
    (102) cons -> . ID
    (103) cons -> . CTE_INT
    (104) cons -> . CTE_FLOAT
    (105) cons -> . CTE_STRING
    (106) cons -> . consarray
    (107) cons -> . conslist
    (109) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 70
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 67
    CTE_STRING      shift and go to state 64

    conslist                       shift and go to state 68
    cons                           shift and go to state 140
    consarray                      shift and go to state 66

state 101

    (55) escritura1 -> expresion . COMMA escritura1
    (57) escritura1 -> expresion .

    COMMA           shift and go to state 141
    RPAREN          reduce using rule 57 (escritura1 -> expresion .)


state 102

    (56) escritura1 -> CTE_STRING . COMMA escritura1
    (58) escritura1 -> CTE_STRING .

    COMMA           shift and go to state 142
    RPAREN          reduce using rule 58 (escritura1 -> CTE_STRING .)


state 103

    (54) escritura -> RES_PRINT LPAREN escritura1 . RPAREN

    RPAREN          shift and go to state 143


state 104

    (71) while -> RES_WHILE LPAREN expresion . RPAREN COL bloque

    RPAREN          shift and go to state 144


state 105

    (60) asignacion1 -> cons .

    llamadas        reduce using rule 60 (asignacion1 -> cons .)
    RES_READ        reduce using rule 60 (asignacion1 -> cons .)
    RES_PRINT       reduce using rule 60 (asignacion1 -> cons .)
    VAR             reduce using rule 60 (asignacion1 -> cons .)
    RES_DEF         reduce using rule 60 (asignacion1 -> cons .)
    RES_IF          reduce using rule 60 (asignacion1 -> cons .)
    RES_SWITCH      reduce using rule 60 (asignacion1 -> cons .)
    RES_WHILE       reduce using rule 60 (asignacion1 -> cons .)
    RES_FOR         reduce using rule 60 (asignacion1 -> cons .)
    RES_START       reduce using rule 60 (asignacion1 -> cons .)
    $end            reduce using rule 60 (asignacion1 -> cons .)
    RES_END         reduce using rule 60 (asignacion1 -> cons .)
    RES_ELSE        reduce using rule 60 (asignacion1 -> cons .)
    RES_CASE        reduce using rule 60 (asignacion1 -> cons .)


state 106

    (68) asignarray -> LBRACKET . asignarray1 RBRACKET
    (69) asignarray1 -> . cons
    (70) asignarray1 -> . cons COMMA asignarray1
    (102) cons -> . ID
    (103) cons -> . CTE_INT
    (104) cons -> . CTE_FLOAT
    (105) cons -> . CTE_STRING
    (106) cons -> . consarray
    (107) cons -> . conslist
    (109) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 70
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 67
    CTE_STRING      shift and go to state 64

    conslist                       shift and go to state 68
    cons                           shift and go to state 145
    asignarray1                    shift and go to state 146
    consarray                      shift and go to state 66

state 107

    (65) asignlist -> LCURLY . asignlist1 RCURLY
    (66) asignlist1 -> . cons
    (67) asignlist1 -> . cons COMMA asignlist1
    (102) cons -> . ID
    (103) cons -> . CTE_INT
    (104) cons -> . CTE_FLOAT
    (105) cons -> . CTE_STRING
    (106) cons -> . consarray
    (107) cons -> . conslist
    (109) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 70
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 67
    CTE_STRING      shift and go to state 64

    asignlist1                     shift and go to state 147
    conslist                       shift and go to state 68
    cons                           shift and go to state 148
    consarray                      shift and go to state 66

state 108

    (64) asignacion1 -> asignarray .

    llamadas        reduce using rule 64 (asignacion1 -> asignarray .)
    RES_READ        reduce using rule 64 (asignacion1 -> asignarray .)
    RES_PRINT       reduce using rule 64 (asignacion1 -> asignarray .)
    VAR             reduce using rule 64 (asignacion1 -> asignarray .)
    RES_DEF         reduce using rule 64 (asignacion1 -> asignarray .)
    RES_IF          reduce using rule 64 (asignacion1 -> asignarray .)
    RES_SWITCH      reduce using rule 64 (asignacion1 -> asignarray .)
    RES_WHILE       reduce using rule 64 (asignacion1 -> asignarray .)
    RES_FOR         reduce using rule 64 (asignacion1 -> asignarray .)
    RES_START       reduce using rule 64 (asignacion1 -> asignarray .)
    $end            reduce using rule 64 (asignacion1 -> asignarray .)
    RES_END         reduce using rule 64 (asignacion1 -> asignarray .)
    RES_ELSE        reduce using rule 64 (asignacion1 -> asignarray .)
    RES_CASE        reduce using rule 64 (asignacion1 -> asignarray .)


state 109

    (63) asignacion1 -> asignlist .

    llamadas        reduce using rule 63 (asignacion1 -> asignlist .)
    RES_READ        reduce using rule 63 (asignacion1 -> asignlist .)
    RES_PRINT       reduce using rule 63 (asignacion1 -> asignlist .)
    VAR             reduce using rule 63 (asignacion1 -> asignlist .)
    RES_DEF         reduce using rule 63 (asignacion1 -> asignlist .)
    RES_IF          reduce using rule 63 (asignacion1 -> asignlist .)
    RES_SWITCH      reduce using rule 63 (asignacion1 -> asignlist .)
    RES_WHILE       reduce using rule 63 (asignacion1 -> asignlist .)
    RES_FOR         reduce using rule 63 (asignacion1 -> asignlist .)
    RES_START       reduce using rule 63 (asignacion1 -> asignlist .)
    $end            reduce using rule 63 (asignacion1 -> asignlist .)
    RES_END         reduce using rule 63 (asignacion1 -> asignlist .)
    RES_ELSE        reduce using rule 63 (asignacion1 -> asignlist .)
    RES_CASE        reduce using rule 63 (asignacion1 -> asignlist .)


state 110

    (61) asignacion1 -> VAR .

    llamadas        reduce using rule 61 (asignacion1 -> VAR .)
    RES_READ        reduce using rule 61 (asignacion1 -> VAR .)
    RES_PRINT       reduce using rule 61 (asignacion1 -> VAR .)
    VAR             reduce using rule 61 (asignacion1 -> VAR .)
    RES_DEF         reduce using rule 61 (asignacion1 -> VAR .)
    RES_IF          reduce using rule 61 (asignacion1 -> VAR .)
    RES_SWITCH      reduce using rule 61 (asignacion1 -> VAR .)
    RES_WHILE       reduce using rule 61 (asignacion1 -> VAR .)
    RES_FOR         reduce using rule 61 (asignacion1 -> VAR .)
    RES_START       reduce using rule 61 (asignacion1 -> VAR .)
    $end            reduce using rule 61 (asignacion1 -> VAR .)
    RES_END         reduce using rule 61 (asignacion1 -> VAR .)
    RES_ELSE        reduce using rule 61 (asignacion1 -> VAR .)
    RES_CASE        reduce using rule 61 (asignacion1 -> VAR .)


state 111

    (62) asignacion1 -> expresion .

    llamadas        reduce using rule 62 (asignacion1 -> expresion .)
    RES_READ        reduce using rule 62 (asignacion1 -> expresion .)
    RES_PRINT       reduce using rule 62 (asignacion1 -> expresion .)
    VAR             reduce using rule 62 (asignacion1 -> expresion .)
    RES_DEF         reduce using rule 62 (asignacion1 -> expresion .)
    RES_IF          reduce using rule 62 (asignacion1 -> expresion .)
    RES_SWITCH      reduce using rule 62 (asignacion1 -> expresion .)
    RES_WHILE       reduce using rule 62 (asignacion1 -> expresion .)
    RES_FOR         reduce using rule 62 (asignacion1 -> expresion .)
    RES_START       reduce using rule 62 (asignacion1 -> expresion .)
    $end            reduce using rule 62 (asignacion1 -> expresion .)
    RES_END         reduce using rule 62 (asignacion1 -> expresion .)
    RES_ELSE        reduce using rule 62 (asignacion1 -> expresion .)
    RES_CASE        reduce using rule 62 (asignacion1 -> expresion .)


state 112

    (59) asignacion -> VAR EQUALS asignacion1 .

    llamadas        reduce using rule 59 (asignacion -> VAR EQUALS asignacion1 .)
    RES_READ        reduce using rule 59 (asignacion -> VAR EQUALS asignacion1 .)
    RES_PRINT       reduce using rule 59 (asignacion -> VAR EQUALS asignacion1 .)
    VAR             reduce using rule 59 (asignacion -> VAR EQUALS asignacion1 .)
    RES_DEF         reduce using rule 59 (asignacion -> VAR EQUALS asignacion1 .)
    RES_IF          reduce using rule 59 (asignacion -> VAR EQUALS asignacion1 .)
    RES_SWITCH      reduce using rule 59 (asignacion -> VAR EQUALS asignacion1 .)
    RES_WHILE       reduce using rule 59 (asignacion -> VAR EQUALS asignacion1 .)
    RES_FOR         reduce using rule 59 (asignacion -> VAR EQUALS asignacion1 .)
    RES_START       reduce using rule 59 (asignacion -> VAR EQUALS asignacion1 .)
    $end            reduce using rule 59 (asignacion -> VAR EQUALS asignacion1 .)
    RES_END         reduce using rule 59 (asignacion -> VAR EQUALS asignacion1 .)
    RES_ELSE        reduce using rule 59 (asignacion -> VAR EQUALS asignacion1 .)
    RES_CASE        reduce using rule 59 (asignacion -> VAR EQUALS asignacion1 .)


state 113

    (53) lectura -> RES_READ LPAREN tipo . RPAREN

    RPAREN          shift and go to state 149


state 114

    (82) switch -> RES_SWITCH COL switch2 .

    llamadas        reduce using rule 82 (switch -> RES_SWITCH COL switch2 .)
    RES_READ        reduce using rule 82 (switch -> RES_SWITCH COL switch2 .)
    RES_PRINT       reduce using rule 82 (switch -> RES_SWITCH COL switch2 .)
    VAR             reduce using rule 82 (switch -> RES_SWITCH COL switch2 .)
    RES_DEF         reduce using rule 82 (switch -> RES_SWITCH COL switch2 .)
    RES_IF          reduce using rule 82 (switch -> RES_SWITCH COL switch2 .)
    RES_SWITCH      reduce using rule 82 (switch -> RES_SWITCH COL switch2 .)
    RES_WHILE       reduce using rule 82 (switch -> RES_SWITCH COL switch2 .)
    RES_FOR         reduce using rule 82 (switch -> RES_SWITCH COL switch2 .)
    RES_END         reduce using rule 82 (switch -> RES_SWITCH COL switch2 .)
    RES_START       reduce using rule 82 (switch -> RES_SWITCH COL switch2 .)
    $end            reduce using rule 82 (switch -> RES_SWITCH COL switch2 .)
    RES_ELSE        reduce using rule 82 (switch -> RES_SWITCH COL switch2 .)
    RES_CASE        reduce using rule 82 (switch -> RES_SWITCH COL switch2 .)


state 115

    (83) switch2 -> RES_CASE . expresion COL bloque switch2
    (85) expresion -> . exp
    (86) expresion -> . exp MIN zexp
    (87) expresion -> . exp MIN_EQ zexp
    (88) expresion -> . exp MAY zexp
    (89) expresion -> . exp MAY_EQ zexp
    (90) expresion -> . exp DIF zexp
    (91) exp -> . termino exp1
    (92) exp -> . termino
    (95) termino -> . factor termino1
    (96) termino -> . factor
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . PLUS cons
    (101) factor -> . MINUS cons

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 95
    MINUS           shift and go to state 100

    expresion                      shift and go to state 150
    termino                        shift and go to state 96
    exp                            shift and go to state 99
    factor                         shift and go to state 98

state 116

    (84) switch2 -> empty .

    llamadas        reduce using rule 84 (switch2 -> empty .)
    RES_READ        reduce using rule 84 (switch2 -> empty .)
    RES_PRINT       reduce using rule 84 (switch2 -> empty .)
    VAR             reduce using rule 84 (switch2 -> empty .)
    RES_DEF         reduce using rule 84 (switch2 -> empty .)
    RES_IF          reduce using rule 84 (switch2 -> empty .)
    RES_SWITCH      reduce using rule 84 (switch2 -> empty .)
    RES_WHILE       reduce using rule 84 (switch2 -> empty .)
    RES_FOR         reduce using rule 84 (switch2 -> empty .)
    RES_START       reduce using rule 84 (switch2 -> empty .)
    $end            reduce using rule 84 (switch2 -> empty .)
    RES_END         reduce using rule 84 (switch2 -> empty .)
    RES_ELSE        reduce using rule 84 (switch2 -> empty .)
    RES_CASE        reduce using rule 84 (switch2 -> empty .)


state 117

    (108) main -> RES_START COL bloque RES_END .

    FUNC            reduce using rule 108 (main -> RES_START COL bloque RES_END .)
    $end            reduce using rule 108 (main -> RES_START COL bloque RES_END .)


state 118

    (110) conslist -> ID EQUALS LCURLY . conslist1 RCURLY
    (111) conslist1 -> . cons
    (112) conslist1 -> . cons COMMA conslist1
    (102) cons -> . ID
    (103) cons -> . CTE_INT
    (104) cons -> . CTE_FLOAT
    (105) cons -> . CTE_STRING
    (106) cons -> . consarray
    (107) cons -> . conslist
    (109) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 70
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 67
    CTE_STRING      shift and go to state 64

    conslist1                      shift and go to state 152
    conslist                       shift and go to state 68
    cons                           shift and go to state 151
    consarray                      shift and go to state 66

state 119

    (109) consarray -> ID LBRACKET CTE_INT . RBRACKET EQUALS cons

    RBRACKET        shift and go to state 153


state 120

    (6) prototipos -> FUNC dato ID LPAREN tipo ID RPAREN .

    COL             reduce using rule 6 (prototipos -> FUNC dato ID LPAREN tipo ID RPAREN .)
    RES_INT         reduce using rule 6 (prototipos -> FUNC dato ID LPAREN tipo ID RPAREN .)
    RES_FLOAT       reduce using rule 6 (prototipos -> FUNC dato ID LPAREN tipo ID RPAREN .)
    RES_BOOLEAN     reduce using rule 6 (prototipos -> FUNC dato ID LPAREN tipo ID RPAREN .)
    RES_STRING      reduce using rule 6 (prototipos -> FUNC dato ID LPAREN tipo ID RPAREN .)
    RES_LIST        reduce using rule 6 (prototipos -> FUNC dato ID LPAREN tipo ID RPAREN .)
    RES_ARRAY       reduce using rule 6 (prototipos -> FUNC dato ID LPAREN tipo ID RPAREN .)


state 121

    (29) array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .

    RES_INT         reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_FLOAT       reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_BOOLEAN     reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_STRING      reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_LIST        reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_ARRAY       reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    FUNC            reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_START       reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    ID              reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    llamadas        reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_READ        reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_PRINT       reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    VAR             reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_DEF         reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_IF          reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_SWITCH      reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_WHILE       reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_FOR         reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    $end            reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_END         reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_ELSE        reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RES_CASE        reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)
    RPAREN          reduce using rule 29 (array -> RES_ARRAY dato VAR LBRACKET CTE_INT RBRACKET array1 .)


state 122

    (30) array1 -> COL . LBRACKET array2 RBRACKET

    LBRACKET        shift and go to state 154


state 123

    (31) array1 -> empty .

    RES_INT         reduce using rule 31 (array1 -> empty .)
    RES_FLOAT       reduce using rule 31 (array1 -> empty .)
    RES_BOOLEAN     reduce using rule 31 (array1 -> empty .)
    RES_STRING      reduce using rule 31 (array1 -> empty .)
    RES_LIST        reduce using rule 31 (array1 -> empty .)
    RES_ARRAY       reduce using rule 31 (array1 -> empty .)
    FUNC            reduce using rule 31 (array1 -> empty .)
    RES_START       reduce using rule 31 (array1 -> empty .)
    llamadas        reduce using rule 31 (array1 -> empty .)
    RES_READ        reduce using rule 31 (array1 -> empty .)
    RES_PRINT       reduce using rule 31 (array1 -> empty .)
    VAR             reduce using rule 31 (array1 -> empty .)
    RES_DEF         reduce using rule 31 (array1 -> empty .)
    RES_IF          reduce using rule 31 (array1 -> empty .)
    RES_SWITCH      reduce using rule 31 (array1 -> empty .)
    RES_WHILE       reduce using rule 31 (array1 -> empty .)
    RES_FOR         reduce using rule 31 (array1 -> empty .)
    $end            reduce using rule 31 (array1 -> empty .)
    RES_END         reduce using rule 31 (array1 -> empty .)
    RES_ELSE        reduce using rule 31 (array1 -> empty .)
    RES_CASE        reduce using rule 31 (array1 -> empty .)
    ID              reduce using rule 31 (array1 -> empty .)
    RPAREN          reduce using rule 31 (array1 -> empty .)


state 124

    (73) forexp -> ID EQUALS . cons COL ID comparacion ID COL ID EQUALS expresion
    (74) forexp -> ID EQUALS . cons COL ID comparacion cons COL ID EQUALS expresion
    (102) cons -> . ID
    (103) cons -> . CTE_INT
    (104) cons -> . CTE_FLOAT
    (105) cons -> . CTE_STRING
    (106) cons -> . consarray
    (107) cons -> . conslist
    (109) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 70
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 67
    CTE_STRING      shift and go to state 64

    conslist                       shift and go to state 68
    consarray                      shift and go to state 66
    cons                           shift and go to state 155

state 125

    (72) for -> RES_FOR LPAREN forexp RPAREN . COL bloque

    COL             shift and go to state 156


state 126

    (80) if -> RES_IF LPAREN expresion RPAREN . COL bloque
    (81) if -> RES_IF LPAREN expresion RPAREN . COL bloque RES_ELSE COL bloque

    COL             shift and go to state 157


state 127

    (100) factor -> PLUS cons .

    TIMES           reduce using rule 100 (factor -> PLUS cons .)
    DIVIDE          reduce using rule 100 (factor -> PLUS cons .)
    PLUS            reduce using rule 100 (factor -> PLUS cons .)
    MINUS           reduce using rule 100 (factor -> PLUS cons .)
    MIN             reduce using rule 100 (factor -> PLUS cons .)
    MIN_EQ          reduce using rule 100 (factor -> PLUS cons .)
    MAY             reduce using rule 100 (factor -> PLUS cons .)
    MAY_EQ          reduce using rule 100 (factor -> PLUS cons .)
    DIF             reduce using rule 100 (factor -> PLUS cons .)
    COL             reduce using rule 100 (factor -> PLUS cons .)
    RPAREN          reduce using rule 100 (factor -> PLUS cons .)
    COMMA           reduce using rule 100 (factor -> PLUS cons .)
    llamadas        reduce using rule 100 (factor -> PLUS cons .)
    RES_READ        reduce using rule 100 (factor -> PLUS cons .)
    RES_PRINT       reduce using rule 100 (factor -> PLUS cons .)
    VAR             reduce using rule 100 (factor -> PLUS cons .)
    RES_DEF         reduce using rule 100 (factor -> PLUS cons .)
    RES_IF          reduce using rule 100 (factor -> PLUS cons .)
    RES_SWITCH      reduce using rule 100 (factor -> PLUS cons .)
    RES_WHILE       reduce using rule 100 (factor -> PLUS cons .)
    RES_FOR         reduce using rule 100 (factor -> PLUS cons .)
    RES_START       reduce using rule 100 (factor -> PLUS cons .)
    $end            reduce using rule 100 (factor -> PLUS cons .)
    RES_END         reduce using rule 100 (factor -> PLUS cons .)
    RES_ELSE        reduce using rule 100 (factor -> PLUS cons .)
    RES_CASE        reduce using rule 100 (factor -> PLUS cons .)


state 128

    (91) exp -> termino exp1 .

    MIN             reduce using rule 91 (exp -> termino exp1 .)
    MIN_EQ          reduce using rule 91 (exp -> termino exp1 .)
    MAY             reduce using rule 91 (exp -> termino exp1 .)
    MAY_EQ          reduce using rule 91 (exp -> termino exp1 .)
    DIF             reduce using rule 91 (exp -> termino exp1 .)
    RPAREN          reduce using rule 91 (exp -> termino exp1 .)
    COMMA           reduce using rule 91 (exp -> termino exp1 .)
    llamadas        reduce using rule 91 (exp -> termino exp1 .)
    RES_READ        reduce using rule 91 (exp -> termino exp1 .)
    RES_PRINT       reduce using rule 91 (exp -> termino exp1 .)
    VAR             reduce using rule 91 (exp -> termino exp1 .)
    RES_DEF         reduce using rule 91 (exp -> termino exp1 .)
    RES_IF          reduce using rule 91 (exp -> termino exp1 .)
    RES_SWITCH      reduce using rule 91 (exp -> termino exp1 .)
    RES_WHILE       reduce using rule 91 (exp -> termino exp1 .)
    RES_FOR         reduce using rule 91 (exp -> termino exp1 .)
    RES_START       reduce using rule 91 (exp -> termino exp1 .)
    $end            reduce using rule 91 (exp -> termino exp1 .)
    RES_END         reduce using rule 91 (exp -> termino exp1 .)
    RES_ELSE        reduce using rule 91 (exp -> termino exp1 .)
    RES_CASE        reduce using rule 91 (exp -> termino exp1 .)
    COL             reduce using rule 91 (exp -> termino exp1 .)


state 129

    (93) exp1 -> PLUS . exp
    (91) exp -> . termino exp1
    (92) exp -> . termino
    (95) termino -> . factor termino1
    (96) termino -> . factor
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . PLUS cons
    (101) factor -> . MINUS cons

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 95
    MINUS           shift and go to state 100

    termino                        shift and go to state 96
    exp                            shift and go to state 158
    factor                         shift and go to state 98

state 130

    (94) exp1 -> MINUS . exp
    (91) exp -> . termino exp1
    (92) exp -> . termino
    (95) termino -> . factor termino1
    (96) termino -> . factor
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . PLUS cons
    (101) factor -> . MINUS cons

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 95
    MINUS           shift and go to state 100

    termino                        shift and go to state 96
    exp                            shift and go to state 159
    factor                         shift and go to state 98

state 131

    (99) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 160


state 132

    (98) termino1 -> DIVIDE . termino
    (95) termino -> . factor termino1
    (96) termino -> . factor
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . PLUS cons
    (101) factor -> . MINUS cons

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 95
    MINUS           shift and go to state 100

    termino                        shift and go to state 161
    factor                         shift and go to state 98

state 133

    (95) termino -> factor termino1 .

    PLUS            reduce using rule 95 (termino -> factor termino1 .)
    MINUS           reduce using rule 95 (termino -> factor termino1 .)
    MIN             reduce using rule 95 (termino -> factor termino1 .)
    MIN_EQ          reduce using rule 95 (termino -> factor termino1 .)
    MAY             reduce using rule 95 (termino -> factor termino1 .)
    MAY_EQ          reduce using rule 95 (termino -> factor termino1 .)
    DIF             reduce using rule 95 (termino -> factor termino1 .)
    COMMA           reduce using rule 95 (termino -> factor termino1 .)
    RPAREN          reduce using rule 95 (termino -> factor termino1 .)
    llamadas        reduce using rule 95 (termino -> factor termino1 .)
    RES_READ        reduce using rule 95 (termino -> factor termino1 .)
    RES_PRINT       reduce using rule 95 (termino -> factor termino1 .)
    VAR             reduce using rule 95 (termino -> factor termino1 .)
    RES_DEF         reduce using rule 95 (termino -> factor termino1 .)
    RES_IF          reduce using rule 95 (termino -> factor termino1 .)
    RES_SWITCH      reduce using rule 95 (termino -> factor termino1 .)
    RES_WHILE       reduce using rule 95 (termino -> factor termino1 .)
    RES_FOR         reduce using rule 95 (termino -> factor termino1 .)
    RES_START       reduce using rule 95 (termino -> factor termino1 .)
    $end            reduce using rule 95 (termino -> factor termino1 .)
    RES_END         reduce using rule 95 (termino -> factor termino1 .)
    RES_ELSE        reduce using rule 95 (termino -> factor termino1 .)
    RES_CASE        reduce using rule 95 (termino -> factor termino1 .)
    COL             reduce using rule 95 (termino -> factor termino1 .)


state 134

    (97) termino1 -> TIMES . termino
    (95) termino -> . factor termino1
    (96) termino -> . factor
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . PLUS cons
    (101) factor -> . MINUS cons

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 95
    MINUS           shift and go to state 100

    termino                        shift and go to state 162
    factor                         shift and go to state 98

state 135

    (87) expresion -> exp MIN_EQ . zexp

    zexp            shift and go to state 163


state 136

    (86) expresion -> exp MIN . zexp

    zexp            shift and go to state 164


state 137

    (88) expresion -> exp MAY . zexp

    zexp            shift and go to state 165


state 138

    (89) expresion -> exp MAY_EQ . zexp

    zexp            shift and go to state 166


state 139

    (90) expresion -> exp DIF . zexp

    zexp            shift and go to state 167


state 140

    (101) factor -> MINUS cons .

    TIMES           reduce using rule 101 (factor -> MINUS cons .)
    DIVIDE          reduce using rule 101 (factor -> MINUS cons .)
    PLUS            reduce using rule 101 (factor -> MINUS cons .)
    MINUS           reduce using rule 101 (factor -> MINUS cons .)
    MIN             reduce using rule 101 (factor -> MINUS cons .)
    MIN_EQ          reduce using rule 101 (factor -> MINUS cons .)
    MAY             reduce using rule 101 (factor -> MINUS cons .)
    MAY_EQ          reduce using rule 101 (factor -> MINUS cons .)
    DIF             reduce using rule 101 (factor -> MINUS cons .)
    COL             reduce using rule 101 (factor -> MINUS cons .)
    RPAREN          reduce using rule 101 (factor -> MINUS cons .)
    COMMA           reduce using rule 101 (factor -> MINUS cons .)
    llamadas        reduce using rule 101 (factor -> MINUS cons .)
    RES_READ        reduce using rule 101 (factor -> MINUS cons .)
    RES_PRINT       reduce using rule 101 (factor -> MINUS cons .)
    VAR             reduce using rule 101 (factor -> MINUS cons .)
    RES_DEF         reduce using rule 101 (factor -> MINUS cons .)
    RES_IF          reduce using rule 101 (factor -> MINUS cons .)
    RES_SWITCH      reduce using rule 101 (factor -> MINUS cons .)
    RES_WHILE       reduce using rule 101 (factor -> MINUS cons .)
    RES_FOR         reduce using rule 101 (factor -> MINUS cons .)
    RES_START       reduce using rule 101 (factor -> MINUS cons .)
    $end            reduce using rule 101 (factor -> MINUS cons .)
    RES_END         reduce using rule 101 (factor -> MINUS cons .)
    RES_ELSE        reduce using rule 101 (factor -> MINUS cons .)
    RES_CASE        reduce using rule 101 (factor -> MINUS cons .)


state 141

    (55) escritura1 -> expresion COMMA . escritura1
    (55) escritura1 -> . expresion COMMA escritura1
    (56) escritura1 -> . CTE_STRING COMMA escritura1
    (57) escritura1 -> . expresion
    (58) escritura1 -> . CTE_STRING
    (85) expresion -> . exp
    (86) expresion -> . exp MIN zexp
    (87) expresion -> . exp MIN_EQ zexp
    (88) expresion -> . exp MAY zexp
    (89) expresion -> . exp MAY_EQ zexp
    (90) expresion -> . exp DIF zexp
    (91) exp -> . termino exp1
    (92) exp -> . termino
    (95) termino -> . factor termino1
    (96) termino -> . factor
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . PLUS cons
    (101) factor -> . MINUS cons

    CTE_STRING      shift and go to state 102
    LPAREN          shift and go to state 97
    PLUS            shift and go to state 95
    MINUS           shift and go to state 100

    expresion                      shift and go to state 101
    termino                        shift and go to state 96
    exp                            shift and go to state 99
    factor                         shift and go to state 98
    escritura1                     shift and go to state 168

state 142

    (56) escritura1 -> CTE_STRING COMMA . escritura1
    (55) escritura1 -> . expresion COMMA escritura1
    (56) escritura1 -> . CTE_STRING COMMA escritura1
    (57) escritura1 -> . expresion
    (58) escritura1 -> . CTE_STRING
    (85) expresion -> . exp
    (86) expresion -> . exp MIN zexp
    (87) expresion -> . exp MIN_EQ zexp
    (88) expresion -> . exp MAY zexp
    (89) expresion -> . exp MAY_EQ zexp
    (90) expresion -> . exp DIF zexp
    (91) exp -> . termino exp1
    (92) exp -> . termino
    (95) termino -> . factor termino1
    (96) termino -> . factor
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . PLUS cons
    (101) factor -> . MINUS cons

    CTE_STRING      shift and go to state 102
    LPAREN          shift and go to state 97
    PLUS            shift and go to state 95
    MINUS           shift and go to state 100

    expresion                      shift and go to state 101
    termino                        shift and go to state 96
    exp                            shift and go to state 99
    factor                         shift and go to state 98
    escritura1                     shift and go to state 169

state 143

    (54) escritura -> RES_PRINT LPAREN escritura1 RPAREN .

    llamadas        reduce using rule 54 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_READ        reduce using rule 54 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_PRINT       reduce using rule 54 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    VAR             reduce using rule 54 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_DEF         reduce using rule 54 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_IF          reduce using rule 54 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_SWITCH      reduce using rule 54 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_WHILE       reduce using rule 54 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_FOR         reduce using rule 54 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_START       reduce using rule 54 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    $end            reduce using rule 54 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_END         reduce using rule 54 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_ELSE        reduce using rule 54 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_CASE        reduce using rule 54 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)


state 144

    (71) while -> RES_WHILE LPAREN expresion RPAREN . COL bloque

    COL             shift and go to state 170


state 145

    (69) asignarray1 -> cons .
    (70) asignarray1 -> cons . COMMA asignarray1

    RBRACKET        reduce using rule 69 (asignarray1 -> cons .)
    COMMA           shift and go to state 171


state 146

    (68) asignarray -> LBRACKET asignarray1 . RBRACKET

    RBRACKET        shift and go to state 172


state 147

    (65) asignlist -> LCURLY asignlist1 . RCURLY

    RCURLY          shift and go to state 173


state 148

    (66) asignlist1 -> cons .
    (67) asignlist1 -> cons . COMMA asignlist1

    RCURLY          reduce using rule 66 (asignlist1 -> cons .)
    COMMA           shift and go to state 174


state 149

    (53) lectura -> RES_READ LPAREN tipo RPAREN .

    llamadas        reduce using rule 53 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_READ        reduce using rule 53 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_PRINT       reduce using rule 53 (lectura -> RES_READ LPAREN tipo RPAREN .)
    VAR             reduce using rule 53 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_DEF         reduce using rule 53 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_IF          reduce using rule 53 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_SWITCH      reduce using rule 53 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_WHILE       reduce using rule 53 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_FOR         reduce using rule 53 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_START       reduce using rule 53 (lectura -> RES_READ LPAREN tipo RPAREN .)
    $end            reduce using rule 53 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_END         reduce using rule 53 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_ELSE        reduce using rule 53 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_CASE        reduce using rule 53 (lectura -> RES_READ LPAREN tipo RPAREN .)


state 150

    (83) switch2 -> RES_CASE expresion . COL bloque switch2

    COL             shift and go to state 175


state 151

    (111) conslist1 -> cons .
    (112) conslist1 -> cons . COMMA conslist1

    RCURLY          reduce using rule 111 (conslist1 -> cons .)
    COMMA           shift and go to state 176


state 152

    (110) conslist -> ID EQUALS LCURLY conslist1 . RCURLY

    RCURLY          shift and go to state 177


state 153

    (109) consarray -> ID LBRACKET CTE_INT RBRACKET . EQUALS cons

    EQUALS          shift and go to state 178


state 154

    (30) array1 -> COL LBRACKET . array2 RBRACKET
    (32) array2 -> . cons
    (33) array2 -> . cons COMMA array2
    (102) cons -> . ID
    (103) cons -> . CTE_INT
    (104) cons -> . CTE_FLOAT
    (105) cons -> . CTE_STRING
    (106) cons -> . consarray
    (107) cons -> . conslist
    (109) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 70
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 67
    CTE_STRING      shift and go to state 64

    array2                         shift and go to state 180
    conslist                       shift and go to state 68
    cons                           shift and go to state 179
    consarray                      shift and go to state 66

state 155

    (73) forexp -> ID EQUALS cons . COL ID comparacion ID COL ID EQUALS expresion
    (74) forexp -> ID EQUALS cons . COL ID comparacion cons COL ID EQUALS expresion

    COL             shift and go to state 181


state 156

    (72) for -> RES_FOR LPAREN forexp RPAREN COL . bloque
    (36) bloque -> . estatutos bloque
    (37) bloque -> . estatutos
    (38) bloque -> . empty
    (41) estatutos -> . condicion
    (42) estatutos -> . ciclo
    (43) estatutos -> . lectura
    (44) estatutos -> . escritura
    (45) estatutos -> . asignacion
    (46) estatutos -> . llamadas
    (47) estatutos -> . vars
    (113) empty -> .
    (48) condicion -> . if
    (49) condicion -> . switch
    (39) ciclo -> . while
    (40) ciclo -> . for
    (53) lectura -> . RES_READ LPAREN tipo RPAREN
    (54) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (59) asignacion -> . VAR EQUALS asignacion1
    (15) vars -> . RES_DEF vars1
    (80) if -> . RES_IF LPAREN expresion RPAREN COL bloque
    (81) if -> . RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque
    (82) switch -> . RES_SWITCH COL switch2
    (71) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (72) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

  ! shift/reduce conflict for llamadas resolved as shift
  ! shift/reduce conflict for RES_READ resolved as shift
  ! shift/reduce conflict for RES_PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for RES_DEF resolved as shift
  ! shift/reduce conflict for RES_IF resolved as shift
  ! shift/reduce conflict for RES_SWITCH resolved as shift
  ! shift/reduce conflict for RES_WHILE resolved as shift
  ! shift/reduce conflict for RES_FOR resolved as shift
    llamadas        shift and go to state 42
    RES_START       reduce using rule 113 (empty -> .)
    $end            reduce using rule 113 (empty -> .)
    RES_END         reduce using rule 113 (empty -> .)
    RES_ELSE        reduce using rule 113 (empty -> .)
    RES_CASE        reduce using rule 113 (empty -> .)
    RES_READ        shift and go to state 57
    RES_PRINT       shift and go to state 45
    VAR             shift and go to state 56
    RES_DEF         shift and go to state 49
    RES_IF          shift and go to state 44
    RES_SWITCH      shift and go to state 59
    RES_WHILE       shift and go to state 55
    RES_FOR         shift and go to state 41

  ! llamadas        [ reduce using rule 113 (empty -> .) ]
  ! RES_READ        [ reduce using rule 113 (empty -> .) ]
  ! RES_PRINT       [ reduce using rule 113 (empty -> .) ]
  ! VAR             [ reduce using rule 113 (empty -> .) ]
  ! RES_DEF         [ reduce using rule 113 (empty -> .) ]
  ! RES_IF          [ reduce using rule 113 (empty -> .) ]
  ! RES_SWITCH      [ reduce using rule 113 (empty -> .) ]
  ! RES_WHILE       [ reduce using rule 113 (empty -> .) ]
  ! RES_FOR         [ reduce using rule 113 (empty -> .) ]

    ciclo                          shift and go to state 46
    asignacion                     shift and go to state 58
    vars                           shift and go to state 40
    while                          shift and go to state 60
    for                            shift and go to state 47
    switch                         shift and go to state 48
    estatutos                      shift and go to state 54
    condicion                      shift and go to state 50
    bloque                         shift and go to state 182
    if                             shift and go to state 51
    lectura                        shift and go to state 52
    empty                          shift and go to state 53
    escritura                      shift and go to state 61

state 157

    (80) if -> RES_IF LPAREN expresion RPAREN COL . bloque
    (81) if -> RES_IF LPAREN expresion RPAREN COL . bloque RES_ELSE COL bloque
    (36) bloque -> . estatutos bloque
    (37) bloque -> . estatutos
    (38) bloque -> . empty
    (41) estatutos -> . condicion
    (42) estatutos -> . ciclo
    (43) estatutos -> . lectura
    (44) estatutos -> . escritura
    (45) estatutos -> . asignacion
    (46) estatutos -> . llamadas
    (47) estatutos -> . vars
    (113) empty -> .
    (48) condicion -> . if
    (49) condicion -> . switch
    (39) ciclo -> . while
    (40) ciclo -> . for
    (53) lectura -> . RES_READ LPAREN tipo RPAREN
    (54) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (59) asignacion -> . VAR EQUALS asignacion1
    (15) vars -> . RES_DEF vars1
    (80) if -> . RES_IF LPAREN expresion RPAREN COL bloque
    (81) if -> . RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque
    (82) switch -> . RES_SWITCH COL switch2
    (71) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (72) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

  ! shift/reduce conflict for llamadas resolved as shift
  ! shift/reduce conflict for RES_READ resolved as shift
  ! shift/reduce conflict for RES_PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for RES_DEF resolved as shift
  ! shift/reduce conflict for RES_IF resolved as shift
  ! shift/reduce conflict for RES_SWITCH resolved as shift
  ! shift/reduce conflict for RES_WHILE resolved as shift
  ! shift/reduce conflict for RES_FOR resolved as shift
    llamadas        shift and go to state 42
    RES_START       reduce using rule 113 (empty -> .)
    $end            reduce using rule 113 (empty -> .)
    RES_END         reduce using rule 113 (empty -> .)
    RES_ELSE        reduce using rule 113 (empty -> .)
    RES_CASE        reduce using rule 113 (empty -> .)
    RES_READ        shift and go to state 57
    RES_PRINT       shift and go to state 45
    VAR             shift and go to state 56
    RES_DEF         shift and go to state 49
    RES_IF          shift and go to state 44
    RES_SWITCH      shift and go to state 59
    RES_WHILE       shift and go to state 55
    RES_FOR         shift and go to state 41

  ! llamadas        [ reduce using rule 113 (empty -> .) ]
  ! RES_READ        [ reduce using rule 113 (empty -> .) ]
  ! RES_PRINT       [ reduce using rule 113 (empty -> .) ]
  ! VAR             [ reduce using rule 113 (empty -> .) ]
  ! RES_DEF         [ reduce using rule 113 (empty -> .) ]
  ! RES_IF          [ reduce using rule 113 (empty -> .) ]
  ! RES_SWITCH      [ reduce using rule 113 (empty -> .) ]
  ! RES_WHILE       [ reduce using rule 113 (empty -> .) ]
  ! RES_FOR         [ reduce using rule 113 (empty -> .) ]

    ciclo                          shift and go to state 46
    asignacion                     shift and go to state 58
    vars                           shift and go to state 40
    while                          shift and go to state 60
    for                            shift and go to state 47
    switch                         shift and go to state 48
    estatutos                      shift and go to state 54
    condicion                      shift and go to state 50
    bloque                         shift and go to state 183
    if                             shift and go to state 51
    lectura                        shift and go to state 52
    empty                          shift and go to state 53
    escritura                      shift and go to state 61

state 158

    (93) exp1 -> PLUS exp .

    MIN             reduce using rule 93 (exp1 -> PLUS exp .)
    MIN_EQ          reduce using rule 93 (exp1 -> PLUS exp .)
    MAY             reduce using rule 93 (exp1 -> PLUS exp .)
    MAY_EQ          reduce using rule 93 (exp1 -> PLUS exp .)
    DIF             reduce using rule 93 (exp1 -> PLUS exp .)
    RPAREN          reduce using rule 93 (exp1 -> PLUS exp .)
    COMMA           reduce using rule 93 (exp1 -> PLUS exp .)
    llamadas        reduce using rule 93 (exp1 -> PLUS exp .)
    RES_READ        reduce using rule 93 (exp1 -> PLUS exp .)
    RES_PRINT       reduce using rule 93 (exp1 -> PLUS exp .)
    VAR             reduce using rule 93 (exp1 -> PLUS exp .)
    RES_DEF         reduce using rule 93 (exp1 -> PLUS exp .)
    RES_IF          reduce using rule 93 (exp1 -> PLUS exp .)
    RES_SWITCH      reduce using rule 93 (exp1 -> PLUS exp .)
    RES_WHILE       reduce using rule 93 (exp1 -> PLUS exp .)
    RES_FOR         reduce using rule 93 (exp1 -> PLUS exp .)
    RES_START       reduce using rule 93 (exp1 -> PLUS exp .)
    $end            reduce using rule 93 (exp1 -> PLUS exp .)
    RES_END         reduce using rule 93 (exp1 -> PLUS exp .)
    RES_ELSE        reduce using rule 93 (exp1 -> PLUS exp .)
    RES_CASE        reduce using rule 93 (exp1 -> PLUS exp .)
    COL             reduce using rule 93 (exp1 -> PLUS exp .)


state 159

    (94) exp1 -> MINUS exp .

    MIN             reduce using rule 94 (exp1 -> MINUS exp .)
    MIN_EQ          reduce using rule 94 (exp1 -> MINUS exp .)
    MAY             reduce using rule 94 (exp1 -> MINUS exp .)
    MAY_EQ          reduce using rule 94 (exp1 -> MINUS exp .)
    DIF             reduce using rule 94 (exp1 -> MINUS exp .)
    RPAREN          reduce using rule 94 (exp1 -> MINUS exp .)
    COMMA           reduce using rule 94 (exp1 -> MINUS exp .)
    llamadas        reduce using rule 94 (exp1 -> MINUS exp .)
    RES_READ        reduce using rule 94 (exp1 -> MINUS exp .)
    RES_PRINT       reduce using rule 94 (exp1 -> MINUS exp .)
    VAR             reduce using rule 94 (exp1 -> MINUS exp .)
    RES_DEF         reduce using rule 94 (exp1 -> MINUS exp .)
    RES_IF          reduce using rule 94 (exp1 -> MINUS exp .)
    RES_SWITCH      reduce using rule 94 (exp1 -> MINUS exp .)
    RES_WHILE       reduce using rule 94 (exp1 -> MINUS exp .)
    RES_FOR         reduce using rule 94 (exp1 -> MINUS exp .)
    RES_START       reduce using rule 94 (exp1 -> MINUS exp .)
    $end            reduce using rule 94 (exp1 -> MINUS exp .)
    RES_END         reduce using rule 94 (exp1 -> MINUS exp .)
    RES_ELSE        reduce using rule 94 (exp1 -> MINUS exp .)
    RES_CASE        reduce using rule 94 (exp1 -> MINUS exp .)
    COL             reduce using rule 94 (exp1 -> MINUS exp .)


state 160

    (99) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    MIN             reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    MIN_EQ          reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    MAY             reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    MAY_EQ          reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    DIF             reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    COL             reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    COMMA           reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    llamadas        reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    RES_READ        reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    RES_PRINT       reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    VAR             reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    RES_DEF         reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    RES_IF          reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    RES_SWITCH      reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    RES_WHILE       reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    RES_FOR         reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    RES_START       reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    $end            reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    RES_END         reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    RES_ELSE        reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    RES_CASE        reduce using rule 99 (factor -> LPAREN expresion RPAREN .)


state 161

    (98) termino1 -> DIVIDE termino .

    PLUS            reduce using rule 98 (termino1 -> DIVIDE termino .)
    MINUS           reduce using rule 98 (termino1 -> DIVIDE termino .)
    MIN             reduce using rule 98 (termino1 -> DIVIDE termino .)
    MIN_EQ          reduce using rule 98 (termino1 -> DIVIDE termino .)
    MAY             reduce using rule 98 (termino1 -> DIVIDE termino .)
    MAY_EQ          reduce using rule 98 (termino1 -> DIVIDE termino .)
    DIF             reduce using rule 98 (termino1 -> DIVIDE termino .)
    RPAREN          reduce using rule 98 (termino1 -> DIVIDE termino .)
    COMMA           reduce using rule 98 (termino1 -> DIVIDE termino .)
    llamadas        reduce using rule 98 (termino1 -> DIVIDE termino .)
    RES_READ        reduce using rule 98 (termino1 -> DIVIDE termino .)
    RES_PRINT       reduce using rule 98 (termino1 -> DIVIDE termino .)
    VAR             reduce using rule 98 (termino1 -> DIVIDE termino .)
    RES_DEF         reduce using rule 98 (termino1 -> DIVIDE termino .)
    RES_IF          reduce using rule 98 (termino1 -> DIVIDE termino .)
    RES_SWITCH      reduce using rule 98 (termino1 -> DIVIDE termino .)
    RES_WHILE       reduce using rule 98 (termino1 -> DIVIDE termino .)
    RES_FOR         reduce using rule 98 (termino1 -> DIVIDE termino .)
    RES_START       reduce using rule 98 (termino1 -> DIVIDE termino .)
    $end            reduce using rule 98 (termino1 -> DIVIDE termino .)
    RES_END         reduce using rule 98 (termino1 -> DIVIDE termino .)
    RES_ELSE        reduce using rule 98 (termino1 -> DIVIDE termino .)
    RES_CASE        reduce using rule 98 (termino1 -> DIVIDE termino .)
    COL             reduce using rule 98 (termino1 -> DIVIDE termino .)


state 162

    (97) termino1 -> TIMES termino .

    PLUS            reduce using rule 97 (termino1 -> TIMES termino .)
    MINUS           reduce using rule 97 (termino1 -> TIMES termino .)
    MIN             reduce using rule 97 (termino1 -> TIMES termino .)
    MIN_EQ          reduce using rule 97 (termino1 -> TIMES termino .)
    MAY             reduce using rule 97 (termino1 -> TIMES termino .)
    MAY_EQ          reduce using rule 97 (termino1 -> TIMES termino .)
    DIF             reduce using rule 97 (termino1 -> TIMES termino .)
    RPAREN          reduce using rule 97 (termino1 -> TIMES termino .)
    COMMA           reduce using rule 97 (termino1 -> TIMES termino .)
    llamadas        reduce using rule 97 (termino1 -> TIMES termino .)
    RES_READ        reduce using rule 97 (termino1 -> TIMES termino .)
    RES_PRINT       reduce using rule 97 (termino1 -> TIMES termino .)
    VAR             reduce using rule 97 (termino1 -> TIMES termino .)
    RES_DEF         reduce using rule 97 (termino1 -> TIMES termino .)
    RES_IF          reduce using rule 97 (termino1 -> TIMES termino .)
    RES_SWITCH      reduce using rule 97 (termino1 -> TIMES termino .)
    RES_WHILE       reduce using rule 97 (termino1 -> TIMES termino .)
    RES_FOR         reduce using rule 97 (termino1 -> TIMES termino .)
    RES_START       reduce using rule 97 (termino1 -> TIMES termino .)
    $end            reduce using rule 97 (termino1 -> TIMES termino .)
    RES_END         reduce using rule 97 (termino1 -> TIMES termino .)
    RES_ELSE        reduce using rule 97 (termino1 -> TIMES termino .)
    RES_CASE        reduce using rule 97 (termino1 -> TIMES termino .)
    COL             reduce using rule 97 (termino1 -> TIMES termino .)


state 163

    (87) expresion -> exp MIN_EQ zexp .

    COMMA           reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    RPAREN          reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    COL             reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    llamadas        reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    RES_READ        reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    RES_PRINT       reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    VAR             reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    RES_DEF         reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    RES_IF          reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    RES_SWITCH      reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    RES_WHILE       reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    RES_FOR         reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    RES_START       reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    $end            reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    RES_END         reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    RES_ELSE        reduce using rule 87 (expresion -> exp MIN_EQ zexp .)
    RES_CASE        reduce using rule 87 (expresion -> exp MIN_EQ zexp .)


state 164

    (86) expresion -> exp MIN zexp .

    COMMA           reduce using rule 86 (expresion -> exp MIN zexp .)
    RPAREN          reduce using rule 86 (expresion -> exp MIN zexp .)
    COL             reduce using rule 86 (expresion -> exp MIN zexp .)
    llamadas        reduce using rule 86 (expresion -> exp MIN zexp .)
    RES_READ        reduce using rule 86 (expresion -> exp MIN zexp .)
    RES_PRINT       reduce using rule 86 (expresion -> exp MIN zexp .)
    VAR             reduce using rule 86 (expresion -> exp MIN zexp .)
    RES_DEF         reduce using rule 86 (expresion -> exp MIN zexp .)
    RES_IF          reduce using rule 86 (expresion -> exp MIN zexp .)
    RES_SWITCH      reduce using rule 86 (expresion -> exp MIN zexp .)
    RES_WHILE       reduce using rule 86 (expresion -> exp MIN zexp .)
    RES_FOR         reduce using rule 86 (expresion -> exp MIN zexp .)
    RES_START       reduce using rule 86 (expresion -> exp MIN zexp .)
    $end            reduce using rule 86 (expresion -> exp MIN zexp .)
    RES_END         reduce using rule 86 (expresion -> exp MIN zexp .)
    RES_ELSE        reduce using rule 86 (expresion -> exp MIN zexp .)
    RES_CASE        reduce using rule 86 (expresion -> exp MIN zexp .)


state 165

    (88) expresion -> exp MAY zexp .

    COMMA           reduce using rule 88 (expresion -> exp MAY zexp .)
    RPAREN          reduce using rule 88 (expresion -> exp MAY zexp .)
    COL             reduce using rule 88 (expresion -> exp MAY zexp .)
    llamadas        reduce using rule 88 (expresion -> exp MAY zexp .)
    RES_READ        reduce using rule 88 (expresion -> exp MAY zexp .)
    RES_PRINT       reduce using rule 88 (expresion -> exp MAY zexp .)
    VAR             reduce using rule 88 (expresion -> exp MAY zexp .)
    RES_DEF         reduce using rule 88 (expresion -> exp MAY zexp .)
    RES_IF          reduce using rule 88 (expresion -> exp MAY zexp .)
    RES_SWITCH      reduce using rule 88 (expresion -> exp MAY zexp .)
    RES_WHILE       reduce using rule 88 (expresion -> exp MAY zexp .)
    RES_FOR         reduce using rule 88 (expresion -> exp MAY zexp .)
    RES_START       reduce using rule 88 (expresion -> exp MAY zexp .)
    $end            reduce using rule 88 (expresion -> exp MAY zexp .)
    RES_END         reduce using rule 88 (expresion -> exp MAY zexp .)
    RES_ELSE        reduce using rule 88 (expresion -> exp MAY zexp .)
    RES_CASE        reduce using rule 88 (expresion -> exp MAY zexp .)


state 166

    (89) expresion -> exp MAY_EQ zexp .

    COMMA           reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    RPAREN          reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    COL             reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    llamadas        reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    RES_READ        reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    RES_PRINT       reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    VAR             reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    RES_DEF         reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    RES_IF          reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    RES_SWITCH      reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    RES_WHILE       reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    RES_FOR         reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    RES_START       reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    $end            reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    RES_END         reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    RES_ELSE        reduce using rule 89 (expresion -> exp MAY_EQ zexp .)
    RES_CASE        reduce using rule 89 (expresion -> exp MAY_EQ zexp .)


state 167

    (90) expresion -> exp DIF zexp .

    COMMA           reduce using rule 90 (expresion -> exp DIF zexp .)
    RPAREN          reduce using rule 90 (expresion -> exp DIF zexp .)
    COL             reduce using rule 90 (expresion -> exp DIF zexp .)
    llamadas        reduce using rule 90 (expresion -> exp DIF zexp .)
    RES_READ        reduce using rule 90 (expresion -> exp DIF zexp .)
    RES_PRINT       reduce using rule 90 (expresion -> exp DIF zexp .)
    VAR             reduce using rule 90 (expresion -> exp DIF zexp .)
    RES_DEF         reduce using rule 90 (expresion -> exp DIF zexp .)
    RES_IF          reduce using rule 90 (expresion -> exp DIF zexp .)
    RES_SWITCH      reduce using rule 90 (expresion -> exp DIF zexp .)
    RES_WHILE       reduce using rule 90 (expresion -> exp DIF zexp .)
    RES_FOR         reduce using rule 90 (expresion -> exp DIF zexp .)
    RES_START       reduce using rule 90 (expresion -> exp DIF zexp .)
    $end            reduce using rule 90 (expresion -> exp DIF zexp .)
    RES_END         reduce using rule 90 (expresion -> exp DIF zexp .)
    RES_ELSE        reduce using rule 90 (expresion -> exp DIF zexp .)
    RES_CASE        reduce using rule 90 (expresion -> exp DIF zexp .)


state 168

    (55) escritura1 -> expresion COMMA escritura1 .

    RPAREN          reduce using rule 55 (escritura1 -> expresion COMMA escritura1 .)


state 169

    (56) escritura1 -> CTE_STRING COMMA escritura1 .

    RPAREN          reduce using rule 56 (escritura1 -> CTE_STRING COMMA escritura1 .)


state 170

    (71) while -> RES_WHILE LPAREN expresion RPAREN COL . bloque
    (36) bloque -> . estatutos bloque
    (37) bloque -> . estatutos
    (38) bloque -> . empty
    (41) estatutos -> . condicion
    (42) estatutos -> . ciclo
    (43) estatutos -> . lectura
    (44) estatutos -> . escritura
    (45) estatutos -> . asignacion
    (46) estatutos -> . llamadas
    (47) estatutos -> . vars
    (113) empty -> .
    (48) condicion -> . if
    (49) condicion -> . switch
    (39) ciclo -> . while
    (40) ciclo -> . for
    (53) lectura -> . RES_READ LPAREN tipo RPAREN
    (54) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (59) asignacion -> . VAR EQUALS asignacion1
    (15) vars -> . RES_DEF vars1
    (80) if -> . RES_IF LPAREN expresion RPAREN COL bloque
    (81) if -> . RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque
    (82) switch -> . RES_SWITCH COL switch2
    (71) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (72) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

  ! shift/reduce conflict for llamadas resolved as shift
  ! shift/reduce conflict for RES_READ resolved as shift
  ! shift/reduce conflict for RES_PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for RES_DEF resolved as shift
  ! shift/reduce conflict for RES_IF resolved as shift
  ! shift/reduce conflict for RES_SWITCH resolved as shift
  ! shift/reduce conflict for RES_WHILE resolved as shift
  ! shift/reduce conflict for RES_FOR resolved as shift
    llamadas        shift and go to state 42
    RES_START       reduce using rule 113 (empty -> .)
    $end            reduce using rule 113 (empty -> .)
    RES_END         reduce using rule 113 (empty -> .)
    RES_ELSE        reduce using rule 113 (empty -> .)
    RES_CASE        reduce using rule 113 (empty -> .)
    RES_READ        shift and go to state 57
    RES_PRINT       shift and go to state 45
    VAR             shift and go to state 56
    RES_DEF         shift and go to state 49
    RES_IF          shift and go to state 44
    RES_SWITCH      shift and go to state 59
    RES_WHILE       shift and go to state 55
    RES_FOR         shift and go to state 41

  ! llamadas        [ reduce using rule 113 (empty -> .) ]
  ! RES_READ        [ reduce using rule 113 (empty -> .) ]
  ! RES_PRINT       [ reduce using rule 113 (empty -> .) ]
  ! VAR             [ reduce using rule 113 (empty -> .) ]
  ! RES_DEF         [ reduce using rule 113 (empty -> .) ]
  ! RES_IF          [ reduce using rule 113 (empty -> .) ]
  ! RES_SWITCH      [ reduce using rule 113 (empty -> .) ]
  ! RES_WHILE       [ reduce using rule 113 (empty -> .) ]
  ! RES_FOR         [ reduce using rule 113 (empty -> .) ]

    ciclo                          shift and go to state 46
    asignacion                     shift and go to state 58
    vars                           shift and go to state 40
    while                          shift and go to state 60
    for                            shift and go to state 47
    switch                         shift and go to state 48
    estatutos                      shift and go to state 54
    condicion                      shift and go to state 50
    bloque                         shift and go to state 184
    if                             shift and go to state 51
    lectura                        shift and go to state 52
    empty                          shift and go to state 53
    escritura                      shift and go to state 61

state 171

    (70) asignarray1 -> cons COMMA . asignarray1
    (69) asignarray1 -> . cons
    (70) asignarray1 -> . cons COMMA asignarray1
    (102) cons -> . ID
    (103) cons -> . CTE_INT
    (104) cons -> . CTE_FLOAT
    (105) cons -> . CTE_STRING
    (106) cons -> . consarray
    (107) cons -> . conslist
    (109) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 70
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 67
    CTE_STRING      shift and go to state 64

    conslist                       shift and go to state 68
    cons                           shift and go to state 145
    asignarray1                    shift and go to state 185
    consarray                      shift and go to state 66

state 172

    (68) asignarray -> LBRACKET asignarray1 RBRACKET .

    llamadas        reduce using rule 68 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_READ        reduce using rule 68 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_PRINT       reduce using rule 68 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    VAR             reduce using rule 68 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_DEF         reduce using rule 68 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_IF          reduce using rule 68 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_SWITCH      reduce using rule 68 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_WHILE       reduce using rule 68 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_FOR         reduce using rule 68 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_START       reduce using rule 68 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    $end            reduce using rule 68 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_END         reduce using rule 68 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_ELSE        reduce using rule 68 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_CASE        reduce using rule 68 (asignarray -> LBRACKET asignarray1 RBRACKET .)


state 173

    (65) asignlist -> LCURLY asignlist1 RCURLY .

    llamadas        reduce using rule 65 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_READ        reduce using rule 65 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_PRINT       reduce using rule 65 (asignlist -> LCURLY asignlist1 RCURLY .)
    VAR             reduce using rule 65 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_DEF         reduce using rule 65 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_IF          reduce using rule 65 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_SWITCH      reduce using rule 65 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_WHILE       reduce using rule 65 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_FOR         reduce using rule 65 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_START       reduce using rule 65 (asignlist -> LCURLY asignlist1 RCURLY .)
    $end            reduce using rule 65 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_END         reduce using rule 65 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_ELSE        reduce using rule 65 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_CASE        reduce using rule 65 (asignlist -> LCURLY asignlist1 RCURLY .)


state 174

    (67) asignlist1 -> cons COMMA . asignlist1
    (66) asignlist1 -> . cons
    (67) asignlist1 -> . cons COMMA asignlist1
    (102) cons -> . ID
    (103) cons -> . CTE_INT
    (104) cons -> . CTE_FLOAT
    (105) cons -> . CTE_STRING
    (106) cons -> . consarray
    (107) cons -> . conslist
    (109) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 70
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 67
    CTE_STRING      shift and go to state 64

    asignlist1                     shift and go to state 186
    conslist                       shift and go to state 68
    cons                           shift and go to state 148
    consarray                      shift and go to state 66

state 175

    (83) switch2 -> RES_CASE expresion COL . bloque switch2
    (36) bloque -> . estatutos bloque
    (37) bloque -> . estatutos
    (38) bloque -> . empty
    (41) estatutos -> . condicion
    (42) estatutos -> . ciclo
    (43) estatutos -> . lectura
    (44) estatutos -> . escritura
    (45) estatutos -> . asignacion
    (46) estatutos -> . llamadas
    (47) estatutos -> . vars
    (113) empty -> .
    (48) condicion -> . if
    (49) condicion -> . switch
    (39) ciclo -> . while
    (40) ciclo -> . for
    (53) lectura -> . RES_READ LPAREN tipo RPAREN
    (54) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (59) asignacion -> . VAR EQUALS asignacion1
    (15) vars -> . RES_DEF vars1
    (80) if -> . RES_IF LPAREN expresion RPAREN COL bloque
    (81) if -> . RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque
    (82) switch -> . RES_SWITCH COL switch2
    (71) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (72) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

  ! shift/reduce conflict for llamadas resolved as shift
  ! shift/reduce conflict for RES_READ resolved as shift
  ! shift/reduce conflict for RES_PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for RES_DEF resolved as shift
  ! shift/reduce conflict for RES_IF resolved as shift
  ! shift/reduce conflict for RES_SWITCH resolved as shift
  ! shift/reduce conflict for RES_WHILE resolved as shift
  ! shift/reduce conflict for RES_FOR resolved as shift
    llamadas        shift and go to state 42
    RES_START       reduce using rule 113 (empty -> .)
    $end            reduce using rule 113 (empty -> .)
    RES_END         reduce using rule 113 (empty -> .)
    RES_ELSE        reduce using rule 113 (empty -> .)
    RES_CASE        reduce using rule 113 (empty -> .)
    RES_READ        shift and go to state 57
    RES_PRINT       shift and go to state 45
    VAR             shift and go to state 56
    RES_DEF         shift and go to state 49
    RES_IF          shift and go to state 44
    RES_SWITCH      shift and go to state 59
    RES_WHILE       shift and go to state 55
    RES_FOR         shift and go to state 41

  ! llamadas        [ reduce using rule 113 (empty -> .) ]
  ! RES_READ        [ reduce using rule 113 (empty -> .) ]
  ! RES_PRINT       [ reduce using rule 113 (empty -> .) ]
  ! VAR             [ reduce using rule 113 (empty -> .) ]
  ! RES_DEF         [ reduce using rule 113 (empty -> .) ]
  ! RES_IF          [ reduce using rule 113 (empty -> .) ]
  ! RES_SWITCH      [ reduce using rule 113 (empty -> .) ]
  ! RES_WHILE       [ reduce using rule 113 (empty -> .) ]
  ! RES_FOR         [ reduce using rule 113 (empty -> .) ]

    ciclo                          shift and go to state 46
    asignacion                     shift and go to state 58
    vars                           shift and go to state 40
    while                          shift and go to state 60
    for                            shift and go to state 47
    switch                         shift and go to state 48
    estatutos                      shift and go to state 54
    condicion                      shift and go to state 50
    bloque                         shift and go to state 187
    if                             shift and go to state 51
    lectura                        shift and go to state 52
    empty                          shift and go to state 53
    escritura                      shift and go to state 61

state 176

    (112) conslist1 -> cons COMMA . conslist1
    (111) conslist1 -> . cons
    (112) conslist1 -> . cons COMMA conslist1
    (102) cons -> . ID
    (103) cons -> . CTE_INT
    (104) cons -> . CTE_FLOAT
    (105) cons -> . CTE_STRING
    (106) cons -> . consarray
    (107) cons -> . conslist
    (109) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 70
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 67
    CTE_STRING      shift and go to state 64

    conslist1                      shift and go to state 188
    conslist                       shift and go to state 68
    cons                           shift and go to state 151
    consarray                      shift and go to state 66

state 177

    (110) conslist -> ID EQUALS LCURLY conslist1 RCURLY .

    COL             reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    COMMA           reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RBRACKET        reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_INT         reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FLOAT       reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_BOOLEAN     reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_STRING      reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_LIST        reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_ARRAY       reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    FUNC            reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_START       reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    llamadas        reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_READ        reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_PRINT       reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    VAR             reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_DEF         reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_IF          reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_SWITCH      reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_WHILE       reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FOR         reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    $end            reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_END         reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_ELSE        reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_CASE        reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    TIMES           reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    DIVIDE          reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    PLUS            reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MINUS           reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MIN             reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MIN_EQ          reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MAY             reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MAY_EQ          reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    DIF             reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RPAREN          reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RCURLY          reduce using rule 110 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)


state 178

    (109) consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS . cons
    (102) cons -> . ID
    (103) cons -> . CTE_INT
    (104) cons -> . CTE_FLOAT
    (105) cons -> . CTE_STRING
    (106) cons -> . consarray
    (107) cons -> . conslist
    (109) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 70
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 67
    CTE_STRING      shift and go to state 64

    conslist                       shift and go to state 68
    cons                           shift and go to state 189
    consarray                      shift and go to state 66

state 179

    (32) array2 -> cons .
    (33) array2 -> cons . COMMA array2

    RBRACKET        reduce using rule 32 (array2 -> cons .)
    COMMA           shift and go to state 190


state 180

    (30) array1 -> COL LBRACKET array2 . RBRACKET

    RBRACKET        shift and go to state 191


state 181

    (73) forexp -> ID EQUALS cons COL . ID comparacion ID COL ID EQUALS expresion
    (74) forexp -> ID EQUALS cons COL . ID comparacion cons COL ID EQUALS expresion

    ID              shift and go to state 192


state 182

    (72) for -> RES_FOR LPAREN forexp RPAREN COL bloque .

    llamadas        reduce using rule 72 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)
    RES_READ        reduce using rule 72 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)
    RES_PRINT       reduce using rule 72 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)
    VAR             reduce using rule 72 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)
    RES_DEF         reduce using rule 72 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)
    RES_IF          reduce using rule 72 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)
    RES_SWITCH      reduce using rule 72 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)
    RES_WHILE       reduce using rule 72 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)
    RES_FOR         reduce using rule 72 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)
    RES_START       reduce using rule 72 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)
    $end            reduce using rule 72 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)
    RES_END         reduce using rule 72 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)
    RES_ELSE        reduce using rule 72 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)
    RES_CASE        reduce using rule 72 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)


state 183

    (80) if -> RES_IF LPAREN expresion RPAREN COL bloque .
    (81) if -> RES_IF LPAREN expresion RPAREN COL bloque . RES_ELSE COL bloque

  ! shift/reduce conflict for RES_ELSE resolved as shift
    llamadas        reduce using rule 80 (if -> RES_IF LPAREN expresion RPAREN COL bloque .)
    RES_READ        reduce using rule 80 (if -> RES_IF LPAREN expresion RPAREN COL bloque .)
    RES_PRINT       reduce using rule 80 (if -> RES_IF LPAREN expresion RPAREN COL bloque .)
    VAR             reduce using rule 80 (if -> RES_IF LPAREN expresion RPAREN COL bloque .)
    RES_DEF         reduce using rule 80 (if -> RES_IF LPAREN expresion RPAREN COL bloque .)
    RES_IF          reduce using rule 80 (if -> RES_IF LPAREN expresion RPAREN COL bloque .)
    RES_SWITCH      reduce using rule 80 (if -> RES_IF LPAREN expresion RPAREN COL bloque .)
    RES_WHILE       reduce using rule 80 (if -> RES_IF LPAREN expresion RPAREN COL bloque .)
    RES_FOR         reduce using rule 80 (if -> RES_IF LPAREN expresion RPAREN COL bloque .)
    RES_START       reduce using rule 80 (if -> RES_IF LPAREN expresion RPAREN COL bloque .)
    $end            reduce using rule 80 (if -> RES_IF LPAREN expresion RPAREN COL bloque .)
    RES_END         reduce using rule 80 (if -> RES_IF LPAREN expresion RPAREN COL bloque .)
    RES_CASE        reduce using rule 80 (if -> RES_IF LPAREN expresion RPAREN COL bloque .)
    RES_ELSE        shift and go to state 193

  ! RES_ELSE        [ reduce using rule 80 (if -> RES_IF LPAREN expresion RPAREN COL bloque .) ]


state 184

    (71) while -> RES_WHILE LPAREN expresion RPAREN COL bloque .

    llamadas        reduce using rule 71 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)
    RES_READ        reduce using rule 71 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)
    RES_PRINT       reduce using rule 71 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)
    VAR             reduce using rule 71 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)
    RES_DEF         reduce using rule 71 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)
    RES_IF          reduce using rule 71 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)
    RES_SWITCH      reduce using rule 71 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)
    RES_WHILE       reduce using rule 71 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)
    RES_FOR         reduce using rule 71 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)
    RES_START       reduce using rule 71 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)
    $end            reduce using rule 71 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)
    RES_END         reduce using rule 71 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)
    RES_ELSE        reduce using rule 71 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)
    RES_CASE        reduce using rule 71 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)


state 185

    (70) asignarray1 -> cons COMMA asignarray1 .

    RBRACKET        reduce using rule 70 (asignarray1 -> cons COMMA asignarray1 .)


state 186

    (67) asignlist1 -> cons COMMA asignlist1 .

    RCURLY          reduce using rule 67 (asignlist1 -> cons COMMA asignlist1 .)


state 187

    (83) switch2 -> RES_CASE expresion COL bloque . switch2
    (83) switch2 -> . RES_CASE expresion COL bloque switch2
    (84) switch2 -> . empty
    (113) empty -> .

  ! shift/reduce conflict for RES_CASE resolved as shift
    RES_CASE        shift and go to state 115
    llamadas        reduce using rule 113 (empty -> .)
    RES_READ        reduce using rule 113 (empty -> .)
    RES_PRINT       reduce using rule 113 (empty -> .)
    VAR             reduce using rule 113 (empty -> .)
    RES_DEF         reduce using rule 113 (empty -> .)
    RES_IF          reduce using rule 113 (empty -> .)
    RES_SWITCH      reduce using rule 113 (empty -> .)
    RES_WHILE       reduce using rule 113 (empty -> .)
    RES_FOR         reduce using rule 113 (empty -> .)
    RES_START       reduce using rule 113 (empty -> .)
    $end            reduce using rule 113 (empty -> .)
    RES_END         reduce using rule 113 (empty -> .)
    RES_ELSE        reduce using rule 113 (empty -> .)

  ! RES_CASE        [ reduce using rule 113 (empty -> .) ]

    switch2                        shift and go to state 194
    empty                          shift and go to state 116

state 188

    (112) conslist1 -> cons COMMA conslist1 .

    RCURLY          reduce using rule 112 (conslist1 -> cons COMMA conslist1 .)


state 189

    (109) consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .

    COMMA           reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RCURLY          reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    TIMES           reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    DIVIDE          reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    PLUS            reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MINUS           reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MIN             reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MIN_EQ          reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MAY             reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MAY_EQ          reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    DIF             reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RPAREN          reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    llamadas        reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_READ        reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_PRINT       reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    VAR             reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_DEF         reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_IF          reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_SWITCH      reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_WHILE       reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_FOR         reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_START       reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    $end            reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_END         reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_ELSE        reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_CASE        reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    COL             reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_INT         reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_FLOAT       reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_BOOLEAN     reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_STRING      reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_LIST        reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_ARRAY       reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    FUNC            reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RBRACKET        reduce using rule 109 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)


state 190

    (33) array2 -> cons COMMA . array2
    (32) array2 -> . cons
    (33) array2 -> . cons COMMA array2
    (102) cons -> . ID
    (103) cons -> . CTE_INT
    (104) cons -> . CTE_FLOAT
    (105) cons -> . CTE_STRING
    (106) cons -> . consarray
    (107) cons -> . conslist
    (109) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 70
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 67
    CTE_STRING      shift and go to state 64

    array2                         shift and go to state 195
    conslist                       shift and go to state 68
    cons                           shift and go to state 179
    consarray                      shift and go to state 66

state 191

    (30) array1 -> COL LBRACKET array2 RBRACKET .

    RES_INT         reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_FLOAT       reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_BOOLEAN     reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_STRING      reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_LIST        reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_ARRAY       reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    FUNC            reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_START       reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    llamadas        reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_READ        reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_PRINT       reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    VAR             reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_DEF         reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_IF          reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_SWITCH      reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_WHILE       reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_FOR         reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    $end            reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_END         reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_ELSE        reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_CASE        reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    ID              reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)
    RPAREN          reduce using rule 30 (array1 -> COL LBRACKET array2 RBRACKET .)


state 192

    (73) forexp -> ID EQUALS cons COL ID . comparacion ID COL ID EQUALS expresion
    (74) forexp -> ID EQUALS cons COL ID . comparacion cons COL ID EQUALS expresion
    (75) comparacion -> . MAY
    (76) comparacion -> . MAY_EQ
    (77) comparacion -> . MIN
    (78) comparacion -> . MIN_EQ
    (79) comparacion -> . DIF

    MAY             shift and go to state 197
    MAY_EQ          shift and go to state 198
    MIN             shift and go to state 196
    MIN_EQ          shift and go to state 199
    DIF             shift and go to state 201

    comparacion                    shift and go to state 200

state 193

    (81) if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE . COL bloque

    COL             shift and go to state 202


state 194

    (83) switch2 -> RES_CASE expresion COL bloque switch2 .

    llamadas        reduce using rule 83 (switch2 -> RES_CASE expresion COL bloque switch2 .)
    RES_READ        reduce using rule 83 (switch2 -> RES_CASE expresion COL bloque switch2 .)
    RES_PRINT       reduce using rule 83 (switch2 -> RES_CASE expresion COL bloque switch2 .)
    VAR             reduce using rule 83 (switch2 -> RES_CASE expresion COL bloque switch2 .)
    RES_DEF         reduce using rule 83 (switch2 -> RES_CASE expresion COL bloque switch2 .)
    RES_IF          reduce using rule 83 (switch2 -> RES_CASE expresion COL bloque switch2 .)
    RES_SWITCH      reduce using rule 83 (switch2 -> RES_CASE expresion COL bloque switch2 .)
    RES_WHILE       reduce using rule 83 (switch2 -> RES_CASE expresion COL bloque switch2 .)
    RES_FOR         reduce using rule 83 (switch2 -> RES_CASE expresion COL bloque switch2 .)
    RES_START       reduce using rule 83 (switch2 -> RES_CASE expresion COL bloque switch2 .)
    $end            reduce using rule 83 (switch2 -> RES_CASE expresion COL bloque switch2 .)
    RES_END         reduce using rule 83 (switch2 -> RES_CASE expresion COL bloque switch2 .)
    RES_ELSE        reduce using rule 83 (switch2 -> RES_CASE expresion COL bloque switch2 .)
    RES_CASE        reduce using rule 83 (switch2 -> RES_CASE expresion COL bloque switch2 .)


state 195

    (33) array2 -> cons COMMA array2 .

    RBRACKET        reduce using rule 33 (array2 -> cons COMMA array2 .)


state 196

    (77) comparacion -> MIN .

    ID              reduce using rule 77 (comparacion -> MIN .)
    CTE_INT         reduce using rule 77 (comparacion -> MIN .)
    CTE_FLOAT       reduce using rule 77 (comparacion -> MIN .)
    CTE_STRING      reduce using rule 77 (comparacion -> MIN .)


state 197

    (75) comparacion -> MAY .

    ID              reduce using rule 75 (comparacion -> MAY .)
    CTE_INT         reduce using rule 75 (comparacion -> MAY .)
    CTE_FLOAT       reduce using rule 75 (comparacion -> MAY .)
    CTE_STRING      reduce using rule 75 (comparacion -> MAY .)


state 198

    (76) comparacion -> MAY_EQ .

    ID              reduce using rule 76 (comparacion -> MAY_EQ .)
    CTE_INT         reduce using rule 76 (comparacion -> MAY_EQ .)
    CTE_FLOAT       reduce using rule 76 (comparacion -> MAY_EQ .)
    CTE_STRING      reduce using rule 76 (comparacion -> MAY_EQ .)


state 199

    (78) comparacion -> MIN_EQ .

    ID              reduce using rule 78 (comparacion -> MIN_EQ .)
    CTE_INT         reduce using rule 78 (comparacion -> MIN_EQ .)
    CTE_FLOAT       reduce using rule 78 (comparacion -> MIN_EQ .)
    CTE_STRING      reduce using rule 78 (comparacion -> MIN_EQ .)


state 200

    (73) forexp -> ID EQUALS cons COL ID comparacion . ID COL ID EQUALS expresion
    (74) forexp -> ID EQUALS cons COL ID comparacion . cons COL ID EQUALS expresion
    (102) cons -> . ID
    (103) cons -> . CTE_INT
    (104) cons -> . CTE_FLOAT
    (105) cons -> . CTE_STRING
    (106) cons -> . consarray
    (107) cons -> . conslist
    (109) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 204
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 67
    CTE_STRING      shift and go to state 64

    conslist                       shift and go to state 68
    consarray                      shift and go to state 66
    cons                           shift and go to state 203

state 201

    (79) comparacion -> DIF .

    ID              reduce using rule 79 (comparacion -> DIF .)
    CTE_INT         reduce using rule 79 (comparacion -> DIF .)
    CTE_FLOAT       reduce using rule 79 (comparacion -> DIF .)
    CTE_STRING      reduce using rule 79 (comparacion -> DIF .)


state 202

    (81) if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL . bloque
    (36) bloque -> . estatutos bloque
    (37) bloque -> . estatutos
    (38) bloque -> . empty
    (41) estatutos -> . condicion
    (42) estatutos -> . ciclo
    (43) estatutos -> . lectura
    (44) estatutos -> . escritura
    (45) estatutos -> . asignacion
    (46) estatutos -> . llamadas
    (47) estatutos -> . vars
    (113) empty -> .
    (48) condicion -> . if
    (49) condicion -> . switch
    (39) ciclo -> . while
    (40) ciclo -> . for
    (53) lectura -> . RES_READ LPAREN tipo RPAREN
    (54) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (59) asignacion -> . VAR EQUALS asignacion1
    (15) vars -> . RES_DEF vars1
    (80) if -> . RES_IF LPAREN expresion RPAREN COL bloque
    (81) if -> . RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque
    (82) switch -> . RES_SWITCH COL switch2
    (71) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (72) for -> . RES_FOR LPAREN forexp RPAREN COL bloque

  ! shift/reduce conflict for llamadas resolved as shift
  ! shift/reduce conflict for RES_READ resolved as shift
  ! shift/reduce conflict for RES_PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for RES_DEF resolved as shift
  ! shift/reduce conflict for RES_IF resolved as shift
  ! shift/reduce conflict for RES_SWITCH resolved as shift
  ! shift/reduce conflict for RES_WHILE resolved as shift
  ! shift/reduce conflict for RES_FOR resolved as shift
    llamadas        shift and go to state 42
    RES_START       reduce using rule 113 (empty -> .)
    $end            reduce using rule 113 (empty -> .)
    RES_END         reduce using rule 113 (empty -> .)
    RES_ELSE        reduce using rule 113 (empty -> .)
    RES_CASE        reduce using rule 113 (empty -> .)
    RES_READ        shift and go to state 57
    RES_PRINT       shift and go to state 45
    VAR             shift and go to state 56
    RES_DEF         shift and go to state 49
    RES_IF          shift and go to state 44
    RES_SWITCH      shift and go to state 59
    RES_WHILE       shift and go to state 55
    RES_FOR         shift and go to state 41

  ! llamadas        [ reduce using rule 113 (empty -> .) ]
  ! RES_READ        [ reduce using rule 113 (empty -> .) ]
  ! RES_PRINT       [ reduce using rule 113 (empty -> .) ]
  ! VAR             [ reduce using rule 113 (empty -> .) ]
  ! RES_DEF         [ reduce using rule 113 (empty -> .) ]
  ! RES_IF          [ reduce using rule 113 (empty -> .) ]
  ! RES_SWITCH      [ reduce using rule 113 (empty -> .) ]
  ! RES_WHILE       [ reduce using rule 113 (empty -> .) ]
  ! RES_FOR         [ reduce using rule 113 (empty -> .) ]

    ciclo                          shift and go to state 46
    asignacion                     shift and go to state 58
    vars                           shift and go to state 40
    while                          shift and go to state 60
    for                            shift and go to state 47
    switch                         shift and go to state 48
    estatutos                      shift and go to state 54
    condicion                      shift and go to state 50
    bloque                         shift and go to state 205
    if                             shift and go to state 51
    lectura                        shift and go to state 52
    empty                          shift and go to state 53
    escritura                      shift and go to state 61

state 203

    (74) forexp -> ID EQUALS cons COL ID comparacion cons . COL ID EQUALS expresion

    COL             shift and go to state 206


state 204

    (73) forexp -> ID EQUALS cons COL ID comparacion ID . COL ID EQUALS expresion
    (102) cons -> ID .
    (109) consarray -> ID . LBRACKET CTE_INT RBRACKET EQUALS cons
    (110) conslist -> ID . EQUALS LCURLY conslist1 RCURLY

  ! shift/reduce conflict for COL resolved as shift
    COL             shift and go to state 207
    LBRACKET        shift and go to state 88
    EQUALS          shift and go to state 87

  ! COL             [ reduce using rule 102 (cons -> ID .) ]


state 205

    (81) if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque .

    llamadas        reduce using rule 81 (if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque .)
    RES_READ        reduce using rule 81 (if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque .)
    RES_PRINT       reduce using rule 81 (if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque .)
    VAR             reduce using rule 81 (if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque .)
    RES_DEF         reduce using rule 81 (if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque .)
    RES_IF          reduce using rule 81 (if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque .)
    RES_SWITCH      reduce using rule 81 (if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque .)
    RES_WHILE       reduce using rule 81 (if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque .)
    RES_FOR         reduce using rule 81 (if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque .)
    RES_START       reduce using rule 81 (if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque .)
    $end            reduce using rule 81 (if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque .)
    RES_END         reduce using rule 81 (if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque .)
    RES_ELSE        reduce using rule 81 (if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque .)
    RES_CASE        reduce using rule 81 (if -> RES_IF LPAREN expresion RPAREN COL bloque RES_ELSE COL bloque .)


state 206

    (74) forexp -> ID EQUALS cons COL ID comparacion cons COL . ID EQUALS expresion

    ID              shift and go to state 208


state 207

    (73) forexp -> ID EQUALS cons COL ID comparacion ID COL . ID EQUALS expresion

    ID              shift and go to state 209


state 208

    (74) forexp -> ID EQUALS cons COL ID comparacion cons COL ID . EQUALS expresion

    EQUALS          shift and go to state 210


state 209

    (73) forexp -> ID EQUALS cons COL ID comparacion ID COL ID . EQUALS expresion

    EQUALS          shift and go to state 211


state 210

    (74) forexp -> ID EQUALS cons COL ID comparacion cons COL ID EQUALS . expresion
    (85) expresion -> . exp
    (86) expresion -> . exp MIN zexp
    (87) expresion -> . exp MIN_EQ zexp
    (88) expresion -> . exp MAY zexp
    (89) expresion -> . exp MAY_EQ zexp
    (90) expresion -> . exp DIF zexp
    (91) exp -> . termino exp1
    (92) exp -> . termino
    (95) termino -> . factor termino1
    (96) termino -> . factor
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . PLUS cons
    (101) factor -> . MINUS cons

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 95
    MINUS           shift and go to state 100

    expresion                      shift and go to state 212
    termino                        shift and go to state 96
    exp                            shift and go to state 99
    factor                         shift and go to state 98

state 211

    (73) forexp -> ID EQUALS cons COL ID comparacion ID COL ID EQUALS . expresion
    (85) expresion -> . exp
    (86) expresion -> . exp MIN zexp
    (87) expresion -> . exp MIN_EQ zexp
    (88) expresion -> . exp MAY zexp
    (89) expresion -> . exp MAY_EQ zexp
    (90) expresion -> . exp DIF zexp
    (91) exp -> . termino exp1
    (92) exp -> . termino
    (95) termino -> . factor termino1
    (96) termino -> . factor
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . PLUS cons
    (101) factor -> . MINUS cons

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 95
    MINUS           shift and go to state 100

    expresion                      shift and go to state 213
    termino                        shift and go to state 96
    exp                            shift and go to state 99
    factor                         shift and go to state 98

state 212

    (74) forexp -> ID EQUALS cons COL ID comparacion cons COL ID EQUALS expresion .

    RPAREN          reduce using rule 74 (forexp -> ID EQUALS cons COL ID comparacion cons COL ID EQUALS expresion .)


state 213

    (73) forexp -> ID EQUALS cons COL ID comparacion ID COL ID EQUALS expresion .

    RPAREN          reduce using rule 73 (forexp -> ID EQUALS cons COL ID comparacion ID COL ID EQUALS expresion .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for llamadas in state 54 resolved as shift
WARNING: shift/reduce conflict for llamadas in state 54 resolved as shift
WARNING: shift/reduce conflict for RES_READ in state 54 resolved as shift
WARNING: shift/reduce conflict for RES_PRINT in state 54 resolved as shift
WARNING: shift/reduce conflict for VAR in state 54 resolved as shift
WARNING: shift/reduce conflict for RES_DEF in state 54 resolved as shift
WARNING: shift/reduce conflict for RES_IF in state 54 resolved as shift
WARNING: shift/reduce conflict for RES_SWITCH in state 54 resolved as shift
WARNING: shift/reduce conflict for RES_WHILE in state 54 resolved as shift
WARNING: shift/reduce conflict for RES_FOR in state 54 resolved as shift
WARNING: shift/reduce conflict for RES_CASE in state 85 resolved as shift
WARNING: shift/reduce conflict for llamadas in state 156 resolved as shift
WARNING: shift/reduce conflict for RES_READ in state 156 resolved as shift
WARNING: shift/reduce conflict for RES_PRINT in state 156 resolved as shift
WARNING: shift/reduce conflict for VAR in state 156 resolved as shift
WARNING: shift/reduce conflict for RES_DEF in state 156 resolved as shift
WARNING: shift/reduce conflict for RES_IF in state 156 resolved as shift
WARNING: shift/reduce conflict for RES_SWITCH in state 156 resolved as shift
WARNING: shift/reduce conflict for RES_WHILE in state 156 resolved as shift
WARNING: shift/reduce conflict for RES_FOR in state 156 resolved as shift
WARNING: shift/reduce conflict for llamadas in state 157 resolved as shift
WARNING: shift/reduce conflict for RES_READ in state 157 resolved as shift
WARNING: shift/reduce conflict for RES_PRINT in state 157 resolved as shift
WARNING: shift/reduce conflict for VAR in state 157 resolved as shift
WARNING: shift/reduce conflict for RES_DEF in state 157 resolved as shift
WARNING: shift/reduce conflict for RES_IF in state 157 resolved as shift
WARNING: shift/reduce conflict for RES_SWITCH in state 157 resolved as shift
WARNING: shift/reduce conflict for RES_WHILE in state 157 resolved as shift
WARNING: shift/reduce conflict for RES_FOR in state 157 resolved as shift
WARNING: shift/reduce conflict for llamadas in state 170 resolved as shift
WARNING: shift/reduce conflict for RES_READ in state 170 resolved as shift
WARNING: shift/reduce conflict for RES_PRINT in state 170 resolved as shift
WARNING: shift/reduce conflict for VAR in state 170 resolved as shift
WARNING: shift/reduce conflict for RES_DEF in state 170 resolved as shift
WARNING: shift/reduce conflict for RES_IF in state 170 resolved as shift
WARNING: shift/reduce conflict for RES_SWITCH in state 170 resolved as shift
WARNING: shift/reduce conflict for RES_WHILE in state 170 resolved as shift
WARNING: shift/reduce conflict for RES_FOR in state 170 resolved as shift
WARNING: shift/reduce conflict for llamadas in state 175 resolved as shift
WARNING: shift/reduce conflict for RES_READ in state 175 resolved as shift
WARNING: shift/reduce conflict for RES_PRINT in state 175 resolved as shift
WARNING: shift/reduce conflict for VAR in state 175 resolved as shift
WARNING: shift/reduce conflict for RES_DEF in state 175 resolved as shift
WARNING: shift/reduce conflict for RES_IF in state 175 resolved as shift
WARNING: shift/reduce conflict for RES_SWITCH in state 175 resolved as shift
WARNING: shift/reduce conflict for RES_WHILE in state 175 resolved as shift
WARNING: shift/reduce conflict for RES_FOR in state 175 resolved as shift
WARNING: shift/reduce conflict for RES_ELSE in state 183 resolved as shift
WARNING: shift/reduce conflict for RES_CASE in state 187 resolved as shift
WARNING: shift/reduce conflict for llamadas in state 202 resolved as shift
WARNING: shift/reduce conflict for RES_READ in state 202 resolved as shift
WARNING: shift/reduce conflict for RES_PRINT in state 202 resolved as shift
WARNING: shift/reduce conflict for VAR in state 202 resolved as shift
WARNING: shift/reduce conflict for RES_DEF in state 202 resolved as shift
WARNING: shift/reduce conflict for RES_IF in state 202 resolved as shift
WARNING: shift/reduce conflict for RES_SWITCH in state 202 resolved as shift
WARNING: shift/reduce conflict for RES_WHILE in state 202 resolved as shift
WARNING: shift/reduce conflict for RES_FOR in state 202 resolved as shift
WARNING: shift/reduce conflict for COL in state 204 resolved as shift
WARNING: reduce/reduce conflict in state 29 resolved using rule (modulos -> prototipos COL)
WARNING: rejected rule (empty -> <empty>) in state 29
WARNING: reduce/reduce conflict in state 54 resolved using rule (bloque -> estatutos)
WARNING: rejected rule (empty -> <empty>) in state 54
