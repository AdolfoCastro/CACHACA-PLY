Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    TAB
    AND
    LEN
    OR

Grammar

Rule 0     S' -> programa
Rule 1     programa -> ins_gt_main programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 dir_gt_main main programa3
Rule 2     programa -> empty
Rule 3     ins_gt_main -> <empty>
Rule 4     dir_gt_main -> <empty>
Rule 5     generaglo -> <empty>
Rule 6     programa1 -> RES_PROTO prototipos seen_prototipo programa1
Rule 7     programa1 -> empty
Rule 8     seen_prototipo -> <empty>
Rule 9     programa2 -> vars programa2
Rule 10    programa2 -> empty
Rule 11    valida_entra_global -> <empty>
Rule 12    valida_salir_gobal -> <empty>
Rule 13    programa3 -> programa3 modulos
Rule 14    programa3 -> empty
Rule 15    prototipos -> RES_FUNC dato seen_dato seen_nom_func LPAREN prototipos_1 RPAREN
Rule 16    seen_nom_func -> ID
Rule 17    seen_dato -> <empty>
Rule 18    prototipos_1 -> tipo seen_id_proto prototipos_2
Rule 19    prototipos_1 -> empty
Rule 20    seen_id_proto -> ID
Rule 21    prototipos_2 -> COMMA prototipos_1
Rule 22    prototipos_2 -> empty
Rule 23    dato -> RES_INT
Rule 24    dato -> RES_FLOAT
Rule 25    dato -> RES_DOUBLE
Rule 26    dato -> RES_BOOLEAN
Rule 27    dato -> RES_STRING
Rule 28    tipo -> dato
Rule 29    tipo -> estructura
Rule 30    estructura -> list
Rule 31    estructura -> array
Rule 32    vars -> RES_DEF COL vars1
Rule 33    vars_1 -> dato ID vars2 vars1_1
Rule 34    vars1 -> estructura empty
Rule 35    vars1 -> vars_1
Rule 36    vars1_1 -> vars1
Rule 37    vars1_1 -> empty
Rule 38    vars2 -> EQUALS cons
Rule 39    vars2 -> vars3
Rule 40    vars3 -> COMMA ID vars3
Rule 41    vars3 -> empty
Rule 42    list -> RES_LIST dato ID list1
Rule 43    list1 -> LCURLY cons_loop RCURLY
Rule 44    list1 -> empty
Rule 45    cons_loop -> cons cons_loop_1
Rule 46    cons_loop_1 -> COMMA cons_loop
Rule 47    cons_loop_1 -> empty
Rule 48    array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1
Rule 49    genera_ms -> <empty>
Rule 50    crea_arr -> ID
Rule 51    dim -> dim_cte dim_struct dim2
Rule 52    dim_cte -> CTE_INT
Rule 53    dim_struct -> <empty>
Rule 54    dim2 -> COMMA dim
Rule 55    dim2 -> empty
Rule 56    array1 -> COL LBRACKET array2 RBRACKET array1
Rule 57    array1 -> empty
Rule 58    array2 -> cons array3
Rule 59    array3 -> COMMA array2
Rule 60    array3 -> empty
Rule 61    modulos -> prototipos se_uso COL bloque cuad_def_proc_4
Rule 62    cuad_def_proc_4 -> <empty>
Rule 63    se_uso -> <empty>
Rule 64    bloque -> estatutos bloque
Rule 65    bloque -> return bloque
Rule 66    bloque -> empty
Rule 67    return -> RES_RETURN exp
Rule 68    estatutos -> condicion E_END
Rule 69    estatutos -> ciclo E_END
Rule 70    estatutos -> lectura
Rule 71    estatutos -> escritura
Rule 72    estatutos -> asignacion
Rule 73    estatutos -> llamada
Rule 74    estatutos -> vars
Rule 75    ciclo -> while
Rule 76    ciclo -> for
Rule 77    condicion -> if
Rule 78    condicion -> switch
Rule 79    llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4
Rule 80    call_proc_4 -> <empty>
Rule 81    seen_id_call -> ID
Rule 82    call_proc_2 -> <empty>
Rule 83    llamada1 -> exp call_proc_3 param
Rule 84    llamada1 -> empty
Rule 85    call_proc_3 -> <empty>
Rule 86    param -> COMMA exp call_proc_3 param
Rule 87    param -> empty
Rule 88    lectura -> RES_READ LPAREN tipo RPAREN
Rule 89    escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
Rule 90    cuadruplo_est_prnt -> <empty>
Rule 91    asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
Rule 92    cuadruplo_exp_8_asignacion -> <empty>
Rule 93    cuadruplo_exp_9_asignacion -> <empty>
Rule 94    seen_id_asignacion -> ID
Rule 95    insert_asignacion -> <empty>
Rule 96    asignacion1 -> exp
Rule 97    asignacion1 -> asignlist
Rule 98    asignacion1 -> asignarray
Rule 99    asignacion1 -> see_llamada
Rule 100   asignacion1 -> convert
Rule 101   convert -> TOSTR LPAREN exp RPAREN
Rule 102   convert -> TOINT LPAREN exp RPAREN
Rule 103   see_llamada -> llamada
Rule 104   asignlist -> LCURLY asignlist1 RCURLY
Rule 105   asignlist1 -> cons
Rule 106   asignlist1 -> cons COMMA asignlist1
Rule 107   asignarray -> LBRACKET asignarray1 RBRACKET
Rule 108   asignarray1 -> cons
Rule 109   asignarray1 -> cons COMMA asignarray1
Rule 110   while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
Rule 111   cuadruplo_est_while_1 -> <empty>
Rule 112   cuadruplo_est_while_2 -> <empty>
Rule 113   cuadruplo_est_while_3 -> <empty>
Rule 114   for -> RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
Rule 115   sale_update -> <empty>
Rule 116   forexp -> asignacion cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 COL entra_update asignacion
Rule 117   entra_update -> <empty>
Rule 118   cuadruplo_est_for_1 -> <empty>
Rule 119   cuadruplo_est_for_2 -> <empty>
Rule 120   cuadruplo_est_for_3 -> <empty>
Rule 121   if -> RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
Rule 122   cuadruplo_est_if_1 -> <empty>
Rule 123   ifelse -> cuadruplo_est_if_else_2 RES_ELSE COL bloque cuadruplo_est_if_else_3
Rule 124   ifelse -> empty cuadruplo_est_if_2
Rule 125   cuadruplo_est_if_2 -> <empty>
Rule 126   cuadruplo_est_if_else_2 -> <empty>
Rule 127   cuadruplo_est_if_else_3 -> <empty>
Rule 128   switch -> RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
Rule 129   seen_exp_switch -> exp
Rule 130   switch2 -> RES_CASE seen_exp_case COL seen_case_3 bloque seen_case_4 switch2
Rule 131   switch2 -> empty
Rule 132   seen_case_3 -> <empty>
Rule 133   seen_case_4 -> <empty>
Rule 134   seen_exp_case -> exp
Rule 135   expresion -> exp expresion_1 cuadruplo_exp_9
Rule 136   expresion_1 -> see_rel cuadruplo_exp_8 exp
Rule 137   expresion_1 -> empty
Rule 138   see_rel -> MIN
Rule 139   see_rel -> MIN_EQ
Rule 140   see_rel -> MAY
Rule 141   see_rel -> MAY_EQ
Rule 142   see_rel -> DIF
Rule 143   see_rel -> EQ_EQ
Rule 144   cuadruplo_exp_8 -> <empty>
Rule 145   cuadruplo_exp_9 -> <empty>
Rule 146   exp -> termino cuadruplo_exp_4 exp1
Rule 147   exp1 -> see_operador_e cuadruplos_exp_2 exp
Rule 148   exp1 -> empty
Rule 149   see_operador_e -> PLUS
Rule 150   see_operador_e -> MINUS
Rule 151   cuadruplos_exp_2 -> <empty>
Rule 152   termino -> factor cuadruplo_exp_5 termino1
Rule 153   termino1 -> see_operador_f cuadruplos_exp_3 termino
Rule 154   termino1 -> empty
Rule 155   see_operador_f -> TIMES
Rule 156   see_operador_f -> DIVIDE
Rule 157   cuadruplos_exp_3 -> <empty>
Rule 158   cuadruplo_exp_4 -> <empty>
Rule 159   cuadruplo_exp_5 -> <empty>
Rule 160   factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
Rule 161   factor -> cons
Rule 162   factor -> PLUS cons
Rule 163   factor -> MINUS cons
Rule 164   cuadruplo_exp_6 -> <empty>
Rule 165   cuadruplo_exp_7 -> <empty>
Rule 166   cons -> seen_id_cons consarray exp_1
Rule 167   cons -> seen_int_cons exp_cons_int
Rule 168   cons -> seen_float_cons exp_cons_float
Rule 169   cons -> seen_double_cons exp_cons_double
Rule 170   cons -> seen_string_cons exp_cons_string
Rule 171   cons -> seen_bool
Rule 172   cons -> conslist
Rule 173   seen_bool -> RES_TRUE
Rule 174   seen_bool -> RES_FALSE
Rule 175   seen_id_cons -> ID
Rule 176   seen_float_cons -> CTE_FLOAT
Rule 177   seen_double_cons -> CTE_DOUBLE
Rule 178   seen_string_cons -> CTE_STRING
Rule 179   seen_int_cons -> CTE_INT
Rule 180   exp_1 -> <empty>
Rule 181   exp_cons_int -> <empty>
Rule 182   exp_cons_float -> <empty>
Rule 183   exp_cons_double -> <empty>
Rule 184   exp_cons_string -> <empty>
Rule 185   main -> RES_START comienza_main COL bloque RES_END
Rule 186   comienza_main -> <empty>
Rule 187   consarray -> is_dim LBRACKET dim_pos RBRACKET
Rule 188   consarray -> empty
Rule 189   is_dim -> <empty>
Rule 190   dim_pos -> seen_int_pos dim_pos_2
Rule 191   seen_int_pos -> exp
Rule 192   dim_pos_2 -> COMMA dim_pos
Rule 193   dim_pos_2 -> empty
Rule 194   conslist -> ID EQUALS LCURLY conslist1 RCURLY
Rule 195   conslist1 -> cons
Rule 196   conslist1 -> cons COMMA conslist1
Rule 197   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
COL                  : 32 56 61 110 114 116 116 121 123 128 130 185
COMMA                : 21 40 46 54 59 86 106 109 192 196
CTE_DOUBLE           : 177
CTE_FLOAT            : 176
CTE_INT              : 52 179
CTE_STRING           : 178
DIF                  : 142
DIVIDE               : 156
EQUALS               : 38 91 194
EQ_EQ                : 143
E_END                : 68 69
ID                   : 16 20 33 40 42 50 81 94 175 194
LBRACKET             : 48 56 107 187
LCURLY               : 43 104 194
LEN                  : 
LPAREN               : 15 79 88 89 101 102 110 114 121 128 160
MAY                  : 140
MAY_EQ               : 141
MIN                  : 138
MINUS                : 150 163
MIN_EQ               : 139
OR                   : 
PLUS                 : 149 162
RBRACKET             : 48 56 107 187
RCURLY               : 43 104 194
RES_ARRAY            : 48
RES_BOOLEAN          : 26
RES_CASE             : 130
RES_DEF              : 32
RES_DOUBLE           : 25
RES_ELSE             : 123
RES_END              : 185
RES_FALSE            : 174
RES_FLOAT            : 24
RES_FOR              : 114
RES_FUNC             : 15
RES_IF               : 121
RES_INT              : 23
RES_LIST             : 42
RES_PRINT            : 89
RES_PROTO            : 6
RES_READ             : 88
RES_RETURN           : 67
RES_START            : 185
RES_STRING           : 27
RES_SWITCH           : 128
RES_TRUE             : 173
RES_WHILE            : 110
RPAREN               : 15 79 88 89 101 102 110 114 121 128 160
TAB                  : 
TIMES                : 155
TOINT                : 102
TOSTR                : 101
error                : 

Nonterminals, with rules where they appear

array                : 31
array1               : 48 56
array2               : 56 59
array3               : 58
asignacion           : 72 116 116
asignacion1          : 91
asignarray           : 98
asignarray1          : 107 109
asignlist            : 97
asignlist1           : 104 106
bloque               : 61 64 65 110 114 121 123 130 185
call_proc_2          : 79
call_proc_3          : 83 86
call_proc_4          : 79
ciclo                : 69
comienza_main        : 185
condicion            : 68
cons                 : 38 45 58 89 105 106 108 109 161 162 163 195 196
cons_loop            : 43 46
cons_loop_1          : 45
consarray            : 91 166
conslist             : 172
conslist1            : 194 196
convert              : 100
crea_arr             : 48
cuad_def_proc_4      : 61
cuadruplo_est_for_1  : 116
cuadruplo_est_for_2  : 116
cuadruplo_est_for_3  : 114
cuadruplo_est_if_1   : 121
cuadruplo_est_if_2   : 124
cuadruplo_est_if_else_2 : 123
cuadruplo_est_if_else_3 : 123
cuadruplo_est_prnt   : 89
cuadruplo_est_while_1 : 110
cuadruplo_est_while_2 : 110
cuadruplo_est_while_3 : 110
cuadruplo_exp_4      : 146
cuadruplo_exp_5      : 152
cuadruplo_exp_6      : 160
cuadruplo_exp_7      : 160
cuadruplo_exp_8      : 136
cuadruplo_exp_8_asignacion : 91
cuadruplo_exp_9      : 135
cuadruplo_exp_9_asignacion : 91
cuadruplos_exp_2     : 147
cuadruplos_exp_3     : 153
dato                 : 15 28 33 42 48
dim                  : 48 54
dim2                 : 51
dim_cte              : 51
dim_pos              : 187 192
dim_pos_2            : 190
dim_struct           : 51
dir_gt_main          : 1
empty                : 2 7 10 14 19 22 34 37 41 44 47 55 57 60 66 84 87 124 131 137 148 154 188 193
entra_update         : 116
escritura            : 71
estatutos            : 64
estructura           : 29 34
exp                  : 67 83 86 96 101 102 129 134 135 136 147 160 191
exp1                 : 146
exp_1                : 166
exp_cons_double      : 169
exp_cons_float       : 168
exp_cons_int         : 167
exp_cons_string      : 170
expresion            : 110 116 121
expresion_1          : 135
factor               : 152
for                  : 76
forexp               : 114
genera_ms            : 48
generaglo            : 1
if                   : 77
ifelse               : 121
ins_gt_main          : 1
insert_asignacion    : 91
is_dim               : 187
lectura              : 70
list                 : 30
list1                : 42
llamada              : 73 103
llamada1             : 79
main                 : 1
modulos              : 13
param                : 83 86
programa             : 0
programa1            : 1 6
programa2            : 1 9
programa3            : 1 1 13
prototipos           : 6 61
prototipos_1         : 15 21
prototipos_2         : 18
return               : 65
sale_update          : 114
se_uso               : 61
see_llamada          : 99
see_operador_e       : 147
see_operador_f       : 153
see_rel              : 136
seen_bool            : 171
seen_case_3          : 130
seen_case_4          : 130
seen_dato            : 15
seen_double_cons     : 169
seen_exp_case        : 130
seen_exp_switch      : 128
seen_float_cons      : 168
seen_id_asignacion   : 91
seen_id_call         : 79
seen_id_cons         : 166
seen_id_proto        : 18
seen_int_cons        : 167
seen_int_pos         : 190
seen_nom_func        : 15
seen_prototipo       : 6
seen_string_cons     : 170
switch               : 78
switch2              : 128 130
termino              : 146 153
termino1             : 152
tipo                 : 18 88
valida_entra_global  : 1
valida_salir_gobal   : 1
vars                 : 9 74
vars1                : 32 36
vars1_1              : 33
vars2                : 33
vars3                : 39 40
vars_1               : 35
while                : 75

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . ins_gt_main programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 dir_gt_main main programa3
    (2) programa -> . empty
    (3) ins_gt_main -> .
    (197) empty -> .

    RES_PROTO       reduce using rule 3 (ins_gt_main -> .)
    RES_DEF         reduce using rule 3 (ins_gt_main -> .)
    RES_FUNC        reduce using rule 3 (ins_gt_main -> .)
    RES_START       reduce using rule 3 (ins_gt_main -> .)
    $end            reduce using rule 197 (empty -> .)

    ins_gt_main                    shift and go to state 1
    programa                       shift and go to state 2
    empty                          shift and go to state 3

state 1

    (1) programa -> ins_gt_main . programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 dir_gt_main main programa3
    (6) programa1 -> . RES_PROTO prototipos seen_prototipo programa1
    (7) programa1 -> . empty
    (197) empty -> .

    RES_PROTO       shift and go to state 5
    RES_DEF         reduce using rule 197 (empty -> .)
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)

    programa1                      shift and go to state 4
    empty                          shift and go to state 6

state 2

    (0) S' -> programa .



state 3

    (2) programa -> empty .

    $end            reduce using rule 2 (programa -> empty .)


state 4

    (1) programa -> ins_gt_main programa1 . valida_entra_global generaglo programa2 valida_salir_gobal programa3 dir_gt_main main programa3
    (11) valida_entra_global -> .

    RES_DEF         reduce using rule 11 (valida_entra_global -> .)
    RES_FUNC        reduce using rule 11 (valida_entra_global -> .)
    RES_START       reduce using rule 11 (valida_entra_global -> .)

    valida_entra_global            shift and go to state 7

state 5

    (6) programa1 -> RES_PROTO . prototipos seen_prototipo programa1
    (15) prototipos -> . RES_FUNC dato seen_dato seen_nom_func LPAREN prototipos_1 RPAREN

    RES_FUNC        shift and go to state 9

    prototipos                     shift and go to state 8

state 6

    (7) programa1 -> empty .

    RES_DEF         reduce using rule 7 (programa1 -> empty .)
    RES_FUNC        reduce using rule 7 (programa1 -> empty .)
    RES_START       reduce using rule 7 (programa1 -> empty .)


state 7

    (1) programa -> ins_gt_main programa1 valida_entra_global . generaglo programa2 valida_salir_gobal programa3 dir_gt_main main programa3
    (5) generaglo -> .

    RES_DEF         reduce using rule 5 (generaglo -> .)
    RES_FUNC        reduce using rule 5 (generaglo -> .)
    RES_START       reduce using rule 5 (generaglo -> .)

    generaglo                      shift and go to state 10

state 8

    (6) programa1 -> RES_PROTO prototipos . seen_prototipo programa1
    (8) seen_prototipo -> .

    RES_PROTO       reduce using rule 8 (seen_prototipo -> .)
    RES_DEF         reduce using rule 8 (seen_prototipo -> .)
    RES_FUNC        reduce using rule 8 (seen_prototipo -> .)
    RES_START       reduce using rule 8 (seen_prototipo -> .)

    seen_prototipo                 shift and go to state 11

state 9

    (15) prototipos -> RES_FUNC . dato seen_dato seen_nom_func LPAREN prototipos_1 RPAREN
    (23) dato -> . RES_INT
    (24) dato -> . RES_FLOAT
    (25) dato -> . RES_DOUBLE
    (26) dato -> . RES_BOOLEAN
    (27) dato -> . RES_STRING

    RES_INT         shift and go to state 13
    RES_FLOAT       shift and go to state 17
    RES_DOUBLE      shift and go to state 15
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 14

    dato                           shift and go to state 16

state 10

    (1) programa -> ins_gt_main programa1 valida_entra_global generaglo . programa2 valida_salir_gobal programa3 dir_gt_main main programa3
    (9) programa2 -> . vars programa2
    (10) programa2 -> . empty
    (32) vars -> . RES_DEF COL vars1
    (197) empty -> .

    RES_DEF         shift and go to state 20
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)

    vars                           shift and go to state 18
    programa2                      shift and go to state 19
    empty                          shift and go to state 21

state 11

    (6) programa1 -> RES_PROTO prototipos seen_prototipo . programa1
    (6) programa1 -> . RES_PROTO prototipos seen_prototipo programa1
    (7) programa1 -> . empty
    (197) empty -> .

    RES_PROTO       shift and go to state 5
    RES_DEF         reduce using rule 197 (empty -> .)
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)

    empty                          shift and go to state 6
    programa1                      shift and go to state 22

state 12

    (26) dato -> RES_BOOLEAN .

    ID              reduce using rule 26 (dato -> RES_BOOLEAN .)
    RPAREN          reduce using rule 26 (dato -> RES_BOOLEAN .)


state 13

    (23) dato -> RES_INT .

    ID              reduce using rule 23 (dato -> RES_INT .)
    RPAREN          reduce using rule 23 (dato -> RES_INT .)


state 14

    (27) dato -> RES_STRING .

    ID              reduce using rule 27 (dato -> RES_STRING .)
    RPAREN          reduce using rule 27 (dato -> RES_STRING .)


state 15

    (25) dato -> RES_DOUBLE .

    ID              reduce using rule 25 (dato -> RES_DOUBLE .)
    RPAREN          reduce using rule 25 (dato -> RES_DOUBLE .)


state 16

    (15) prototipos -> RES_FUNC dato . seen_dato seen_nom_func LPAREN prototipos_1 RPAREN
    (17) seen_dato -> .

    ID              reduce using rule 17 (seen_dato -> .)

    seen_dato                      shift and go to state 23

state 17

    (24) dato -> RES_FLOAT .

    ID              reduce using rule 24 (dato -> RES_FLOAT .)
    RPAREN          reduce using rule 24 (dato -> RES_FLOAT .)


state 18

    (9) programa2 -> vars . programa2
    (9) programa2 -> . vars programa2
    (10) programa2 -> . empty
    (32) vars -> . RES_DEF COL vars1
    (197) empty -> .

    RES_DEF         shift and go to state 20
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)

    programa2                      shift and go to state 24
    empty                          shift and go to state 21
    vars                           shift and go to state 18

state 19

    (1) programa -> ins_gt_main programa1 valida_entra_global generaglo programa2 . valida_salir_gobal programa3 dir_gt_main main programa3
    (12) valida_salir_gobal -> .

    RES_FUNC        reduce using rule 12 (valida_salir_gobal -> .)
    RES_START       reduce using rule 12 (valida_salir_gobal -> .)

    valida_salir_gobal             shift and go to state 25

state 20

    (32) vars -> RES_DEF . COL vars1

    COL             shift and go to state 26


state 21

    (10) programa2 -> empty .

    RES_FUNC        reduce using rule 10 (programa2 -> empty .)
    RES_START       reduce using rule 10 (programa2 -> empty .)


state 22

    (6) programa1 -> RES_PROTO prototipos seen_prototipo programa1 .

    RES_DEF         reduce using rule 6 (programa1 -> RES_PROTO prototipos seen_prototipo programa1 .)
    RES_FUNC        reduce using rule 6 (programa1 -> RES_PROTO prototipos seen_prototipo programa1 .)
    RES_START       reduce using rule 6 (programa1 -> RES_PROTO prototipos seen_prototipo programa1 .)


state 23

    (15) prototipos -> RES_FUNC dato seen_dato . seen_nom_func LPAREN prototipos_1 RPAREN
    (16) seen_nom_func -> . ID

    ID              shift and go to state 28

    seen_nom_func                  shift and go to state 27

state 24

    (9) programa2 -> vars programa2 .

    RES_FUNC        reduce using rule 9 (programa2 -> vars programa2 .)
    RES_START       reduce using rule 9 (programa2 -> vars programa2 .)


state 25

    (1) programa -> ins_gt_main programa1 valida_entra_global generaglo programa2 valida_salir_gobal . programa3 dir_gt_main main programa3
    (13) programa3 -> . programa3 modulos
    (14) programa3 -> . empty
    (197) empty -> .

    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)

    programa3                      shift and go to state 29
    empty                          shift and go to state 30

state 26

    (32) vars -> RES_DEF COL . vars1
    (34) vars1 -> . estructura empty
    (35) vars1 -> . vars_1
    (30) estructura -> . list
    (31) estructura -> . array
    (33) vars_1 -> . dato ID vars2 vars1_1
    (42) list -> . RES_LIST dato ID list1
    (48) array -> . RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1
    (23) dato -> . RES_INT
    (24) dato -> . RES_FLOAT
    (25) dato -> . RES_DOUBLE
    (26) dato -> . RES_BOOLEAN
    (27) dato -> . RES_STRING

    RES_LIST        shift and go to state 36
    RES_ARRAY       shift and go to state 33
    RES_INT         shift and go to state 13
    RES_FLOAT       shift and go to state 17
    RES_DOUBLE      shift and go to state 15
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 14

    list                           shift and go to state 37
    estructura                     shift and go to state 34
    dato                           shift and go to state 35
    vars1                          shift and go to state 32
    array                          shift and go to state 31
    vars_1                         shift and go to state 38

state 27

    (15) prototipos -> RES_FUNC dato seen_dato seen_nom_func . LPAREN prototipos_1 RPAREN

    LPAREN          shift and go to state 39


state 28

    (16) seen_nom_func -> ID .

    LPAREN          reduce using rule 16 (seen_nom_func -> ID .)


state 29

    (1) programa -> ins_gt_main programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 . dir_gt_main main programa3
    (13) programa3 -> programa3 . modulos
    (4) dir_gt_main -> .
    (61) modulos -> . prototipos se_uso COL bloque cuad_def_proc_4
    (15) prototipos -> . RES_FUNC dato seen_dato seen_nom_func LPAREN prototipos_1 RPAREN

    RES_START       reduce using rule 4 (dir_gt_main -> .)
    RES_FUNC        shift and go to state 9

    prototipos                     shift and go to state 40
    dir_gt_main                    shift and go to state 41
    modulos                        shift and go to state 42

state 30

    (14) programa3 -> empty .

    RES_FUNC        reduce using rule 14 (programa3 -> empty .)
    $end            reduce using rule 14 (programa3 -> empty .)
    RES_START       reduce using rule 14 (programa3 -> empty .)


state 31

    (31) estructura -> array .

    RES_DEF         reduce using rule 31 (estructura -> array .)
    RES_FUNC        reduce using rule 31 (estructura -> array .)
    RES_START       reduce using rule 31 (estructura -> array .)
    RES_RETURN      reduce using rule 31 (estructura -> array .)
    RES_READ        reduce using rule 31 (estructura -> array .)
    RES_PRINT       reduce using rule 31 (estructura -> array .)
    RES_IF          reduce using rule 31 (estructura -> array .)
    RES_SWITCH      reduce using rule 31 (estructura -> array .)
    RES_WHILE       reduce using rule 31 (estructura -> array .)
    RES_FOR         reduce using rule 31 (estructura -> array .)
    ID              reduce using rule 31 (estructura -> array .)
    $end            reduce using rule 31 (estructura -> array .)
    RES_END         reduce using rule 31 (estructura -> array .)
    E_END           reduce using rule 31 (estructura -> array .)
    RES_ELSE        reduce using rule 31 (estructura -> array .)
    RES_CASE        reduce using rule 31 (estructura -> array .)
    RPAREN          reduce using rule 31 (estructura -> array .)


state 32

    (32) vars -> RES_DEF COL vars1 .

    RES_RETURN      reduce using rule 32 (vars -> RES_DEF COL vars1 .)
    RES_READ        reduce using rule 32 (vars -> RES_DEF COL vars1 .)
    RES_PRINT       reduce using rule 32 (vars -> RES_DEF COL vars1 .)
    RES_DEF         reduce using rule 32 (vars -> RES_DEF COL vars1 .)
    RES_IF          reduce using rule 32 (vars -> RES_DEF COL vars1 .)
    RES_SWITCH      reduce using rule 32 (vars -> RES_DEF COL vars1 .)
    RES_WHILE       reduce using rule 32 (vars -> RES_DEF COL vars1 .)
    RES_FOR         reduce using rule 32 (vars -> RES_DEF COL vars1 .)
    ID              reduce using rule 32 (vars -> RES_DEF COL vars1 .)
    RES_CASE        reduce using rule 32 (vars -> RES_DEF COL vars1 .)
    E_END           reduce using rule 32 (vars -> RES_DEF COL vars1 .)
    RES_FUNC        reduce using rule 32 (vars -> RES_DEF COL vars1 .)
    RES_START       reduce using rule 32 (vars -> RES_DEF COL vars1 .)
    $end            reduce using rule 32 (vars -> RES_DEF COL vars1 .)
    RES_END         reduce using rule 32 (vars -> RES_DEF COL vars1 .)
    RES_ELSE        reduce using rule 32 (vars -> RES_DEF COL vars1 .)


state 33

    (48) array -> RES_ARRAY . dato crea_arr LBRACKET dim RBRACKET genera_ms array1
    (23) dato -> . RES_INT
    (24) dato -> . RES_FLOAT
    (25) dato -> . RES_DOUBLE
    (26) dato -> . RES_BOOLEAN
    (27) dato -> . RES_STRING

    RES_INT         shift and go to state 13
    RES_FLOAT       shift and go to state 17
    RES_DOUBLE      shift and go to state 15
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 14

    dato                           shift and go to state 43

state 34

    (34) vars1 -> estructura . empty
    (197) empty -> .

    RES_DEF         reduce using rule 197 (empty -> .)
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)
    RES_RETURN      reduce using rule 197 (empty -> .)
    RES_READ        reduce using rule 197 (empty -> .)
    RES_PRINT       reduce using rule 197 (empty -> .)
    RES_IF          reduce using rule 197 (empty -> .)
    RES_SWITCH      reduce using rule 197 (empty -> .)
    RES_WHILE       reduce using rule 197 (empty -> .)
    RES_FOR         reduce using rule 197 (empty -> .)
    ID              reduce using rule 197 (empty -> .)
    $end            reduce using rule 197 (empty -> .)
    RES_END         reduce using rule 197 (empty -> .)
    E_END           reduce using rule 197 (empty -> .)
    RES_ELSE        reduce using rule 197 (empty -> .)
    RES_CASE        reduce using rule 197 (empty -> .)

    empty                          shift and go to state 44

state 35

    (33) vars_1 -> dato . ID vars2 vars1_1

    ID              shift and go to state 45


state 36

    (42) list -> RES_LIST . dato ID list1
    (23) dato -> . RES_INT
    (24) dato -> . RES_FLOAT
    (25) dato -> . RES_DOUBLE
    (26) dato -> . RES_BOOLEAN
    (27) dato -> . RES_STRING

    RES_INT         shift and go to state 13
    RES_FLOAT       shift and go to state 17
    RES_DOUBLE      shift and go to state 15
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 14

    dato                           shift and go to state 46

state 37

    (30) estructura -> list .

    RES_DEF         reduce using rule 30 (estructura -> list .)
    RES_FUNC        reduce using rule 30 (estructura -> list .)
    RES_START       reduce using rule 30 (estructura -> list .)
    RES_RETURN      reduce using rule 30 (estructura -> list .)
    RES_READ        reduce using rule 30 (estructura -> list .)
    RES_PRINT       reduce using rule 30 (estructura -> list .)
    RES_IF          reduce using rule 30 (estructura -> list .)
    RES_SWITCH      reduce using rule 30 (estructura -> list .)
    RES_WHILE       reduce using rule 30 (estructura -> list .)
    RES_FOR         reduce using rule 30 (estructura -> list .)
    ID              reduce using rule 30 (estructura -> list .)
    $end            reduce using rule 30 (estructura -> list .)
    RES_END         reduce using rule 30 (estructura -> list .)
    E_END           reduce using rule 30 (estructura -> list .)
    RES_ELSE        reduce using rule 30 (estructura -> list .)
    RES_CASE        reduce using rule 30 (estructura -> list .)
    RPAREN          reduce using rule 30 (estructura -> list .)


state 38

    (35) vars1 -> vars_1 .

    RES_DEF         reduce using rule 35 (vars1 -> vars_1 .)
    RES_FUNC        reduce using rule 35 (vars1 -> vars_1 .)
    RES_START       reduce using rule 35 (vars1 -> vars_1 .)
    RES_RETURN      reduce using rule 35 (vars1 -> vars_1 .)
    RES_READ        reduce using rule 35 (vars1 -> vars_1 .)
    RES_PRINT       reduce using rule 35 (vars1 -> vars_1 .)
    RES_IF          reduce using rule 35 (vars1 -> vars_1 .)
    RES_SWITCH      reduce using rule 35 (vars1 -> vars_1 .)
    RES_WHILE       reduce using rule 35 (vars1 -> vars_1 .)
    RES_FOR         reduce using rule 35 (vars1 -> vars_1 .)
    ID              reduce using rule 35 (vars1 -> vars_1 .)
    $end            reduce using rule 35 (vars1 -> vars_1 .)
    RES_END         reduce using rule 35 (vars1 -> vars_1 .)
    E_END           reduce using rule 35 (vars1 -> vars_1 .)
    RES_ELSE        reduce using rule 35 (vars1 -> vars_1 .)
    RES_CASE        reduce using rule 35 (vars1 -> vars_1 .)


state 39

    (15) prototipos -> RES_FUNC dato seen_dato seen_nom_func LPAREN . prototipos_1 RPAREN
    (18) prototipos_1 -> . tipo seen_id_proto prototipos_2
    (19) prototipos_1 -> . empty
    (28) tipo -> . dato
    (29) tipo -> . estructura
    (197) empty -> .
    (23) dato -> . RES_INT
    (24) dato -> . RES_FLOAT
    (25) dato -> . RES_DOUBLE
    (26) dato -> . RES_BOOLEAN
    (27) dato -> . RES_STRING
    (30) estructura -> . list
    (31) estructura -> . array
    (42) list -> . RES_LIST dato ID list1
    (48) array -> . RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1

    RPAREN          reduce using rule 197 (empty -> .)
    RES_INT         shift and go to state 13
    RES_FLOAT       shift and go to state 17
    RES_DOUBLE      shift and go to state 15
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 14
    RES_LIST        shift and go to state 36
    RES_ARRAY       shift and go to state 33

    tipo                           shift and go to state 48
    prototipos_1                   shift and go to state 47
    list                           shift and go to state 37
    estructura                     shift and go to state 49
    dato                           shift and go to state 51
    array                          shift and go to state 31
    empty                          shift and go to state 50

state 40

    (61) modulos -> prototipos . se_uso COL bloque cuad_def_proc_4
    (63) se_uso -> .

    COL             reduce using rule 63 (se_uso -> .)

    se_uso                         shift and go to state 52

state 41

    (1) programa -> ins_gt_main programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 dir_gt_main . main programa3
    (185) main -> . RES_START comienza_main COL bloque RES_END

    RES_START       shift and go to state 53

    main                           shift and go to state 54

state 42

    (13) programa3 -> programa3 modulos .

    RES_FUNC        reduce using rule 13 (programa3 -> programa3 modulos .)
    $end            reduce using rule 13 (programa3 -> programa3 modulos .)
    RES_START       reduce using rule 13 (programa3 -> programa3 modulos .)


state 43

    (48) array -> RES_ARRAY dato . crea_arr LBRACKET dim RBRACKET genera_ms array1
    (50) crea_arr -> . ID

    ID              shift and go to state 56

    crea_arr                       shift and go to state 55

state 44

    (34) vars1 -> estructura empty .

    RES_DEF         reduce using rule 34 (vars1 -> estructura empty .)
    RES_FUNC        reduce using rule 34 (vars1 -> estructura empty .)
    RES_START       reduce using rule 34 (vars1 -> estructura empty .)
    RES_RETURN      reduce using rule 34 (vars1 -> estructura empty .)
    RES_READ        reduce using rule 34 (vars1 -> estructura empty .)
    RES_PRINT       reduce using rule 34 (vars1 -> estructura empty .)
    RES_IF          reduce using rule 34 (vars1 -> estructura empty .)
    RES_SWITCH      reduce using rule 34 (vars1 -> estructura empty .)
    RES_WHILE       reduce using rule 34 (vars1 -> estructura empty .)
    RES_FOR         reduce using rule 34 (vars1 -> estructura empty .)
    ID              reduce using rule 34 (vars1 -> estructura empty .)
    $end            reduce using rule 34 (vars1 -> estructura empty .)
    RES_END         reduce using rule 34 (vars1 -> estructura empty .)
    E_END           reduce using rule 34 (vars1 -> estructura empty .)
    RES_ELSE        reduce using rule 34 (vars1 -> estructura empty .)
    RES_CASE        reduce using rule 34 (vars1 -> estructura empty .)


state 45

    (33) vars_1 -> dato ID . vars2 vars1_1
    (38) vars2 -> . EQUALS cons
    (39) vars2 -> . vars3
    (40) vars3 -> . COMMA ID vars3
    (41) vars3 -> . empty
    (197) empty -> .

    EQUALS          shift and go to state 57
    COMMA           shift and go to state 60
    RES_LIST        reduce using rule 197 (empty -> .)
    RES_ARRAY       reduce using rule 197 (empty -> .)
    RES_INT         reduce using rule 197 (empty -> .)
    RES_FLOAT       reduce using rule 197 (empty -> .)
    RES_DOUBLE      reduce using rule 197 (empty -> .)
    RES_BOOLEAN     reduce using rule 197 (empty -> .)
    RES_STRING      reduce using rule 197 (empty -> .)
    RES_DEF         reduce using rule 197 (empty -> .)
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)
    RES_RETURN      reduce using rule 197 (empty -> .)
    RES_READ        reduce using rule 197 (empty -> .)
    RES_PRINT       reduce using rule 197 (empty -> .)
    RES_IF          reduce using rule 197 (empty -> .)
    RES_SWITCH      reduce using rule 197 (empty -> .)
    RES_WHILE       reduce using rule 197 (empty -> .)
    RES_FOR         reduce using rule 197 (empty -> .)
    ID              reduce using rule 197 (empty -> .)
    $end            reduce using rule 197 (empty -> .)
    RES_END         reduce using rule 197 (empty -> .)
    E_END           reduce using rule 197 (empty -> .)
    RES_ELSE        reduce using rule 197 (empty -> .)
    RES_CASE        reduce using rule 197 (empty -> .)

    vars3                          shift and go to state 58
    vars2                          shift and go to state 59
    empty                          shift and go to state 61

state 46

    (42) list -> RES_LIST dato . ID list1

    ID              shift and go to state 62


state 47

    (15) prototipos -> RES_FUNC dato seen_dato seen_nom_func LPAREN prototipos_1 . RPAREN

    RPAREN          shift and go to state 63


state 48

    (18) prototipos_1 -> tipo . seen_id_proto prototipos_2
    (20) seen_id_proto -> . ID

    ID              shift and go to state 65

    seen_id_proto                  shift and go to state 64

state 49

    (29) tipo -> estructura .

    RPAREN          reduce using rule 29 (tipo -> estructura .)
    ID              reduce using rule 29 (tipo -> estructura .)


state 50

    (19) prototipos_1 -> empty .

    RPAREN          reduce using rule 19 (prototipos_1 -> empty .)


state 51

    (28) tipo -> dato .

    RPAREN          reduce using rule 28 (tipo -> dato .)
    ID              reduce using rule 28 (tipo -> dato .)


state 52

    (61) modulos -> prototipos se_uso . COL bloque cuad_def_proc_4

    COL             shift and go to state 66


state 53

    (185) main -> RES_START . comienza_main COL bloque RES_END
    (186) comienza_main -> .

    COL             reduce using rule 186 (comienza_main -> .)

    comienza_main                  shift and go to state 67

state 54

    (1) programa -> ins_gt_main programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 dir_gt_main main . programa3
    (13) programa3 -> . programa3 modulos
    (14) programa3 -> . empty
    (197) empty -> .

    RES_FUNC        reduce using rule 197 (empty -> .)
    $end            reduce using rule 197 (empty -> .)

    programa3                      shift and go to state 68
    empty                          shift and go to state 30

state 55

    (48) array -> RES_ARRAY dato crea_arr . LBRACKET dim RBRACKET genera_ms array1

    LBRACKET        shift and go to state 69


state 56

    (50) crea_arr -> ID .

    LBRACKET        reduce using rule 50 (crea_arr -> ID .)


state 57

    (38) vars2 -> EQUALS . cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    seen_int_cons                  shift and go to state 81
    seen_double_cons               shift and go to state 77
    cons                           shift and go to state 70
    seen_string_cons               shift and go to state 72
    seen_bool                      shift and go to state 71
    seen_float_cons                shift and go to state 73
    conslist                       shift and go to state 82
    seen_id_cons                   shift and go to state 74

state 58

    (39) vars2 -> vars3 .

    RES_LIST        reduce using rule 39 (vars2 -> vars3 .)
    RES_ARRAY       reduce using rule 39 (vars2 -> vars3 .)
    RES_INT         reduce using rule 39 (vars2 -> vars3 .)
    RES_FLOAT       reduce using rule 39 (vars2 -> vars3 .)
    RES_DOUBLE      reduce using rule 39 (vars2 -> vars3 .)
    RES_BOOLEAN     reduce using rule 39 (vars2 -> vars3 .)
    RES_STRING      reduce using rule 39 (vars2 -> vars3 .)
    RES_DEF         reduce using rule 39 (vars2 -> vars3 .)
    RES_FUNC        reduce using rule 39 (vars2 -> vars3 .)
    RES_START       reduce using rule 39 (vars2 -> vars3 .)
    RES_RETURN      reduce using rule 39 (vars2 -> vars3 .)
    RES_READ        reduce using rule 39 (vars2 -> vars3 .)
    RES_PRINT       reduce using rule 39 (vars2 -> vars3 .)
    RES_IF          reduce using rule 39 (vars2 -> vars3 .)
    RES_SWITCH      reduce using rule 39 (vars2 -> vars3 .)
    RES_WHILE       reduce using rule 39 (vars2 -> vars3 .)
    RES_FOR         reduce using rule 39 (vars2 -> vars3 .)
    ID              reduce using rule 39 (vars2 -> vars3 .)
    $end            reduce using rule 39 (vars2 -> vars3 .)
    RES_END         reduce using rule 39 (vars2 -> vars3 .)
    E_END           reduce using rule 39 (vars2 -> vars3 .)
    RES_ELSE        reduce using rule 39 (vars2 -> vars3 .)
    RES_CASE        reduce using rule 39 (vars2 -> vars3 .)


state 59

    (33) vars_1 -> dato ID vars2 . vars1_1
    (36) vars1_1 -> . vars1
    (37) vars1_1 -> . empty
    (34) vars1 -> . estructura empty
    (35) vars1 -> . vars_1
    (197) empty -> .
    (30) estructura -> . list
    (31) estructura -> . array
    (33) vars_1 -> . dato ID vars2 vars1_1
    (42) list -> . RES_LIST dato ID list1
    (48) array -> . RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1
    (23) dato -> . RES_INT
    (24) dato -> . RES_FLOAT
    (25) dato -> . RES_DOUBLE
    (26) dato -> . RES_BOOLEAN
    (27) dato -> . RES_STRING

    RES_DEF         reduce using rule 197 (empty -> .)
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)
    RES_RETURN      reduce using rule 197 (empty -> .)
    RES_READ        reduce using rule 197 (empty -> .)
    RES_PRINT       reduce using rule 197 (empty -> .)
    RES_IF          reduce using rule 197 (empty -> .)
    RES_SWITCH      reduce using rule 197 (empty -> .)
    RES_WHILE       reduce using rule 197 (empty -> .)
    RES_FOR         reduce using rule 197 (empty -> .)
    ID              reduce using rule 197 (empty -> .)
    $end            reduce using rule 197 (empty -> .)
    RES_END         reduce using rule 197 (empty -> .)
    E_END           reduce using rule 197 (empty -> .)
    RES_ELSE        reduce using rule 197 (empty -> .)
    RES_CASE        reduce using rule 197 (empty -> .)
    RES_LIST        shift and go to state 36
    RES_ARRAY       shift and go to state 33
    RES_INT         shift and go to state 13
    RES_FLOAT       shift and go to state 17
    RES_DOUBLE      shift and go to state 15
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 14

    list                           shift and go to state 37
    estructura                     shift and go to state 34
    dato                           shift and go to state 35
    vars1                          shift and go to state 86
    vars1_1                        shift and go to state 85
    array                          shift and go to state 31
    vars_1                         shift and go to state 38
    empty                          shift and go to state 87

state 60

    (40) vars3 -> COMMA . ID vars3

    ID              shift and go to state 88


state 61

    (41) vars3 -> empty .

    RES_LIST        reduce using rule 41 (vars3 -> empty .)
    RES_ARRAY       reduce using rule 41 (vars3 -> empty .)
    RES_INT         reduce using rule 41 (vars3 -> empty .)
    RES_FLOAT       reduce using rule 41 (vars3 -> empty .)
    RES_DOUBLE      reduce using rule 41 (vars3 -> empty .)
    RES_BOOLEAN     reduce using rule 41 (vars3 -> empty .)
    RES_STRING      reduce using rule 41 (vars3 -> empty .)
    RES_DEF         reduce using rule 41 (vars3 -> empty .)
    RES_FUNC        reduce using rule 41 (vars3 -> empty .)
    RES_START       reduce using rule 41 (vars3 -> empty .)
    RES_RETURN      reduce using rule 41 (vars3 -> empty .)
    RES_READ        reduce using rule 41 (vars3 -> empty .)
    RES_PRINT       reduce using rule 41 (vars3 -> empty .)
    RES_IF          reduce using rule 41 (vars3 -> empty .)
    RES_SWITCH      reduce using rule 41 (vars3 -> empty .)
    RES_WHILE       reduce using rule 41 (vars3 -> empty .)
    RES_FOR         reduce using rule 41 (vars3 -> empty .)
    ID              reduce using rule 41 (vars3 -> empty .)
    $end            reduce using rule 41 (vars3 -> empty .)
    RES_END         reduce using rule 41 (vars3 -> empty .)
    E_END           reduce using rule 41 (vars3 -> empty .)
    RES_ELSE        reduce using rule 41 (vars3 -> empty .)
    RES_CASE        reduce using rule 41 (vars3 -> empty .)


state 62

    (42) list -> RES_LIST dato ID . list1
    (43) list1 -> . LCURLY cons_loop RCURLY
    (44) list1 -> . empty
    (197) empty -> .

    LCURLY          shift and go to state 90
    RES_DEF         reduce using rule 197 (empty -> .)
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)
    RES_RETURN      reduce using rule 197 (empty -> .)
    RES_READ        reduce using rule 197 (empty -> .)
    RES_PRINT       reduce using rule 197 (empty -> .)
    RES_IF          reduce using rule 197 (empty -> .)
    RES_SWITCH      reduce using rule 197 (empty -> .)
    RES_WHILE       reduce using rule 197 (empty -> .)
    RES_FOR         reduce using rule 197 (empty -> .)
    ID              reduce using rule 197 (empty -> .)
    $end            reduce using rule 197 (empty -> .)
    RES_END         reduce using rule 197 (empty -> .)
    E_END           reduce using rule 197 (empty -> .)
    RES_ELSE        reduce using rule 197 (empty -> .)
    RES_CASE        reduce using rule 197 (empty -> .)
    RPAREN          reduce using rule 197 (empty -> .)

    list1                          shift and go to state 89
    empty                          shift and go to state 91

state 63

    (15) prototipos -> RES_FUNC dato seen_dato seen_nom_func LPAREN prototipos_1 RPAREN .

    COL             reduce using rule 15 (prototipos -> RES_FUNC dato seen_dato seen_nom_func LPAREN prototipos_1 RPAREN .)
    RES_PROTO       reduce using rule 15 (prototipos -> RES_FUNC dato seen_dato seen_nom_func LPAREN prototipos_1 RPAREN .)
    RES_DEF         reduce using rule 15 (prototipos -> RES_FUNC dato seen_dato seen_nom_func LPAREN prototipos_1 RPAREN .)
    RES_FUNC        reduce using rule 15 (prototipos -> RES_FUNC dato seen_dato seen_nom_func LPAREN prototipos_1 RPAREN .)
    RES_START       reduce using rule 15 (prototipos -> RES_FUNC dato seen_dato seen_nom_func LPAREN prototipos_1 RPAREN .)


state 64

    (18) prototipos_1 -> tipo seen_id_proto . prototipos_2
    (21) prototipos_2 -> . COMMA prototipos_1
    (22) prototipos_2 -> . empty
    (197) empty -> .

    COMMA           shift and go to state 93
    RPAREN          reduce using rule 197 (empty -> .)

    prototipos_2                   shift and go to state 92
    empty                          shift and go to state 94

state 65

    (20) seen_id_proto -> ID .

    COMMA           reduce using rule 20 (seen_id_proto -> ID .)
    RPAREN          reduce using rule 20 (seen_id_proto -> ID .)


state 66

    (61) modulos -> prototipos se_uso COL . bloque cuad_def_proc_4
    (64) bloque -> . estatutos bloque
    (65) bloque -> . return bloque
    (66) bloque -> . empty
    (68) estatutos -> . condicion E_END
    (69) estatutos -> . ciclo E_END
    (70) estatutos -> . lectura
    (71) estatutos -> . escritura
    (72) estatutos -> . asignacion
    (73) estatutos -> . llamada
    (74) estatutos -> . vars
    (67) return -> . RES_RETURN exp
    (197) empty -> .
    (77) condicion -> . if
    (78) condicion -> . switch
    (75) ciclo -> . while
    (76) ciclo -> . for
    (88) lectura -> . RES_READ LPAREN tipo RPAREN
    (89) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (91) asignacion -> . seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (79) llamada -> . seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4
    (32) vars -> . RES_DEF COL vars1
    (121) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (128) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (110) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (114) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (94) seen_id_asignacion -> . ID
    (81) seen_id_call -> . ID

    RES_RETURN      shift and go to state 114
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)
    $end            reduce using rule 197 (empty -> .)
    RES_READ        shift and go to state 116
    RES_PRINT       shift and go to state 107
    RES_DEF         shift and go to state 20
    RES_IF          shift and go to state 98
    RES_SWITCH      shift and go to state 115
    RES_WHILE       shift and go to state 112
    RES_FOR         shift and go to state 96
    ID              shift and go to state 104

    vars                           shift and go to state 95
    bloque                         shift and go to state 97
    if                             shift and go to state 99
    ciclo                          shift and go to state 100
    seen_id_asignacion             shift and go to state 102
    switch                         shift and go to state 103
    llamada                        shift and go to state 105
    condicion                      shift and go to state 106
    lectura                        shift and go to state 108
    empty                          shift and go to state 109
    return                         shift and go to state 110
    estatutos                      shift and go to state 111
    seen_id_call                   shift and go to state 113
    for                            shift and go to state 101
    asignacion                     shift and go to state 117
    while                          shift and go to state 118
    escritura                      shift and go to state 119

state 67

    (185) main -> RES_START comienza_main . COL bloque RES_END

    COL             shift and go to state 120


state 68

    (1) programa -> ins_gt_main programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 dir_gt_main main programa3 .
    (13) programa3 -> programa3 . modulos
    (61) modulos -> . prototipos se_uso COL bloque cuad_def_proc_4
    (15) prototipos -> . RES_FUNC dato seen_dato seen_nom_func LPAREN prototipos_1 RPAREN

    $end            reduce using rule 1 (programa -> ins_gt_main programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 dir_gt_main main programa3 .)
    RES_FUNC        shift and go to state 9

    prototipos                     shift and go to state 40
    modulos                        shift and go to state 42

state 69

    (48) array -> RES_ARRAY dato crea_arr LBRACKET . dim RBRACKET genera_ms array1
    (51) dim -> . dim_cte dim_struct dim2
    (52) dim_cte -> . CTE_INT

    CTE_INT         shift and go to state 123

    dim                            shift and go to state 121
    dim_cte                        shift and go to state 122

state 70

    (38) vars2 -> EQUALS cons .

    RES_LIST        reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_ARRAY       reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_INT         reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_FLOAT       reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_DOUBLE      reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_BOOLEAN     reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_STRING      reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_DEF         reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_FUNC        reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_START       reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_RETURN      reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_READ        reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_PRINT       reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_IF          reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_SWITCH      reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_WHILE       reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_FOR         reduce using rule 38 (vars2 -> EQUALS cons .)
    ID              reduce using rule 38 (vars2 -> EQUALS cons .)
    $end            reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_END         reduce using rule 38 (vars2 -> EQUALS cons .)
    E_END           reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_ELSE        reduce using rule 38 (vars2 -> EQUALS cons .)
    RES_CASE        reduce using rule 38 (vars2 -> EQUALS cons .)


state 71

    (171) cons -> seen_bool .

    TIMES           reduce using rule 171 (cons -> seen_bool .)
    DIVIDE          reduce using rule 171 (cons -> seen_bool .)
    PLUS            reduce using rule 171 (cons -> seen_bool .)
    MINUS           reduce using rule 171 (cons -> seen_bool .)
    COMMA           reduce using rule 171 (cons -> seen_bool .)
    RBRACKET        reduce using rule 171 (cons -> seen_bool .)
    RPAREN          reduce using rule 171 (cons -> seen_bool .)
    RES_RETURN      reduce using rule 171 (cons -> seen_bool .)
    RES_READ        reduce using rule 171 (cons -> seen_bool .)
    RES_PRINT       reduce using rule 171 (cons -> seen_bool .)
    RES_DEF         reduce using rule 171 (cons -> seen_bool .)
    RES_IF          reduce using rule 171 (cons -> seen_bool .)
    RES_SWITCH      reduce using rule 171 (cons -> seen_bool .)
    RES_WHILE       reduce using rule 171 (cons -> seen_bool .)
    RES_FOR         reduce using rule 171 (cons -> seen_bool .)
    ID              reduce using rule 171 (cons -> seen_bool .)
    RES_FUNC        reduce using rule 171 (cons -> seen_bool .)
    RES_START       reduce using rule 171 (cons -> seen_bool .)
    $end            reduce using rule 171 (cons -> seen_bool .)
    RES_END         reduce using rule 171 (cons -> seen_bool .)
    E_END           reduce using rule 171 (cons -> seen_bool .)
    RES_ELSE        reduce using rule 171 (cons -> seen_bool .)
    RES_CASE        reduce using rule 171 (cons -> seen_bool .)
    MIN             reduce using rule 171 (cons -> seen_bool .)
    MIN_EQ          reduce using rule 171 (cons -> seen_bool .)
    MAY             reduce using rule 171 (cons -> seen_bool .)
    MAY_EQ          reduce using rule 171 (cons -> seen_bool .)
    DIF             reduce using rule 171 (cons -> seen_bool .)
    EQ_EQ           reduce using rule 171 (cons -> seen_bool .)
    COL             reduce using rule 171 (cons -> seen_bool .)
    RCURLY          reduce using rule 171 (cons -> seen_bool .)
    RES_LIST        reduce using rule 171 (cons -> seen_bool .)
    RES_ARRAY       reduce using rule 171 (cons -> seen_bool .)
    RES_INT         reduce using rule 171 (cons -> seen_bool .)
    RES_FLOAT       reduce using rule 171 (cons -> seen_bool .)
    RES_DOUBLE      reduce using rule 171 (cons -> seen_bool .)
    RES_BOOLEAN     reduce using rule 171 (cons -> seen_bool .)
    RES_STRING      reduce using rule 171 (cons -> seen_bool .)


state 72

    (170) cons -> seen_string_cons . exp_cons_string
    (184) exp_cons_string -> .

    RES_LIST        reduce using rule 184 (exp_cons_string -> .)
    RES_ARRAY       reduce using rule 184 (exp_cons_string -> .)
    RES_INT         reduce using rule 184 (exp_cons_string -> .)
    RES_FLOAT       reduce using rule 184 (exp_cons_string -> .)
    RES_DOUBLE      reduce using rule 184 (exp_cons_string -> .)
    RES_BOOLEAN     reduce using rule 184 (exp_cons_string -> .)
    RES_STRING      reduce using rule 184 (exp_cons_string -> .)
    RES_DEF         reduce using rule 184 (exp_cons_string -> .)
    RES_FUNC        reduce using rule 184 (exp_cons_string -> .)
    RES_START       reduce using rule 184 (exp_cons_string -> .)
    RES_RETURN      reduce using rule 184 (exp_cons_string -> .)
    RES_READ        reduce using rule 184 (exp_cons_string -> .)
    RES_PRINT       reduce using rule 184 (exp_cons_string -> .)
    RES_IF          reduce using rule 184 (exp_cons_string -> .)
    RES_SWITCH      reduce using rule 184 (exp_cons_string -> .)
    RES_WHILE       reduce using rule 184 (exp_cons_string -> .)
    RES_FOR         reduce using rule 184 (exp_cons_string -> .)
    ID              reduce using rule 184 (exp_cons_string -> .)
    $end            reduce using rule 184 (exp_cons_string -> .)
    RES_END         reduce using rule 184 (exp_cons_string -> .)
    E_END           reduce using rule 184 (exp_cons_string -> .)
    RES_ELSE        reduce using rule 184 (exp_cons_string -> .)
    RES_CASE        reduce using rule 184 (exp_cons_string -> .)
    COMMA           reduce using rule 184 (exp_cons_string -> .)
    RCURLY          reduce using rule 184 (exp_cons_string -> .)
    TIMES           reduce using rule 184 (exp_cons_string -> .)
    DIVIDE          reduce using rule 184 (exp_cons_string -> .)
    PLUS            reduce using rule 184 (exp_cons_string -> .)
    MINUS           reduce using rule 184 (exp_cons_string -> .)
    MIN             reduce using rule 184 (exp_cons_string -> .)
    MIN_EQ          reduce using rule 184 (exp_cons_string -> .)
    MAY             reduce using rule 184 (exp_cons_string -> .)
    MAY_EQ          reduce using rule 184 (exp_cons_string -> .)
    DIF             reduce using rule 184 (exp_cons_string -> .)
    EQ_EQ           reduce using rule 184 (exp_cons_string -> .)
    RPAREN          reduce using rule 184 (exp_cons_string -> .)
    RBRACKET        reduce using rule 184 (exp_cons_string -> .)
    COL             reduce using rule 184 (exp_cons_string -> .)

    exp_cons_string                shift and go to state 124

state 73

    (168) cons -> seen_float_cons . exp_cons_float
    (182) exp_cons_float -> .

    RES_LIST        reduce using rule 182 (exp_cons_float -> .)
    RES_ARRAY       reduce using rule 182 (exp_cons_float -> .)
    RES_INT         reduce using rule 182 (exp_cons_float -> .)
    RES_FLOAT       reduce using rule 182 (exp_cons_float -> .)
    RES_DOUBLE      reduce using rule 182 (exp_cons_float -> .)
    RES_BOOLEAN     reduce using rule 182 (exp_cons_float -> .)
    RES_STRING      reduce using rule 182 (exp_cons_float -> .)
    RES_DEF         reduce using rule 182 (exp_cons_float -> .)
    RES_FUNC        reduce using rule 182 (exp_cons_float -> .)
    RES_START       reduce using rule 182 (exp_cons_float -> .)
    RES_RETURN      reduce using rule 182 (exp_cons_float -> .)
    RES_READ        reduce using rule 182 (exp_cons_float -> .)
    RES_PRINT       reduce using rule 182 (exp_cons_float -> .)
    RES_IF          reduce using rule 182 (exp_cons_float -> .)
    RES_SWITCH      reduce using rule 182 (exp_cons_float -> .)
    RES_WHILE       reduce using rule 182 (exp_cons_float -> .)
    RES_FOR         reduce using rule 182 (exp_cons_float -> .)
    ID              reduce using rule 182 (exp_cons_float -> .)
    $end            reduce using rule 182 (exp_cons_float -> .)
    RES_END         reduce using rule 182 (exp_cons_float -> .)
    E_END           reduce using rule 182 (exp_cons_float -> .)
    RES_ELSE        reduce using rule 182 (exp_cons_float -> .)
    RES_CASE        reduce using rule 182 (exp_cons_float -> .)
    COMMA           reduce using rule 182 (exp_cons_float -> .)
    RCURLY          reduce using rule 182 (exp_cons_float -> .)
    TIMES           reduce using rule 182 (exp_cons_float -> .)
    DIVIDE          reduce using rule 182 (exp_cons_float -> .)
    PLUS            reduce using rule 182 (exp_cons_float -> .)
    MINUS           reduce using rule 182 (exp_cons_float -> .)
    MIN             reduce using rule 182 (exp_cons_float -> .)
    MIN_EQ          reduce using rule 182 (exp_cons_float -> .)
    MAY             reduce using rule 182 (exp_cons_float -> .)
    MAY_EQ          reduce using rule 182 (exp_cons_float -> .)
    DIF             reduce using rule 182 (exp_cons_float -> .)
    EQ_EQ           reduce using rule 182 (exp_cons_float -> .)
    RPAREN          reduce using rule 182 (exp_cons_float -> .)
    RBRACKET        reduce using rule 182 (exp_cons_float -> .)
    COL             reduce using rule 182 (exp_cons_float -> .)

    exp_cons_float                 shift and go to state 125

state 74

    (166) cons -> seen_id_cons . consarray exp_1
    (187) consarray -> . is_dim LBRACKET dim_pos RBRACKET
    (188) consarray -> . empty
    (189) is_dim -> .
    (197) empty -> .

    LBRACKET        reduce using rule 189 (is_dim -> .)
    RES_LIST        reduce using rule 197 (empty -> .)
    RES_ARRAY       reduce using rule 197 (empty -> .)
    RES_INT         reduce using rule 197 (empty -> .)
    RES_FLOAT       reduce using rule 197 (empty -> .)
    RES_DOUBLE      reduce using rule 197 (empty -> .)
    RES_BOOLEAN     reduce using rule 197 (empty -> .)
    RES_STRING      reduce using rule 197 (empty -> .)
    RES_DEF         reduce using rule 197 (empty -> .)
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)
    RES_RETURN      reduce using rule 197 (empty -> .)
    RES_READ        reduce using rule 197 (empty -> .)
    RES_PRINT       reduce using rule 197 (empty -> .)
    RES_IF          reduce using rule 197 (empty -> .)
    RES_SWITCH      reduce using rule 197 (empty -> .)
    RES_WHILE       reduce using rule 197 (empty -> .)
    RES_FOR         reduce using rule 197 (empty -> .)
    ID              reduce using rule 197 (empty -> .)
    $end            reduce using rule 197 (empty -> .)
    RES_END         reduce using rule 197 (empty -> .)
    E_END           reduce using rule 197 (empty -> .)
    RES_ELSE        reduce using rule 197 (empty -> .)
    RES_CASE        reduce using rule 197 (empty -> .)
    COMMA           reduce using rule 197 (empty -> .)
    RCURLY          reduce using rule 197 (empty -> .)
    TIMES           reduce using rule 197 (empty -> .)
    DIVIDE          reduce using rule 197 (empty -> .)
    PLUS            reduce using rule 197 (empty -> .)
    MINUS           reduce using rule 197 (empty -> .)
    MIN             reduce using rule 197 (empty -> .)
    MIN_EQ          reduce using rule 197 (empty -> .)
    MAY             reduce using rule 197 (empty -> .)
    MAY_EQ          reduce using rule 197 (empty -> .)
    DIF             reduce using rule 197 (empty -> .)
    EQ_EQ           reduce using rule 197 (empty -> .)
    RPAREN          reduce using rule 197 (empty -> .)
    RBRACKET        reduce using rule 197 (empty -> .)
    COL             reduce using rule 197 (empty -> .)

    is_dim                         shift and go to state 126
    consarray                      shift and go to state 127
    empty                          shift and go to state 128

state 75

    (173) seen_bool -> RES_TRUE .

    TIMES           reduce using rule 173 (seen_bool -> RES_TRUE .)
    DIVIDE          reduce using rule 173 (seen_bool -> RES_TRUE .)
    PLUS            reduce using rule 173 (seen_bool -> RES_TRUE .)
    MINUS           reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_RETURN      reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_READ        reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_PRINT       reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_DEF         reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_IF          reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_SWITCH      reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_WHILE       reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_FOR         reduce using rule 173 (seen_bool -> RES_TRUE .)
    ID              reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_FUNC        reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_START       reduce using rule 173 (seen_bool -> RES_TRUE .)
    $end            reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_END         reduce using rule 173 (seen_bool -> RES_TRUE .)
    E_END           reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_ELSE        reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_CASE        reduce using rule 173 (seen_bool -> RES_TRUE .)
    MIN             reduce using rule 173 (seen_bool -> RES_TRUE .)
    MIN_EQ          reduce using rule 173 (seen_bool -> RES_TRUE .)
    MAY             reduce using rule 173 (seen_bool -> RES_TRUE .)
    MAY_EQ          reduce using rule 173 (seen_bool -> RES_TRUE .)
    DIF             reduce using rule 173 (seen_bool -> RES_TRUE .)
    EQ_EQ           reduce using rule 173 (seen_bool -> RES_TRUE .)
    RPAREN          reduce using rule 173 (seen_bool -> RES_TRUE .)
    COMMA           reduce using rule 173 (seen_bool -> RES_TRUE .)
    RBRACKET        reduce using rule 173 (seen_bool -> RES_TRUE .)
    COL             reduce using rule 173 (seen_bool -> RES_TRUE .)
    RCURLY          reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_LIST        reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_ARRAY       reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_INT         reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_FLOAT       reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_DOUBLE      reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_BOOLEAN     reduce using rule 173 (seen_bool -> RES_TRUE .)
    RES_STRING      reduce using rule 173 (seen_bool -> RES_TRUE .)


state 76

    (178) seen_string_cons -> CTE_STRING .

    TIMES           reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    DIVIDE          reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    PLUS            reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    MINUS           reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_RETURN      reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_READ        reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_PRINT       reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_DEF         reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_IF          reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_SWITCH      reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_WHILE       reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_FOR         reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    ID              reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_FUNC        reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_START       reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    $end            reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_END         reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    E_END           reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_ELSE        reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_CASE        reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    MIN             reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    MIN_EQ          reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    MAY             reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    MAY_EQ          reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    DIF             reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    EQ_EQ           reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RPAREN          reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    COMMA           reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RBRACKET        reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    COL             reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RCURLY          reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_LIST        reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_ARRAY       reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_INT         reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_FLOAT       reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_DOUBLE      reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_BOOLEAN     reduce using rule 178 (seen_string_cons -> CTE_STRING .)
    RES_STRING      reduce using rule 178 (seen_string_cons -> CTE_STRING .)


state 77

    (169) cons -> seen_double_cons . exp_cons_double
    (183) exp_cons_double -> .

    RES_LIST        reduce using rule 183 (exp_cons_double -> .)
    RES_ARRAY       reduce using rule 183 (exp_cons_double -> .)
    RES_INT         reduce using rule 183 (exp_cons_double -> .)
    RES_FLOAT       reduce using rule 183 (exp_cons_double -> .)
    RES_DOUBLE      reduce using rule 183 (exp_cons_double -> .)
    RES_BOOLEAN     reduce using rule 183 (exp_cons_double -> .)
    RES_STRING      reduce using rule 183 (exp_cons_double -> .)
    RES_DEF         reduce using rule 183 (exp_cons_double -> .)
    RES_FUNC        reduce using rule 183 (exp_cons_double -> .)
    RES_START       reduce using rule 183 (exp_cons_double -> .)
    RES_RETURN      reduce using rule 183 (exp_cons_double -> .)
    RES_READ        reduce using rule 183 (exp_cons_double -> .)
    RES_PRINT       reduce using rule 183 (exp_cons_double -> .)
    RES_IF          reduce using rule 183 (exp_cons_double -> .)
    RES_SWITCH      reduce using rule 183 (exp_cons_double -> .)
    RES_WHILE       reduce using rule 183 (exp_cons_double -> .)
    RES_FOR         reduce using rule 183 (exp_cons_double -> .)
    ID              reduce using rule 183 (exp_cons_double -> .)
    $end            reduce using rule 183 (exp_cons_double -> .)
    RES_END         reduce using rule 183 (exp_cons_double -> .)
    E_END           reduce using rule 183 (exp_cons_double -> .)
    RES_ELSE        reduce using rule 183 (exp_cons_double -> .)
    RES_CASE        reduce using rule 183 (exp_cons_double -> .)
    COMMA           reduce using rule 183 (exp_cons_double -> .)
    RCURLY          reduce using rule 183 (exp_cons_double -> .)
    TIMES           reduce using rule 183 (exp_cons_double -> .)
    DIVIDE          reduce using rule 183 (exp_cons_double -> .)
    PLUS            reduce using rule 183 (exp_cons_double -> .)
    MINUS           reduce using rule 183 (exp_cons_double -> .)
    MIN             reduce using rule 183 (exp_cons_double -> .)
    MIN_EQ          reduce using rule 183 (exp_cons_double -> .)
    MAY             reduce using rule 183 (exp_cons_double -> .)
    MAY_EQ          reduce using rule 183 (exp_cons_double -> .)
    DIF             reduce using rule 183 (exp_cons_double -> .)
    EQ_EQ           reduce using rule 183 (exp_cons_double -> .)
    RPAREN          reduce using rule 183 (exp_cons_double -> .)
    RBRACKET        reduce using rule 183 (exp_cons_double -> .)
    COL             reduce using rule 183 (exp_cons_double -> .)

    exp_cons_double                shift and go to state 129

state 78

    (177) seen_double_cons -> CTE_DOUBLE .

    COMMA           reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RCURLY          reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    TIMES           reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    DIVIDE          reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    PLUS            reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    MINUS           reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RPAREN          reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RBRACKET        reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_RETURN      reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_READ        reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_PRINT       reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_DEF         reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_IF          reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_SWITCH      reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_WHILE       reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_FOR         reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    ID              reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_FUNC        reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_START       reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    $end            reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_END         reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    E_END           reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_ELSE        reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_CASE        reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    MIN             reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    MIN_EQ          reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    MAY             reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    MAY_EQ          reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    DIF             reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    EQ_EQ           reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    COL             reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_LIST        reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_ARRAY       reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_INT         reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_FLOAT       reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_DOUBLE      reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_BOOLEAN     reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)
    RES_STRING      reduce using rule 177 (seen_double_cons -> CTE_DOUBLE .)


state 79

    (179) seen_int_cons -> CTE_INT .

    TIMES           reduce using rule 179 (seen_int_cons -> CTE_INT .)
    DIVIDE          reduce using rule 179 (seen_int_cons -> CTE_INT .)
    PLUS            reduce using rule 179 (seen_int_cons -> CTE_INT .)
    MINUS           reduce using rule 179 (seen_int_cons -> CTE_INT .)
    COMMA           reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RPAREN          reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RBRACKET        reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_RETURN      reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_READ        reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_PRINT       reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_DEF         reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_IF          reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_SWITCH      reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_WHILE       reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_FOR         reduce using rule 179 (seen_int_cons -> CTE_INT .)
    ID              reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_FUNC        reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_START       reduce using rule 179 (seen_int_cons -> CTE_INT .)
    $end            reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_END         reduce using rule 179 (seen_int_cons -> CTE_INT .)
    E_END           reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_ELSE        reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_CASE        reduce using rule 179 (seen_int_cons -> CTE_INT .)
    COL             reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RCURLY          reduce using rule 179 (seen_int_cons -> CTE_INT .)
    MIN             reduce using rule 179 (seen_int_cons -> CTE_INT .)
    MIN_EQ          reduce using rule 179 (seen_int_cons -> CTE_INT .)
    MAY             reduce using rule 179 (seen_int_cons -> CTE_INT .)
    MAY_EQ          reduce using rule 179 (seen_int_cons -> CTE_INT .)
    DIF             reduce using rule 179 (seen_int_cons -> CTE_INT .)
    EQ_EQ           reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_LIST        reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_ARRAY       reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_INT         reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_FLOAT       reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_DOUBLE      reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_BOOLEAN     reduce using rule 179 (seen_int_cons -> CTE_INT .)
    RES_STRING      reduce using rule 179 (seen_int_cons -> CTE_INT .)


state 80

    (175) seen_id_cons -> ID .
    (194) conslist -> ID . EQUALS LCURLY conslist1 RCURLY

    LBRACKET        reduce using rule 175 (seen_id_cons -> ID .)
    TIMES           reduce using rule 175 (seen_id_cons -> ID .)
    DIVIDE          reduce using rule 175 (seen_id_cons -> ID .)
    PLUS            reduce using rule 175 (seen_id_cons -> ID .)
    MINUS           reduce using rule 175 (seen_id_cons -> ID .)
    RES_RETURN      reduce using rule 175 (seen_id_cons -> ID .)
    RES_READ        reduce using rule 175 (seen_id_cons -> ID .)
    RES_PRINT       reduce using rule 175 (seen_id_cons -> ID .)
    RES_DEF         reduce using rule 175 (seen_id_cons -> ID .)
    RES_IF          reduce using rule 175 (seen_id_cons -> ID .)
    RES_SWITCH      reduce using rule 175 (seen_id_cons -> ID .)
    RES_WHILE       reduce using rule 175 (seen_id_cons -> ID .)
    RES_FOR         reduce using rule 175 (seen_id_cons -> ID .)
    ID              reduce using rule 175 (seen_id_cons -> ID .)
    RES_FUNC        reduce using rule 175 (seen_id_cons -> ID .)
    RES_START       reduce using rule 175 (seen_id_cons -> ID .)
    $end            reduce using rule 175 (seen_id_cons -> ID .)
    RES_END         reduce using rule 175 (seen_id_cons -> ID .)
    E_END           reduce using rule 175 (seen_id_cons -> ID .)
    RES_ELSE        reduce using rule 175 (seen_id_cons -> ID .)
    RES_CASE        reduce using rule 175 (seen_id_cons -> ID .)
    MIN             reduce using rule 175 (seen_id_cons -> ID .)
    MIN_EQ          reduce using rule 175 (seen_id_cons -> ID .)
    MAY             reduce using rule 175 (seen_id_cons -> ID .)
    MAY_EQ          reduce using rule 175 (seen_id_cons -> ID .)
    DIF             reduce using rule 175 (seen_id_cons -> ID .)
    EQ_EQ           reduce using rule 175 (seen_id_cons -> ID .)
    RPAREN          reduce using rule 175 (seen_id_cons -> ID .)
    COMMA           reduce using rule 175 (seen_id_cons -> ID .)
    RBRACKET        reduce using rule 175 (seen_id_cons -> ID .)
    COL             reduce using rule 175 (seen_id_cons -> ID .)
    RES_LIST        reduce using rule 175 (seen_id_cons -> ID .)
    RES_ARRAY       reduce using rule 175 (seen_id_cons -> ID .)
    RES_INT         reduce using rule 175 (seen_id_cons -> ID .)
    RES_FLOAT       reduce using rule 175 (seen_id_cons -> ID .)
    RES_DOUBLE      reduce using rule 175 (seen_id_cons -> ID .)
    RES_BOOLEAN     reduce using rule 175 (seen_id_cons -> ID .)
    RES_STRING      reduce using rule 175 (seen_id_cons -> ID .)
    RCURLY          reduce using rule 175 (seen_id_cons -> ID .)
    EQUALS          shift and go to state 130


state 81

    (167) cons -> seen_int_cons . exp_cons_int
    (181) exp_cons_int -> .

    RES_LIST        reduce using rule 181 (exp_cons_int -> .)
    RES_ARRAY       reduce using rule 181 (exp_cons_int -> .)
    RES_INT         reduce using rule 181 (exp_cons_int -> .)
    RES_FLOAT       reduce using rule 181 (exp_cons_int -> .)
    RES_DOUBLE      reduce using rule 181 (exp_cons_int -> .)
    RES_BOOLEAN     reduce using rule 181 (exp_cons_int -> .)
    RES_STRING      reduce using rule 181 (exp_cons_int -> .)
    RES_DEF         reduce using rule 181 (exp_cons_int -> .)
    RES_FUNC        reduce using rule 181 (exp_cons_int -> .)
    RES_START       reduce using rule 181 (exp_cons_int -> .)
    RES_RETURN      reduce using rule 181 (exp_cons_int -> .)
    RES_READ        reduce using rule 181 (exp_cons_int -> .)
    RES_PRINT       reduce using rule 181 (exp_cons_int -> .)
    RES_IF          reduce using rule 181 (exp_cons_int -> .)
    RES_SWITCH      reduce using rule 181 (exp_cons_int -> .)
    RES_WHILE       reduce using rule 181 (exp_cons_int -> .)
    RES_FOR         reduce using rule 181 (exp_cons_int -> .)
    ID              reduce using rule 181 (exp_cons_int -> .)
    $end            reduce using rule 181 (exp_cons_int -> .)
    RES_END         reduce using rule 181 (exp_cons_int -> .)
    E_END           reduce using rule 181 (exp_cons_int -> .)
    RES_ELSE        reduce using rule 181 (exp_cons_int -> .)
    RES_CASE        reduce using rule 181 (exp_cons_int -> .)
    COMMA           reduce using rule 181 (exp_cons_int -> .)
    RCURLY          reduce using rule 181 (exp_cons_int -> .)
    TIMES           reduce using rule 181 (exp_cons_int -> .)
    DIVIDE          reduce using rule 181 (exp_cons_int -> .)
    PLUS            reduce using rule 181 (exp_cons_int -> .)
    MINUS           reduce using rule 181 (exp_cons_int -> .)
    MIN             reduce using rule 181 (exp_cons_int -> .)
    MIN_EQ          reduce using rule 181 (exp_cons_int -> .)
    MAY             reduce using rule 181 (exp_cons_int -> .)
    MAY_EQ          reduce using rule 181 (exp_cons_int -> .)
    DIF             reduce using rule 181 (exp_cons_int -> .)
    EQ_EQ           reduce using rule 181 (exp_cons_int -> .)
    RPAREN          reduce using rule 181 (exp_cons_int -> .)
    RBRACKET        reduce using rule 181 (exp_cons_int -> .)
    COL             reduce using rule 181 (exp_cons_int -> .)

    exp_cons_int                   shift and go to state 131

state 82

    (172) cons -> conslist .

    TIMES           reduce using rule 172 (cons -> conslist .)
    DIVIDE          reduce using rule 172 (cons -> conslist .)
    PLUS            reduce using rule 172 (cons -> conslist .)
    MINUS           reduce using rule 172 (cons -> conslist .)
    COMMA           reduce using rule 172 (cons -> conslist .)
    RBRACKET        reduce using rule 172 (cons -> conslist .)
    RPAREN          reduce using rule 172 (cons -> conslist .)
    RES_RETURN      reduce using rule 172 (cons -> conslist .)
    RES_READ        reduce using rule 172 (cons -> conslist .)
    RES_PRINT       reduce using rule 172 (cons -> conslist .)
    RES_DEF         reduce using rule 172 (cons -> conslist .)
    RES_IF          reduce using rule 172 (cons -> conslist .)
    RES_SWITCH      reduce using rule 172 (cons -> conslist .)
    RES_WHILE       reduce using rule 172 (cons -> conslist .)
    RES_FOR         reduce using rule 172 (cons -> conslist .)
    ID              reduce using rule 172 (cons -> conslist .)
    RES_FUNC        reduce using rule 172 (cons -> conslist .)
    RES_START       reduce using rule 172 (cons -> conslist .)
    $end            reduce using rule 172 (cons -> conslist .)
    RES_END         reduce using rule 172 (cons -> conslist .)
    E_END           reduce using rule 172 (cons -> conslist .)
    RES_ELSE        reduce using rule 172 (cons -> conslist .)
    RES_CASE        reduce using rule 172 (cons -> conslist .)
    MIN             reduce using rule 172 (cons -> conslist .)
    MIN_EQ          reduce using rule 172 (cons -> conslist .)
    MAY             reduce using rule 172 (cons -> conslist .)
    MAY_EQ          reduce using rule 172 (cons -> conslist .)
    DIF             reduce using rule 172 (cons -> conslist .)
    EQ_EQ           reduce using rule 172 (cons -> conslist .)
    COL             reduce using rule 172 (cons -> conslist .)
    RCURLY          reduce using rule 172 (cons -> conslist .)
    RES_LIST        reduce using rule 172 (cons -> conslist .)
    RES_ARRAY       reduce using rule 172 (cons -> conslist .)
    RES_INT         reduce using rule 172 (cons -> conslist .)
    RES_FLOAT       reduce using rule 172 (cons -> conslist .)
    RES_DOUBLE      reduce using rule 172 (cons -> conslist .)
    RES_BOOLEAN     reduce using rule 172 (cons -> conslist .)
    RES_STRING      reduce using rule 172 (cons -> conslist .)


state 83

    (176) seen_float_cons -> CTE_FLOAT .

    COMMA           reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RBRACKET        reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    TIMES           reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    DIVIDE          reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    PLUS            reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    MINUS           reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RPAREN          reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    MIN             reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    MIN_EQ          reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    MAY             reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    MAY_EQ          reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    DIF             reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    EQ_EQ           reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_RETURN      reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_READ        reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_PRINT       reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_DEF         reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_IF          reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_SWITCH      reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_WHILE       reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_FOR         reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    ID              reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_FUNC        reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_START       reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    $end            reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_END         reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    E_END           reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_ELSE        reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_CASE        reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    COL             reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RCURLY          reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_LIST        reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_ARRAY       reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_INT         reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_FLOAT       reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_DOUBLE      reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_BOOLEAN     reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)
    RES_STRING      reduce using rule 176 (seen_float_cons -> CTE_FLOAT .)


state 84

    (174) seen_bool -> RES_FALSE .

    TIMES           reduce using rule 174 (seen_bool -> RES_FALSE .)
    DIVIDE          reduce using rule 174 (seen_bool -> RES_FALSE .)
    PLUS            reduce using rule 174 (seen_bool -> RES_FALSE .)
    MINUS           reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_RETURN      reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_READ        reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_PRINT       reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_DEF         reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_IF          reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_SWITCH      reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_WHILE       reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_FOR         reduce using rule 174 (seen_bool -> RES_FALSE .)
    ID              reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_FUNC        reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_START       reduce using rule 174 (seen_bool -> RES_FALSE .)
    $end            reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_END         reduce using rule 174 (seen_bool -> RES_FALSE .)
    E_END           reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_ELSE        reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_CASE        reduce using rule 174 (seen_bool -> RES_FALSE .)
    MIN             reduce using rule 174 (seen_bool -> RES_FALSE .)
    MIN_EQ          reduce using rule 174 (seen_bool -> RES_FALSE .)
    MAY             reduce using rule 174 (seen_bool -> RES_FALSE .)
    MAY_EQ          reduce using rule 174 (seen_bool -> RES_FALSE .)
    DIF             reduce using rule 174 (seen_bool -> RES_FALSE .)
    EQ_EQ           reduce using rule 174 (seen_bool -> RES_FALSE .)
    RPAREN          reduce using rule 174 (seen_bool -> RES_FALSE .)
    COMMA           reduce using rule 174 (seen_bool -> RES_FALSE .)
    RBRACKET        reduce using rule 174 (seen_bool -> RES_FALSE .)
    COL             reduce using rule 174 (seen_bool -> RES_FALSE .)
    RCURLY          reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_LIST        reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_ARRAY       reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_INT         reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_FLOAT       reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_DOUBLE      reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_BOOLEAN     reduce using rule 174 (seen_bool -> RES_FALSE .)
    RES_STRING      reduce using rule 174 (seen_bool -> RES_FALSE .)


state 85

    (33) vars_1 -> dato ID vars2 vars1_1 .

    RES_DEF         reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)
    RES_FUNC        reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)
    RES_START       reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)
    RES_RETURN      reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)
    RES_READ        reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)
    RES_PRINT       reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)
    RES_IF          reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)
    RES_SWITCH      reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)
    RES_WHILE       reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)
    RES_FOR         reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)
    ID              reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)
    $end            reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)
    RES_END         reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)
    E_END           reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)
    RES_ELSE        reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)
    RES_CASE        reduce using rule 33 (vars_1 -> dato ID vars2 vars1_1 .)


state 86

    (36) vars1_1 -> vars1 .

    RES_DEF         reduce using rule 36 (vars1_1 -> vars1 .)
    RES_FUNC        reduce using rule 36 (vars1_1 -> vars1 .)
    RES_START       reduce using rule 36 (vars1_1 -> vars1 .)
    RES_RETURN      reduce using rule 36 (vars1_1 -> vars1 .)
    RES_READ        reduce using rule 36 (vars1_1 -> vars1 .)
    RES_PRINT       reduce using rule 36 (vars1_1 -> vars1 .)
    RES_IF          reduce using rule 36 (vars1_1 -> vars1 .)
    RES_SWITCH      reduce using rule 36 (vars1_1 -> vars1 .)
    RES_WHILE       reduce using rule 36 (vars1_1 -> vars1 .)
    RES_FOR         reduce using rule 36 (vars1_1 -> vars1 .)
    ID              reduce using rule 36 (vars1_1 -> vars1 .)
    $end            reduce using rule 36 (vars1_1 -> vars1 .)
    RES_END         reduce using rule 36 (vars1_1 -> vars1 .)
    E_END           reduce using rule 36 (vars1_1 -> vars1 .)
    RES_ELSE        reduce using rule 36 (vars1_1 -> vars1 .)
    RES_CASE        reduce using rule 36 (vars1_1 -> vars1 .)


state 87

    (37) vars1_1 -> empty .

    RES_DEF         reduce using rule 37 (vars1_1 -> empty .)
    RES_FUNC        reduce using rule 37 (vars1_1 -> empty .)
    RES_START       reduce using rule 37 (vars1_1 -> empty .)
    RES_RETURN      reduce using rule 37 (vars1_1 -> empty .)
    RES_READ        reduce using rule 37 (vars1_1 -> empty .)
    RES_PRINT       reduce using rule 37 (vars1_1 -> empty .)
    RES_IF          reduce using rule 37 (vars1_1 -> empty .)
    RES_SWITCH      reduce using rule 37 (vars1_1 -> empty .)
    RES_WHILE       reduce using rule 37 (vars1_1 -> empty .)
    RES_FOR         reduce using rule 37 (vars1_1 -> empty .)
    ID              reduce using rule 37 (vars1_1 -> empty .)
    $end            reduce using rule 37 (vars1_1 -> empty .)
    RES_END         reduce using rule 37 (vars1_1 -> empty .)
    E_END           reduce using rule 37 (vars1_1 -> empty .)
    RES_ELSE        reduce using rule 37 (vars1_1 -> empty .)
    RES_CASE        reduce using rule 37 (vars1_1 -> empty .)


state 88

    (40) vars3 -> COMMA ID . vars3
    (40) vars3 -> . COMMA ID vars3
    (41) vars3 -> . empty
    (197) empty -> .

    COMMA           shift and go to state 60
    RES_LIST        reduce using rule 197 (empty -> .)
    RES_ARRAY       reduce using rule 197 (empty -> .)
    RES_INT         reduce using rule 197 (empty -> .)
    RES_FLOAT       reduce using rule 197 (empty -> .)
    RES_DOUBLE      reduce using rule 197 (empty -> .)
    RES_BOOLEAN     reduce using rule 197 (empty -> .)
    RES_STRING      reduce using rule 197 (empty -> .)
    RES_DEF         reduce using rule 197 (empty -> .)
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)
    RES_RETURN      reduce using rule 197 (empty -> .)
    RES_READ        reduce using rule 197 (empty -> .)
    RES_PRINT       reduce using rule 197 (empty -> .)
    RES_IF          reduce using rule 197 (empty -> .)
    RES_SWITCH      reduce using rule 197 (empty -> .)
    RES_WHILE       reduce using rule 197 (empty -> .)
    RES_FOR         reduce using rule 197 (empty -> .)
    ID              reduce using rule 197 (empty -> .)
    $end            reduce using rule 197 (empty -> .)
    RES_END         reduce using rule 197 (empty -> .)
    E_END           reduce using rule 197 (empty -> .)
    RES_ELSE        reduce using rule 197 (empty -> .)
    RES_CASE        reduce using rule 197 (empty -> .)

    vars3                          shift and go to state 132
    empty                          shift and go to state 61

state 89

    (42) list -> RES_LIST dato ID list1 .

    ID              reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    RES_DEF         reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    RES_FUNC        reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    RES_START       reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    RES_RETURN      reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    RES_READ        reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    RES_PRINT       reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    RES_IF          reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    RES_SWITCH      reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    RES_WHILE       reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    RES_FOR         reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    $end            reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    RES_END         reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    E_END           reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    RES_ELSE        reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    RES_CASE        reduce using rule 42 (list -> RES_LIST dato ID list1 .)
    RPAREN          reduce using rule 42 (list -> RES_LIST dato ID list1 .)


state 90

    (43) list1 -> LCURLY . cons_loop RCURLY
    (45) cons_loop -> . cons cons_loop_1
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    seen_int_cons                  shift and go to state 81
    seen_double_cons               shift and go to state 77
    cons                           shift and go to state 133
    seen_string_cons               shift and go to state 72
    seen_bool                      shift and go to state 71
    seen_float_cons                shift and go to state 73
    conslist                       shift and go to state 82
    cons_loop                      shift and go to state 134
    seen_id_cons                   shift and go to state 74

state 91

    (44) list1 -> empty .

    RES_DEF         reduce using rule 44 (list1 -> empty .)
    RES_FUNC        reduce using rule 44 (list1 -> empty .)
    RES_START       reduce using rule 44 (list1 -> empty .)
    RES_RETURN      reduce using rule 44 (list1 -> empty .)
    RES_READ        reduce using rule 44 (list1 -> empty .)
    RES_PRINT       reduce using rule 44 (list1 -> empty .)
    RES_IF          reduce using rule 44 (list1 -> empty .)
    RES_SWITCH      reduce using rule 44 (list1 -> empty .)
    RES_WHILE       reduce using rule 44 (list1 -> empty .)
    RES_FOR         reduce using rule 44 (list1 -> empty .)
    ID              reduce using rule 44 (list1 -> empty .)
    $end            reduce using rule 44 (list1 -> empty .)
    RES_END         reduce using rule 44 (list1 -> empty .)
    E_END           reduce using rule 44 (list1 -> empty .)
    RES_ELSE        reduce using rule 44 (list1 -> empty .)
    RES_CASE        reduce using rule 44 (list1 -> empty .)
    RPAREN          reduce using rule 44 (list1 -> empty .)


state 92

    (18) prototipos_1 -> tipo seen_id_proto prototipos_2 .

    RPAREN          reduce using rule 18 (prototipos_1 -> tipo seen_id_proto prototipos_2 .)


state 93

    (21) prototipos_2 -> COMMA . prototipos_1
    (18) prototipos_1 -> . tipo seen_id_proto prototipos_2
    (19) prototipos_1 -> . empty
    (28) tipo -> . dato
    (29) tipo -> . estructura
    (197) empty -> .
    (23) dato -> . RES_INT
    (24) dato -> . RES_FLOAT
    (25) dato -> . RES_DOUBLE
    (26) dato -> . RES_BOOLEAN
    (27) dato -> . RES_STRING
    (30) estructura -> . list
    (31) estructura -> . array
    (42) list -> . RES_LIST dato ID list1
    (48) array -> . RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1

    RPAREN          reduce using rule 197 (empty -> .)
    RES_INT         shift and go to state 13
    RES_FLOAT       shift and go to state 17
    RES_DOUBLE      shift and go to state 15
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 14
    RES_LIST        shift and go to state 36
    RES_ARRAY       shift and go to state 33

    tipo                           shift and go to state 48
    prototipos_1                   shift and go to state 135
    list                           shift and go to state 37
    estructura                     shift and go to state 49
    dato                           shift and go to state 51
    array                          shift and go to state 31
    empty                          shift and go to state 50

state 94

    (22) prototipos_2 -> empty .

    RPAREN          reduce using rule 22 (prototipos_2 -> empty .)


state 95

    (74) estatutos -> vars .

    RES_RETURN      reduce using rule 74 (estatutos -> vars .)
    RES_READ        reduce using rule 74 (estatutos -> vars .)
    RES_PRINT       reduce using rule 74 (estatutos -> vars .)
    RES_DEF         reduce using rule 74 (estatutos -> vars .)
    RES_IF          reduce using rule 74 (estatutos -> vars .)
    RES_SWITCH      reduce using rule 74 (estatutos -> vars .)
    RES_WHILE       reduce using rule 74 (estatutos -> vars .)
    RES_FOR         reduce using rule 74 (estatutos -> vars .)
    ID              reduce using rule 74 (estatutos -> vars .)
    RES_FUNC        reduce using rule 74 (estatutos -> vars .)
    RES_START       reduce using rule 74 (estatutos -> vars .)
    $end            reduce using rule 74 (estatutos -> vars .)
    RES_END         reduce using rule 74 (estatutos -> vars .)
    E_END           reduce using rule 74 (estatutos -> vars .)
    RES_ELSE        reduce using rule 74 (estatutos -> vars .)
    RES_CASE        reduce using rule 74 (estatutos -> vars .)


state 96

    (114) for -> RES_FOR . LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3

    LPAREN          shift and go to state 136


state 97

    (61) modulos -> prototipos se_uso COL bloque . cuad_def_proc_4
    (62) cuad_def_proc_4 -> .

    RES_FUNC        reduce using rule 62 (cuad_def_proc_4 -> .)
    RES_START       reduce using rule 62 (cuad_def_proc_4 -> .)
    $end            reduce using rule 62 (cuad_def_proc_4 -> .)

    cuad_def_proc_4                shift and go to state 137

state 98

    (121) if -> RES_IF . LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse

    LPAREN          shift and go to state 138


state 99

    (77) condicion -> if .

    E_END           reduce using rule 77 (condicion -> if .)


state 100

    (69) estatutos -> ciclo . E_END

    E_END           shift and go to state 139


state 101

    (76) ciclo -> for .

    E_END           reduce using rule 76 (ciclo -> for .)


state 102

    (91) asignacion -> seen_id_asignacion . consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (187) consarray -> . is_dim LBRACKET dim_pos RBRACKET
    (188) consarray -> . empty
    (189) is_dim -> .
    (197) empty -> .

    LBRACKET        reduce using rule 189 (is_dim -> .)
    EQUALS          reduce using rule 197 (empty -> .)

    is_dim                         shift and go to state 126
    consarray                      shift and go to state 140
    empty                          shift and go to state 128

state 103

    (78) condicion -> switch .

    E_END           reduce using rule 78 (condicion -> switch .)


state 104

    (94) seen_id_asignacion -> ID .
    (81) seen_id_call -> ID .

    EQUALS          reduce using rule 94 (seen_id_asignacion -> ID .)
    LBRACKET        reduce using rule 94 (seen_id_asignacion -> ID .)
    LPAREN          reduce using rule 81 (seen_id_call -> ID .)


state 105

    (73) estatutos -> llamada .

    RES_RETURN      reduce using rule 73 (estatutos -> llamada .)
    RES_READ        reduce using rule 73 (estatutos -> llamada .)
    RES_PRINT       reduce using rule 73 (estatutos -> llamada .)
    RES_DEF         reduce using rule 73 (estatutos -> llamada .)
    RES_IF          reduce using rule 73 (estatutos -> llamada .)
    RES_SWITCH      reduce using rule 73 (estatutos -> llamada .)
    RES_WHILE       reduce using rule 73 (estatutos -> llamada .)
    RES_FOR         reduce using rule 73 (estatutos -> llamada .)
    ID              reduce using rule 73 (estatutos -> llamada .)
    RES_FUNC        reduce using rule 73 (estatutos -> llamada .)
    RES_START       reduce using rule 73 (estatutos -> llamada .)
    $end            reduce using rule 73 (estatutos -> llamada .)
    RES_END         reduce using rule 73 (estatutos -> llamada .)
    E_END           reduce using rule 73 (estatutos -> llamada .)
    RES_ELSE        reduce using rule 73 (estatutos -> llamada .)
    RES_CASE        reduce using rule 73 (estatutos -> llamada .)


state 106

    (68) estatutos -> condicion . E_END

    E_END           shift and go to state 141


state 107

    (89) escritura -> RES_PRINT . LPAREN cons RPAREN cuadruplo_est_prnt

    LPAREN          shift and go to state 142


state 108

    (70) estatutos -> lectura .

    RES_RETURN      reduce using rule 70 (estatutos -> lectura .)
    RES_READ        reduce using rule 70 (estatutos -> lectura .)
    RES_PRINT       reduce using rule 70 (estatutos -> lectura .)
    RES_DEF         reduce using rule 70 (estatutos -> lectura .)
    RES_IF          reduce using rule 70 (estatutos -> lectura .)
    RES_SWITCH      reduce using rule 70 (estatutos -> lectura .)
    RES_WHILE       reduce using rule 70 (estatutos -> lectura .)
    RES_FOR         reduce using rule 70 (estatutos -> lectura .)
    ID              reduce using rule 70 (estatutos -> lectura .)
    RES_FUNC        reduce using rule 70 (estatutos -> lectura .)
    RES_START       reduce using rule 70 (estatutos -> lectura .)
    $end            reduce using rule 70 (estatutos -> lectura .)
    RES_END         reduce using rule 70 (estatutos -> lectura .)
    E_END           reduce using rule 70 (estatutos -> lectura .)
    RES_ELSE        reduce using rule 70 (estatutos -> lectura .)
    RES_CASE        reduce using rule 70 (estatutos -> lectura .)


state 109

    (66) bloque -> empty .

    RES_CASE        reduce using rule 66 (bloque -> empty .)
    E_END           reduce using rule 66 (bloque -> empty .)
    RES_FUNC        reduce using rule 66 (bloque -> empty .)
    RES_START       reduce using rule 66 (bloque -> empty .)
    $end            reduce using rule 66 (bloque -> empty .)
    RES_END         reduce using rule 66 (bloque -> empty .)
    RES_ELSE        reduce using rule 66 (bloque -> empty .)


state 110

    (65) bloque -> return . bloque
    (64) bloque -> . estatutos bloque
    (65) bloque -> . return bloque
    (66) bloque -> . empty
    (68) estatutos -> . condicion E_END
    (69) estatutos -> . ciclo E_END
    (70) estatutos -> . lectura
    (71) estatutos -> . escritura
    (72) estatutos -> . asignacion
    (73) estatutos -> . llamada
    (74) estatutos -> . vars
    (67) return -> . RES_RETURN exp
    (197) empty -> .
    (77) condicion -> . if
    (78) condicion -> . switch
    (75) ciclo -> . while
    (76) ciclo -> . for
    (88) lectura -> . RES_READ LPAREN tipo RPAREN
    (89) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (91) asignacion -> . seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (79) llamada -> . seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4
    (32) vars -> . RES_DEF COL vars1
    (121) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (128) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (110) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (114) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (94) seen_id_asignacion -> . ID
    (81) seen_id_call -> . ID

    RES_RETURN      shift and go to state 114
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)
    $end            reduce using rule 197 (empty -> .)
    RES_END         reduce using rule 197 (empty -> .)
    E_END           reduce using rule 197 (empty -> .)
    RES_ELSE        reduce using rule 197 (empty -> .)
    RES_CASE        reduce using rule 197 (empty -> .)
    RES_READ        shift and go to state 116
    RES_PRINT       shift and go to state 107
    RES_DEF         shift and go to state 20
    RES_IF          shift and go to state 98
    RES_SWITCH      shift and go to state 115
    RES_WHILE       shift and go to state 112
    RES_FOR         shift and go to state 96
    ID              shift and go to state 104

    vars                           shift and go to state 95
    bloque                         shift and go to state 143
    if                             shift and go to state 99
    ciclo                          shift and go to state 100
    seen_id_asignacion             shift and go to state 102
    switch                         shift and go to state 103
    llamada                        shift and go to state 105
    condicion                      shift and go to state 106
    lectura                        shift and go to state 108
    empty                          shift and go to state 109
    return                         shift and go to state 110
    estatutos                      shift and go to state 111
    seen_id_call                   shift and go to state 113
    for                            shift and go to state 101
    asignacion                     shift and go to state 117
    while                          shift and go to state 118
    escritura                      shift and go to state 119

state 111

    (64) bloque -> estatutos . bloque
    (64) bloque -> . estatutos bloque
    (65) bloque -> . return bloque
    (66) bloque -> . empty
    (68) estatutos -> . condicion E_END
    (69) estatutos -> . ciclo E_END
    (70) estatutos -> . lectura
    (71) estatutos -> . escritura
    (72) estatutos -> . asignacion
    (73) estatutos -> . llamada
    (74) estatutos -> . vars
    (67) return -> . RES_RETURN exp
    (197) empty -> .
    (77) condicion -> . if
    (78) condicion -> . switch
    (75) ciclo -> . while
    (76) ciclo -> . for
    (88) lectura -> . RES_READ LPAREN tipo RPAREN
    (89) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (91) asignacion -> . seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (79) llamada -> . seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4
    (32) vars -> . RES_DEF COL vars1
    (121) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (128) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (110) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (114) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (94) seen_id_asignacion -> . ID
    (81) seen_id_call -> . ID

    RES_RETURN      shift and go to state 114
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)
    $end            reduce using rule 197 (empty -> .)
    RES_END         reduce using rule 197 (empty -> .)
    E_END           reduce using rule 197 (empty -> .)
    RES_ELSE        reduce using rule 197 (empty -> .)
    RES_CASE        reduce using rule 197 (empty -> .)
    RES_READ        shift and go to state 116
    RES_PRINT       shift and go to state 107
    RES_DEF         shift and go to state 20
    RES_IF          shift and go to state 98
    RES_SWITCH      shift and go to state 115
    RES_WHILE       shift and go to state 112
    RES_FOR         shift and go to state 96
    ID              shift and go to state 104

    vars                           shift and go to state 95
    bloque                         shift and go to state 144
    if                             shift and go to state 99
    ciclo                          shift and go to state 100
    seen_id_asignacion             shift and go to state 102
    switch                         shift and go to state 103
    llamada                        shift and go to state 105
    condicion                      shift and go to state 106
    lectura                        shift and go to state 108
    empty                          shift and go to state 109
    return                         shift and go to state 110
    estatutos                      shift and go to state 111
    seen_id_call                   shift and go to state 113
    for                            shift and go to state 101
    asignacion                     shift and go to state 117
    while                          shift and go to state 118
    escritura                      shift and go to state 119

state 112

    (110) while -> RES_WHILE . cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (111) cuadruplo_est_while_1 -> .

    LPAREN          reduce using rule 111 (cuadruplo_est_while_1 -> .)

    cuadruplo_est_while_1          shift and go to state 145

state 113

    (79) llamada -> seen_id_call . LPAREN call_proc_2 llamada1 RPAREN call_proc_4

    LPAREN          shift and go to state 146


state 114

    (67) return -> RES_RETURN . exp
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    termino                        shift and go to state 148
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    seen_float_cons                shift and go to state 73
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 77
    seen_id_cons                   shift and go to state 74
    seen_int_cons                  shift and go to state 81
    conslist                       shift and go to state 82
    exp                            shift and go to state 153

state 115

    (128) switch -> RES_SWITCH . LPAREN seen_exp_switch RPAREN COL switch2

    LPAREN          shift and go to state 154


state 116

    (88) lectura -> RES_READ . LPAREN tipo RPAREN

    LPAREN          shift and go to state 155


state 117

    (72) estatutos -> asignacion .

    RES_RETURN      reduce using rule 72 (estatutos -> asignacion .)
    RES_READ        reduce using rule 72 (estatutos -> asignacion .)
    RES_PRINT       reduce using rule 72 (estatutos -> asignacion .)
    RES_DEF         reduce using rule 72 (estatutos -> asignacion .)
    RES_IF          reduce using rule 72 (estatutos -> asignacion .)
    RES_SWITCH      reduce using rule 72 (estatutos -> asignacion .)
    RES_WHILE       reduce using rule 72 (estatutos -> asignacion .)
    RES_FOR         reduce using rule 72 (estatutos -> asignacion .)
    ID              reduce using rule 72 (estatutos -> asignacion .)
    RES_FUNC        reduce using rule 72 (estatutos -> asignacion .)
    RES_START       reduce using rule 72 (estatutos -> asignacion .)
    $end            reduce using rule 72 (estatutos -> asignacion .)
    RES_END         reduce using rule 72 (estatutos -> asignacion .)
    E_END           reduce using rule 72 (estatutos -> asignacion .)
    RES_ELSE        reduce using rule 72 (estatutos -> asignacion .)
    RES_CASE        reduce using rule 72 (estatutos -> asignacion .)


state 118

    (75) ciclo -> while .

    E_END           reduce using rule 75 (ciclo -> while .)


state 119

    (71) estatutos -> escritura .

    RES_RETURN      reduce using rule 71 (estatutos -> escritura .)
    RES_READ        reduce using rule 71 (estatutos -> escritura .)
    RES_PRINT       reduce using rule 71 (estatutos -> escritura .)
    RES_DEF         reduce using rule 71 (estatutos -> escritura .)
    RES_IF          reduce using rule 71 (estatutos -> escritura .)
    RES_SWITCH      reduce using rule 71 (estatutos -> escritura .)
    RES_WHILE       reduce using rule 71 (estatutos -> escritura .)
    RES_FOR         reduce using rule 71 (estatutos -> escritura .)
    ID              reduce using rule 71 (estatutos -> escritura .)
    RES_FUNC        reduce using rule 71 (estatutos -> escritura .)
    RES_START       reduce using rule 71 (estatutos -> escritura .)
    $end            reduce using rule 71 (estatutos -> escritura .)
    RES_END         reduce using rule 71 (estatutos -> escritura .)
    E_END           reduce using rule 71 (estatutos -> escritura .)
    RES_ELSE        reduce using rule 71 (estatutos -> escritura .)
    RES_CASE        reduce using rule 71 (estatutos -> escritura .)


state 120

    (185) main -> RES_START comienza_main COL . bloque RES_END
    (64) bloque -> . estatutos bloque
    (65) bloque -> . return bloque
    (66) bloque -> . empty
    (68) estatutos -> . condicion E_END
    (69) estatutos -> . ciclo E_END
    (70) estatutos -> . lectura
    (71) estatutos -> . escritura
    (72) estatutos -> . asignacion
    (73) estatutos -> . llamada
    (74) estatutos -> . vars
    (67) return -> . RES_RETURN exp
    (197) empty -> .
    (77) condicion -> . if
    (78) condicion -> . switch
    (75) ciclo -> . while
    (76) ciclo -> . for
    (88) lectura -> . RES_READ LPAREN tipo RPAREN
    (89) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (91) asignacion -> . seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (79) llamada -> . seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4
    (32) vars -> . RES_DEF COL vars1
    (121) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (128) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (110) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (114) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (94) seen_id_asignacion -> . ID
    (81) seen_id_call -> . ID

    RES_RETURN      shift and go to state 114
    RES_END         reduce using rule 197 (empty -> .)
    RES_READ        shift and go to state 116
    RES_PRINT       shift and go to state 107
    RES_DEF         shift and go to state 20
    RES_IF          shift and go to state 98
    RES_SWITCH      shift and go to state 115
    RES_WHILE       shift and go to state 112
    RES_FOR         shift and go to state 96
    ID              shift and go to state 104

    vars                           shift and go to state 95
    bloque                         shift and go to state 156
    if                             shift and go to state 99
    ciclo                          shift and go to state 100
    seen_id_asignacion             shift and go to state 102
    switch                         shift and go to state 103
    llamada                        shift and go to state 105
    condicion                      shift and go to state 106
    lectura                        shift and go to state 108
    empty                          shift and go to state 109
    return                         shift and go to state 110
    estatutos                      shift and go to state 111
    seen_id_call                   shift and go to state 113
    for                            shift and go to state 101
    asignacion                     shift and go to state 117
    while                          shift and go to state 118
    escritura                      shift and go to state 119

state 121

    (48) array -> RES_ARRAY dato crea_arr LBRACKET dim . RBRACKET genera_ms array1

    RBRACKET        shift and go to state 157


state 122

    (51) dim -> dim_cte . dim_struct dim2
    (53) dim_struct -> .

    COMMA           reduce using rule 53 (dim_struct -> .)
    RBRACKET        reduce using rule 53 (dim_struct -> .)

    dim_struct                     shift and go to state 158

state 123

    (52) dim_cte -> CTE_INT .

    COMMA           reduce using rule 52 (dim_cte -> CTE_INT .)
    RBRACKET        reduce using rule 52 (dim_cte -> CTE_INT .)


state 124

    (170) cons -> seen_string_cons exp_cons_string .

    TIMES           reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    DIVIDE          reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    PLUS            reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    MINUS           reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    COMMA           reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RBRACKET        reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RPAREN          reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_RETURN      reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_READ        reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_PRINT       reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_DEF         reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_IF          reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_SWITCH      reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_WHILE       reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_FOR         reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    ID              reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_FUNC        reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_START       reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    $end            reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_END         reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    E_END           reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_ELSE        reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_CASE        reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    MIN             reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    MIN_EQ          reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    MAY             reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    MAY_EQ          reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    DIF             reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    EQ_EQ           reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    COL             reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RCURLY          reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_LIST        reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_ARRAY       reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_INT         reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_FLOAT       reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_DOUBLE      reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_BOOLEAN     reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)
    RES_STRING      reduce using rule 170 (cons -> seen_string_cons exp_cons_string .)


state 125

    (168) cons -> seen_float_cons exp_cons_float .

    TIMES           reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    DIVIDE          reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    PLUS            reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    MINUS           reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    COMMA           reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RBRACKET        reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RPAREN          reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_RETURN      reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_READ        reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_PRINT       reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_DEF         reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_IF          reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_SWITCH      reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_WHILE       reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_FOR         reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    ID              reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_FUNC        reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_START       reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    $end            reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_END         reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    E_END           reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_ELSE        reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_CASE        reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    MIN             reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    MIN_EQ          reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    MAY             reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    MAY_EQ          reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    DIF             reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    EQ_EQ           reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    COL             reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RCURLY          reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_LIST        reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_ARRAY       reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_INT         reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_FLOAT       reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_DOUBLE      reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_BOOLEAN     reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)
    RES_STRING      reduce using rule 168 (cons -> seen_float_cons exp_cons_float .)


state 126

    (187) consarray -> is_dim . LBRACKET dim_pos RBRACKET

    LBRACKET        shift and go to state 159


state 127

    (166) cons -> seen_id_cons consarray . exp_1
    (180) exp_1 -> .

    RES_LIST        reduce using rule 180 (exp_1 -> .)
    RES_ARRAY       reduce using rule 180 (exp_1 -> .)
    RES_INT         reduce using rule 180 (exp_1 -> .)
    RES_FLOAT       reduce using rule 180 (exp_1 -> .)
    RES_DOUBLE      reduce using rule 180 (exp_1 -> .)
    RES_BOOLEAN     reduce using rule 180 (exp_1 -> .)
    RES_STRING      reduce using rule 180 (exp_1 -> .)
    RES_DEF         reduce using rule 180 (exp_1 -> .)
    RES_FUNC        reduce using rule 180 (exp_1 -> .)
    RES_START       reduce using rule 180 (exp_1 -> .)
    RES_RETURN      reduce using rule 180 (exp_1 -> .)
    RES_READ        reduce using rule 180 (exp_1 -> .)
    RES_PRINT       reduce using rule 180 (exp_1 -> .)
    RES_IF          reduce using rule 180 (exp_1 -> .)
    RES_SWITCH      reduce using rule 180 (exp_1 -> .)
    RES_WHILE       reduce using rule 180 (exp_1 -> .)
    RES_FOR         reduce using rule 180 (exp_1 -> .)
    ID              reduce using rule 180 (exp_1 -> .)
    $end            reduce using rule 180 (exp_1 -> .)
    RES_END         reduce using rule 180 (exp_1 -> .)
    E_END           reduce using rule 180 (exp_1 -> .)
    RES_ELSE        reduce using rule 180 (exp_1 -> .)
    RES_CASE        reduce using rule 180 (exp_1 -> .)
    COMMA           reduce using rule 180 (exp_1 -> .)
    RCURLY          reduce using rule 180 (exp_1 -> .)
    TIMES           reduce using rule 180 (exp_1 -> .)
    DIVIDE          reduce using rule 180 (exp_1 -> .)
    PLUS            reduce using rule 180 (exp_1 -> .)
    MINUS           reduce using rule 180 (exp_1 -> .)
    MIN             reduce using rule 180 (exp_1 -> .)
    MIN_EQ          reduce using rule 180 (exp_1 -> .)
    MAY             reduce using rule 180 (exp_1 -> .)
    MAY_EQ          reduce using rule 180 (exp_1 -> .)
    DIF             reduce using rule 180 (exp_1 -> .)
    EQ_EQ           reduce using rule 180 (exp_1 -> .)
    RPAREN          reduce using rule 180 (exp_1 -> .)
    RBRACKET        reduce using rule 180 (exp_1 -> .)
    COL             reduce using rule 180 (exp_1 -> .)

    exp_1                          shift and go to state 160

state 128

    (188) consarray -> empty .

    EQUALS          reduce using rule 188 (consarray -> empty .)
    RES_LIST        reduce using rule 188 (consarray -> empty .)
    RES_ARRAY       reduce using rule 188 (consarray -> empty .)
    RES_INT         reduce using rule 188 (consarray -> empty .)
    RES_FLOAT       reduce using rule 188 (consarray -> empty .)
    RES_DOUBLE      reduce using rule 188 (consarray -> empty .)
    RES_BOOLEAN     reduce using rule 188 (consarray -> empty .)
    RES_STRING      reduce using rule 188 (consarray -> empty .)
    RES_DEF         reduce using rule 188 (consarray -> empty .)
    RES_FUNC        reduce using rule 188 (consarray -> empty .)
    RES_START       reduce using rule 188 (consarray -> empty .)
    RES_RETURN      reduce using rule 188 (consarray -> empty .)
    RES_READ        reduce using rule 188 (consarray -> empty .)
    RES_PRINT       reduce using rule 188 (consarray -> empty .)
    RES_IF          reduce using rule 188 (consarray -> empty .)
    RES_SWITCH      reduce using rule 188 (consarray -> empty .)
    RES_WHILE       reduce using rule 188 (consarray -> empty .)
    RES_FOR         reduce using rule 188 (consarray -> empty .)
    ID              reduce using rule 188 (consarray -> empty .)
    $end            reduce using rule 188 (consarray -> empty .)
    RES_END         reduce using rule 188 (consarray -> empty .)
    E_END           reduce using rule 188 (consarray -> empty .)
    RES_ELSE        reduce using rule 188 (consarray -> empty .)
    RES_CASE        reduce using rule 188 (consarray -> empty .)
    COMMA           reduce using rule 188 (consarray -> empty .)
    RCURLY          reduce using rule 188 (consarray -> empty .)
    TIMES           reduce using rule 188 (consarray -> empty .)
    DIVIDE          reduce using rule 188 (consarray -> empty .)
    PLUS            reduce using rule 188 (consarray -> empty .)
    MINUS           reduce using rule 188 (consarray -> empty .)
    MIN             reduce using rule 188 (consarray -> empty .)
    MIN_EQ          reduce using rule 188 (consarray -> empty .)
    MAY             reduce using rule 188 (consarray -> empty .)
    MAY_EQ          reduce using rule 188 (consarray -> empty .)
    DIF             reduce using rule 188 (consarray -> empty .)
    EQ_EQ           reduce using rule 188 (consarray -> empty .)
    RPAREN          reduce using rule 188 (consarray -> empty .)
    RBRACKET        reduce using rule 188 (consarray -> empty .)
    COL             reduce using rule 188 (consarray -> empty .)


state 129

    (169) cons -> seen_double_cons exp_cons_double .

    TIMES           reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    DIVIDE          reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    PLUS            reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    MINUS           reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    COMMA           reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RBRACKET        reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RPAREN          reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_RETURN      reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_READ        reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_PRINT       reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_DEF         reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_IF          reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_SWITCH      reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_WHILE       reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_FOR         reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    ID              reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_FUNC        reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_START       reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    $end            reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_END         reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    E_END           reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_ELSE        reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_CASE        reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    MIN             reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    MIN_EQ          reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    MAY             reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    MAY_EQ          reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    DIF             reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    EQ_EQ           reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    COL             reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RCURLY          reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_LIST        reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_ARRAY       reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_INT         reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_FLOAT       reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_DOUBLE      reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_BOOLEAN     reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)
    RES_STRING      reduce using rule 169 (cons -> seen_double_cons exp_cons_double .)


state 130

    (194) conslist -> ID EQUALS . LCURLY conslist1 RCURLY

    LCURLY          shift and go to state 161


state 131

    (167) cons -> seen_int_cons exp_cons_int .

    TIMES           reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    DIVIDE          reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    PLUS            reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    MINUS           reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    COMMA           reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RBRACKET        reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RPAREN          reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_RETURN      reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_READ        reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_PRINT       reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_DEF         reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_IF          reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_SWITCH      reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_WHILE       reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_FOR         reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    ID              reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_FUNC        reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_START       reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    $end            reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_END         reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    E_END           reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_ELSE        reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_CASE        reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    MIN             reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    MIN_EQ          reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    MAY             reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    MAY_EQ          reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    DIF             reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    EQ_EQ           reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    COL             reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RCURLY          reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_LIST        reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_ARRAY       reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_INT         reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_FLOAT       reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_DOUBLE      reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_BOOLEAN     reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)
    RES_STRING      reduce using rule 167 (cons -> seen_int_cons exp_cons_int .)


state 132

    (40) vars3 -> COMMA ID vars3 .

    RES_LIST        reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_ARRAY       reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_INT         reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_FLOAT       reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_DOUBLE      reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_BOOLEAN     reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_STRING      reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_DEF         reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_FUNC        reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_START       reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_RETURN      reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_READ        reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_PRINT       reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_IF          reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_SWITCH      reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_WHILE       reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_FOR         reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    ID              reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    $end            reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_END         reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    E_END           reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_ELSE        reduce using rule 40 (vars3 -> COMMA ID vars3 .)
    RES_CASE        reduce using rule 40 (vars3 -> COMMA ID vars3 .)


state 133

    (45) cons_loop -> cons . cons_loop_1
    (46) cons_loop_1 -> . COMMA cons_loop
    (47) cons_loop_1 -> . empty
    (197) empty -> .

    COMMA           shift and go to state 162
    RCURLY          reduce using rule 197 (empty -> .)

    empty                          shift and go to state 163
    cons_loop_1                    shift and go to state 164

state 134

    (43) list1 -> LCURLY cons_loop . RCURLY

    RCURLY          shift and go to state 165


state 135

    (21) prototipos_2 -> COMMA prototipos_1 .

    RPAREN          reduce using rule 21 (prototipos_2 -> COMMA prototipos_1 .)


state 136

    (114) for -> RES_FOR LPAREN . forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (116) forexp -> . asignacion cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 COL entra_update asignacion
    (91) asignacion -> . seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (94) seen_id_asignacion -> . ID

    ID              shift and go to state 167

    asignacion                     shift and go to state 166
    seen_id_asignacion             shift and go to state 102
    forexp                         shift and go to state 168

state 137

    (61) modulos -> prototipos se_uso COL bloque cuad_def_proc_4 .

    RES_FUNC        reduce using rule 61 (modulos -> prototipos se_uso COL bloque cuad_def_proc_4 .)
    $end            reduce using rule 61 (modulos -> prototipos se_uso COL bloque cuad_def_proc_4 .)
    RES_START       reduce using rule 61 (modulos -> prototipos se_uso COL bloque cuad_def_proc_4 .)


state 138

    (121) if -> RES_IF LPAREN . expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (135) expresion -> . exp expresion_1 cuadruplo_exp_9
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    seen_double_cons               shift and go to state 77
    termino                        shift and go to state 148
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    seen_float_cons                shift and go to state 73
    factor                         shift and go to state 151
    seen_int_cons                  shift and go to state 81
    seen_id_cons                   shift and go to state 74
    expresion                      shift and go to state 169
    conslist                       shift and go to state 82
    exp                            shift and go to state 170

state 139

    (69) estatutos -> ciclo E_END .

    RES_RETURN      reduce using rule 69 (estatutos -> ciclo E_END .)
    RES_READ        reduce using rule 69 (estatutos -> ciclo E_END .)
    RES_PRINT       reduce using rule 69 (estatutos -> ciclo E_END .)
    RES_DEF         reduce using rule 69 (estatutos -> ciclo E_END .)
    RES_IF          reduce using rule 69 (estatutos -> ciclo E_END .)
    RES_SWITCH      reduce using rule 69 (estatutos -> ciclo E_END .)
    RES_WHILE       reduce using rule 69 (estatutos -> ciclo E_END .)
    RES_FOR         reduce using rule 69 (estatutos -> ciclo E_END .)
    ID              reduce using rule 69 (estatutos -> ciclo E_END .)
    RES_FUNC        reduce using rule 69 (estatutos -> ciclo E_END .)
    RES_START       reduce using rule 69 (estatutos -> ciclo E_END .)
    $end            reduce using rule 69 (estatutos -> ciclo E_END .)
    RES_END         reduce using rule 69 (estatutos -> ciclo E_END .)
    E_END           reduce using rule 69 (estatutos -> ciclo E_END .)
    RES_ELSE        reduce using rule 69 (estatutos -> ciclo E_END .)
    RES_CASE        reduce using rule 69 (estatutos -> ciclo E_END .)


state 140

    (91) asignacion -> seen_id_asignacion consarray . EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion

    EQUALS          shift and go to state 171


state 141

    (68) estatutos -> condicion E_END .

    RES_RETURN      reduce using rule 68 (estatutos -> condicion E_END .)
    RES_READ        reduce using rule 68 (estatutos -> condicion E_END .)
    RES_PRINT       reduce using rule 68 (estatutos -> condicion E_END .)
    RES_DEF         reduce using rule 68 (estatutos -> condicion E_END .)
    RES_IF          reduce using rule 68 (estatutos -> condicion E_END .)
    RES_SWITCH      reduce using rule 68 (estatutos -> condicion E_END .)
    RES_WHILE       reduce using rule 68 (estatutos -> condicion E_END .)
    RES_FOR         reduce using rule 68 (estatutos -> condicion E_END .)
    ID              reduce using rule 68 (estatutos -> condicion E_END .)
    RES_FUNC        reduce using rule 68 (estatutos -> condicion E_END .)
    RES_START       reduce using rule 68 (estatutos -> condicion E_END .)
    $end            reduce using rule 68 (estatutos -> condicion E_END .)
    RES_END         reduce using rule 68 (estatutos -> condicion E_END .)
    E_END           reduce using rule 68 (estatutos -> condicion E_END .)
    RES_ELSE        reduce using rule 68 (estatutos -> condicion E_END .)
    RES_CASE        reduce using rule 68 (estatutos -> condicion E_END .)


state 142

    (89) escritura -> RES_PRINT LPAREN . cons RPAREN cuadruplo_est_prnt
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    seen_int_cons                  shift and go to state 81
    seen_double_cons               shift and go to state 77
    cons                           shift and go to state 172
    seen_string_cons               shift and go to state 72
    seen_bool                      shift and go to state 71
    seen_float_cons                shift and go to state 73
    conslist                       shift and go to state 82
    seen_id_cons                   shift and go to state 74

state 143

    (65) bloque -> return bloque .

    RES_CASE        reduce using rule 65 (bloque -> return bloque .)
    E_END           reduce using rule 65 (bloque -> return bloque .)
    RES_FUNC        reduce using rule 65 (bloque -> return bloque .)
    RES_START       reduce using rule 65 (bloque -> return bloque .)
    $end            reduce using rule 65 (bloque -> return bloque .)
    RES_END         reduce using rule 65 (bloque -> return bloque .)
    RES_ELSE        reduce using rule 65 (bloque -> return bloque .)


state 144

    (64) bloque -> estatutos bloque .

    RES_CASE        reduce using rule 64 (bloque -> estatutos bloque .)
    E_END           reduce using rule 64 (bloque -> estatutos bloque .)
    RES_FUNC        reduce using rule 64 (bloque -> estatutos bloque .)
    RES_START       reduce using rule 64 (bloque -> estatutos bloque .)
    $end            reduce using rule 64 (bloque -> estatutos bloque .)
    RES_END         reduce using rule 64 (bloque -> estatutos bloque .)
    RES_ELSE        reduce using rule 64 (bloque -> estatutos bloque .)


state 145

    (110) while -> RES_WHILE cuadruplo_est_while_1 . LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3

    LPAREN          shift and go to state 173


state 146

    (79) llamada -> seen_id_call LPAREN . call_proc_2 llamada1 RPAREN call_proc_4
    (82) call_proc_2 -> .

    LPAREN          reduce using rule 82 (call_proc_2 -> .)
    PLUS            reduce using rule 82 (call_proc_2 -> .)
    MINUS           reduce using rule 82 (call_proc_2 -> .)
    ID              reduce using rule 82 (call_proc_2 -> .)
    CTE_INT         reduce using rule 82 (call_proc_2 -> .)
    CTE_FLOAT       reduce using rule 82 (call_proc_2 -> .)
    CTE_DOUBLE      reduce using rule 82 (call_proc_2 -> .)
    CTE_STRING      reduce using rule 82 (call_proc_2 -> .)
    RES_TRUE        reduce using rule 82 (call_proc_2 -> .)
    RES_FALSE       reduce using rule 82 (call_proc_2 -> .)
    RPAREN          reduce using rule 82 (call_proc_2 -> .)

    call_proc_2                    shift and go to state 174

state 147

    (161) factor -> cons .

    TIMES           reduce using rule 161 (factor -> cons .)
    DIVIDE          reduce using rule 161 (factor -> cons .)
    PLUS            reduce using rule 161 (factor -> cons .)
    MINUS           reduce using rule 161 (factor -> cons .)
    RES_RETURN      reduce using rule 161 (factor -> cons .)
    RES_READ        reduce using rule 161 (factor -> cons .)
    RES_PRINT       reduce using rule 161 (factor -> cons .)
    RES_DEF         reduce using rule 161 (factor -> cons .)
    RES_IF          reduce using rule 161 (factor -> cons .)
    RES_SWITCH      reduce using rule 161 (factor -> cons .)
    RES_WHILE       reduce using rule 161 (factor -> cons .)
    RES_FOR         reduce using rule 161 (factor -> cons .)
    ID              reduce using rule 161 (factor -> cons .)
    RES_FUNC        reduce using rule 161 (factor -> cons .)
    RES_START       reduce using rule 161 (factor -> cons .)
    $end            reduce using rule 161 (factor -> cons .)
    RES_END         reduce using rule 161 (factor -> cons .)
    E_END           reduce using rule 161 (factor -> cons .)
    RES_ELSE        reduce using rule 161 (factor -> cons .)
    RES_CASE        reduce using rule 161 (factor -> cons .)
    COL             reduce using rule 161 (factor -> cons .)
    RPAREN          reduce using rule 161 (factor -> cons .)
    MIN             reduce using rule 161 (factor -> cons .)
    MIN_EQ          reduce using rule 161 (factor -> cons .)
    MAY             reduce using rule 161 (factor -> cons .)
    MAY_EQ          reduce using rule 161 (factor -> cons .)
    DIF             reduce using rule 161 (factor -> cons .)
    EQ_EQ           reduce using rule 161 (factor -> cons .)
    COMMA           reduce using rule 161 (factor -> cons .)
    RBRACKET        reduce using rule 161 (factor -> cons .)


state 148

    (146) exp -> termino . cuadruplo_exp_4 exp1
    (158) cuadruplo_exp_4 -> .

    PLUS            reduce using rule 158 (cuadruplo_exp_4 -> .)
    MINUS           reduce using rule 158 (cuadruplo_exp_4 -> .)
    RES_RETURN      reduce using rule 158 (cuadruplo_exp_4 -> .)
    RES_READ        reduce using rule 158 (cuadruplo_exp_4 -> .)
    RES_PRINT       reduce using rule 158 (cuadruplo_exp_4 -> .)
    RES_DEF         reduce using rule 158 (cuadruplo_exp_4 -> .)
    RES_IF          reduce using rule 158 (cuadruplo_exp_4 -> .)
    RES_SWITCH      reduce using rule 158 (cuadruplo_exp_4 -> .)
    RES_WHILE       reduce using rule 158 (cuadruplo_exp_4 -> .)
    RES_FOR         reduce using rule 158 (cuadruplo_exp_4 -> .)
    ID              reduce using rule 158 (cuadruplo_exp_4 -> .)
    RES_FUNC        reduce using rule 158 (cuadruplo_exp_4 -> .)
    RES_START       reduce using rule 158 (cuadruplo_exp_4 -> .)
    $end            reduce using rule 158 (cuadruplo_exp_4 -> .)
    RES_END         reduce using rule 158 (cuadruplo_exp_4 -> .)
    E_END           reduce using rule 158 (cuadruplo_exp_4 -> .)
    RES_ELSE        reduce using rule 158 (cuadruplo_exp_4 -> .)
    RES_CASE        reduce using rule 158 (cuadruplo_exp_4 -> .)
    MIN             reduce using rule 158 (cuadruplo_exp_4 -> .)
    MIN_EQ          reduce using rule 158 (cuadruplo_exp_4 -> .)
    MAY             reduce using rule 158 (cuadruplo_exp_4 -> .)
    MAY_EQ          reduce using rule 158 (cuadruplo_exp_4 -> .)
    DIF             reduce using rule 158 (cuadruplo_exp_4 -> .)
    EQ_EQ           reduce using rule 158 (cuadruplo_exp_4 -> .)
    RPAREN          reduce using rule 158 (cuadruplo_exp_4 -> .)
    COMMA           reduce using rule 158 (cuadruplo_exp_4 -> .)
    RBRACKET        reduce using rule 158 (cuadruplo_exp_4 -> .)
    COL             reduce using rule 158 (cuadruplo_exp_4 -> .)

    cuadruplo_exp_4                shift and go to state 175

state 149

    (163) factor -> MINUS . cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    seen_int_cons                  shift and go to state 81
    seen_double_cons               shift and go to state 77
    cons                           shift and go to state 176
    seen_string_cons               shift and go to state 72
    seen_bool                      shift and go to state 71
    seen_float_cons                shift and go to state 73
    conslist                       shift and go to state 82
    seen_id_cons                   shift and go to state 74

state 150

    (162) factor -> PLUS . cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    seen_int_cons                  shift and go to state 81
    seen_double_cons               shift and go to state 77
    cons                           shift and go to state 177
    seen_string_cons               shift and go to state 72
    seen_bool                      shift and go to state 71
    seen_float_cons                shift and go to state 73
    conslist                       shift and go to state 82
    seen_id_cons                   shift and go to state 74

state 151

    (152) termino -> factor . cuadruplo_exp_5 termino1
    (159) cuadruplo_exp_5 -> .

    TIMES           reduce using rule 159 (cuadruplo_exp_5 -> .)
    DIVIDE          reduce using rule 159 (cuadruplo_exp_5 -> .)
    PLUS            reduce using rule 159 (cuadruplo_exp_5 -> .)
    MINUS           reduce using rule 159 (cuadruplo_exp_5 -> .)
    RES_RETURN      reduce using rule 159 (cuadruplo_exp_5 -> .)
    RES_READ        reduce using rule 159 (cuadruplo_exp_5 -> .)
    RES_PRINT       reduce using rule 159 (cuadruplo_exp_5 -> .)
    RES_DEF         reduce using rule 159 (cuadruplo_exp_5 -> .)
    RES_IF          reduce using rule 159 (cuadruplo_exp_5 -> .)
    RES_SWITCH      reduce using rule 159 (cuadruplo_exp_5 -> .)
    RES_WHILE       reduce using rule 159 (cuadruplo_exp_5 -> .)
    RES_FOR         reduce using rule 159 (cuadruplo_exp_5 -> .)
    ID              reduce using rule 159 (cuadruplo_exp_5 -> .)
    RES_FUNC        reduce using rule 159 (cuadruplo_exp_5 -> .)
    RES_START       reduce using rule 159 (cuadruplo_exp_5 -> .)
    $end            reduce using rule 159 (cuadruplo_exp_5 -> .)
    RES_END         reduce using rule 159 (cuadruplo_exp_5 -> .)
    E_END           reduce using rule 159 (cuadruplo_exp_5 -> .)
    RES_ELSE        reduce using rule 159 (cuadruplo_exp_5 -> .)
    RES_CASE        reduce using rule 159 (cuadruplo_exp_5 -> .)
    MIN             reduce using rule 159 (cuadruplo_exp_5 -> .)
    MIN_EQ          reduce using rule 159 (cuadruplo_exp_5 -> .)
    MAY             reduce using rule 159 (cuadruplo_exp_5 -> .)
    MAY_EQ          reduce using rule 159 (cuadruplo_exp_5 -> .)
    DIF             reduce using rule 159 (cuadruplo_exp_5 -> .)
    EQ_EQ           reduce using rule 159 (cuadruplo_exp_5 -> .)
    RPAREN          reduce using rule 159 (cuadruplo_exp_5 -> .)
    COMMA           reduce using rule 159 (cuadruplo_exp_5 -> .)
    RBRACKET        reduce using rule 159 (cuadruplo_exp_5 -> .)
    COL             reduce using rule 159 (cuadruplo_exp_5 -> .)

    cuadruplo_exp_5                shift and go to state 178

state 152

    (160) factor -> LPAREN . cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (164) cuadruplo_exp_6 -> .

    LPAREN          reduce using rule 164 (cuadruplo_exp_6 -> .)
    PLUS            reduce using rule 164 (cuadruplo_exp_6 -> .)
    MINUS           reduce using rule 164 (cuadruplo_exp_6 -> .)
    ID              reduce using rule 164 (cuadruplo_exp_6 -> .)
    CTE_INT         reduce using rule 164 (cuadruplo_exp_6 -> .)
    CTE_FLOAT       reduce using rule 164 (cuadruplo_exp_6 -> .)
    CTE_DOUBLE      reduce using rule 164 (cuadruplo_exp_6 -> .)
    CTE_STRING      reduce using rule 164 (cuadruplo_exp_6 -> .)
    RES_TRUE        reduce using rule 164 (cuadruplo_exp_6 -> .)
    RES_FALSE       reduce using rule 164 (cuadruplo_exp_6 -> .)

    cuadruplo_exp_6                shift and go to state 179

state 153

    (67) return -> RES_RETURN exp .

    RES_RETURN      reduce using rule 67 (return -> RES_RETURN exp .)
    RES_READ        reduce using rule 67 (return -> RES_RETURN exp .)
    RES_PRINT       reduce using rule 67 (return -> RES_RETURN exp .)
    RES_DEF         reduce using rule 67 (return -> RES_RETURN exp .)
    RES_IF          reduce using rule 67 (return -> RES_RETURN exp .)
    RES_SWITCH      reduce using rule 67 (return -> RES_RETURN exp .)
    RES_WHILE       reduce using rule 67 (return -> RES_RETURN exp .)
    RES_FOR         reduce using rule 67 (return -> RES_RETURN exp .)
    ID              reduce using rule 67 (return -> RES_RETURN exp .)
    RES_ELSE        reduce using rule 67 (return -> RES_RETURN exp .)
    E_END           reduce using rule 67 (return -> RES_RETURN exp .)
    RES_FUNC        reduce using rule 67 (return -> RES_RETURN exp .)
    RES_START       reduce using rule 67 (return -> RES_RETURN exp .)
    $end            reduce using rule 67 (return -> RES_RETURN exp .)
    RES_END         reduce using rule 67 (return -> RES_RETURN exp .)
    RES_CASE        reduce using rule 67 (return -> RES_RETURN exp .)


state 154

    (128) switch -> RES_SWITCH LPAREN . seen_exp_switch RPAREN COL switch2
    (129) seen_exp_switch -> . exp
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    termino                        shift and go to state 148
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    seen_float_cons                shift and go to state 73
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 77
    seen_id_cons                   shift and go to state 74
    seen_int_cons                  shift and go to state 81
    conslist                       shift and go to state 82
    seen_exp_switch                shift and go to state 180
    exp                            shift and go to state 181

state 155

    (88) lectura -> RES_READ LPAREN . tipo RPAREN
    (28) tipo -> . dato
    (29) tipo -> . estructura
    (23) dato -> . RES_INT
    (24) dato -> . RES_FLOAT
    (25) dato -> . RES_DOUBLE
    (26) dato -> . RES_BOOLEAN
    (27) dato -> . RES_STRING
    (30) estructura -> . list
    (31) estructura -> . array
    (42) list -> . RES_LIST dato ID list1
    (48) array -> . RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1

    RES_INT         shift and go to state 13
    RES_FLOAT       shift and go to state 17
    RES_DOUBLE      shift and go to state 15
    RES_BOOLEAN     shift and go to state 12
    RES_STRING      shift and go to state 14
    RES_LIST        shift and go to state 36
    RES_ARRAY       shift and go to state 33

    tipo                           shift and go to state 182
    list                           shift and go to state 37
    estructura                     shift and go to state 49
    dato                           shift and go to state 51
    array                          shift and go to state 31

state 156

    (185) main -> RES_START comienza_main COL bloque . RES_END

    RES_END         shift and go to state 183


state 157

    (48) array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET . genera_ms array1
    (49) genera_ms -> .

    COL             reduce using rule 49 (genera_ms -> .)
    RES_DEF         reduce using rule 49 (genera_ms -> .)
    RES_FUNC        reduce using rule 49 (genera_ms -> .)
    RES_START       reduce using rule 49 (genera_ms -> .)
    RES_RETURN      reduce using rule 49 (genera_ms -> .)
    RES_READ        reduce using rule 49 (genera_ms -> .)
    RES_PRINT       reduce using rule 49 (genera_ms -> .)
    RES_IF          reduce using rule 49 (genera_ms -> .)
    RES_SWITCH      reduce using rule 49 (genera_ms -> .)
    RES_WHILE       reduce using rule 49 (genera_ms -> .)
    RES_FOR         reduce using rule 49 (genera_ms -> .)
    ID              reduce using rule 49 (genera_ms -> .)
    $end            reduce using rule 49 (genera_ms -> .)
    RES_END         reduce using rule 49 (genera_ms -> .)
    E_END           reduce using rule 49 (genera_ms -> .)
    RES_ELSE        reduce using rule 49 (genera_ms -> .)
    RES_CASE        reduce using rule 49 (genera_ms -> .)
    RPAREN          reduce using rule 49 (genera_ms -> .)

    genera_ms                      shift and go to state 184

state 158

    (51) dim -> dim_cte dim_struct . dim2
    (54) dim2 -> . COMMA dim
    (55) dim2 -> . empty
    (197) empty -> .

    COMMA           shift and go to state 186
    RBRACKET        reduce using rule 197 (empty -> .)

    dim2                           shift and go to state 185
    empty                          shift and go to state 187

state 159

    (187) consarray -> is_dim LBRACKET . dim_pos RBRACKET
    (190) dim_pos -> . seen_int_pos dim_pos_2
    (191) seen_int_pos -> . exp
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    termino                        shift and go to state 148
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    seen_float_cons                shift and go to state 73
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 77
    dim_pos                        shift and go to state 188
    seen_int_pos                   shift and go to state 189
    seen_id_cons                   shift and go to state 74
    seen_int_cons                  shift and go to state 81
    conslist                       shift and go to state 82
    exp                            shift and go to state 190

state 160

    (166) cons -> seen_id_cons consarray exp_1 .

    TIMES           reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    DIVIDE          reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    PLUS            reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    MINUS           reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    COMMA           reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RBRACKET        reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RPAREN          reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_RETURN      reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_READ        reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_PRINT       reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_DEF         reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_IF          reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_SWITCH      reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_WHILE       reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_FOR         reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    ID              reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_FUNC        reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_START       reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    $end            reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_END         reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    E_END           reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_ELSE        reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_CASE        reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    MIN             reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    MIN_EQ          reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    MAY             reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    MAY_EQ          reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    DIF             reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    EQ_EQ           reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    COL             reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RCURLY          reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_LIST        reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_ARRAY       reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_INT         reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_FLOAT       reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_DOUBLE      reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_BOOLEAN     reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)
    RES_STRING      reduce using rule 166 (cons -> seen_id_cons consarray exp_1 .)


state 161

    (194) conslist -> ID EQUALS LCURLY . conslist1 RCURLY
    (195) conslist1 -> . cons
    (196) conslist1 -> . cons COMMA conslist1
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    seen_int_cons                  shift and go to state 81
    seen_double_cons               shift and go to state 77
    cons                           shift and go to state 191
    seen_string_cons               shift and go to state 72
    seen_bool                      shift and go to state 71
    seen_float_cons                shift and go to state 73
    conslist                       shift and go to state 82
    conslist1                      shift and go to state 192
    seen_id_cons                   shift and go to state 74

state 162

    (46) cons_loop_1 -> COMMA . cons_loop
    (45) cons_loop -> . cons cons_loop_1
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    seen_int_cons                  shift and go to state 81
    seen_double_cons               shift and go to state 77
    cons                           shift and go to state 133
    seen_string_cons               shift and go to state 72
    seen_bool                      shift and go to state 71
    seen_float_cons                shift and go to state 73
    conslist                       shift and go to state 82
    cons_loop                      shift and go to state 193
    seen_id_cons                   shift and go to state 74

state 163

    (47) cons_loop_1 -> empty .

    RCURLY          reduce using rule 47 (cons_loop_1 -> empty .)


state 164

    (45) cons_loop -> cons cons_loop_1 .

    RCURLY          reduce using rule 45 (cons_loop -> cons cons_loop_1 .)


state 165

    (43) list1 -> LCURLY cons_loop RCURLY .

    RES_DEF         reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    RES_FUNC        reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    RES_START       reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    RES_RETURN      reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    RES_READ        reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    RES_PRINT       reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    RES_IF          reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    RES_SWITCH      reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    RES_WHILE       reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    RES_FOR         reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    ID              reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    $end            reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    RES_END         reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    E_END           reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    RES_ELSE        reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    RES_CASE        reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)
    RPAREN          reduce using rule 43 (list1 -> LCURLY cons_loop RCURLY .)


state 166

    (116) forexp -> asignacion . cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 COL entra_update asignacion
    (118) cuadruplo_est_for_1 -> .

    COL             reduce using rule 118 (cuadruplo_est_for_1 -> .)

    cuadruplo_est_for_1            shift and go to state 194

state 167

    (94) seen_id_asignacion -> ID .

    EQUALS          reduce using rule 94 (seen_id_asignacion -> ID .)
    LBRACKET        reduce using rule 94 (seen_id_asignacion -> ID .)


state 168

    (114) for -> RES_FOR LPAREN forexp . RPAREN sale_update COL bloque cuadruplo_est_for_3

    RPAREN          shift and go to state 195


state 169

    (121) if -> RES_IF LPAREN expresion . RPAREN cuadruplo_est_if_1 COL bloque ifelse

    RPAREN          shift and go to state 196


state 170

    (135) expresion -> exp . expresion_1 cuadruplo_exp_9
    (136) expresion_1 -> . see_rel cuadruplo_exp_8 exp
    (137) expresion_1 -> . empty
    (138) see_rel -> . MIN
    (139) see_rel -> . MIN_EQ
    (140) see_rel -> . MAY
    (141) see_rel -> . MAY_EQ
    (142) see_rel -> . DIF
    (143) see_rel -> . EQ_EQ
    (197) empty -> .

    MIN             shift and go to state 198
    MIN_EQ          shift and go to state 197
    MAY             shift and go to state 199
    MAY_EQ          shift and go to state 200
    DIF             shift and go to state 204
    EQ_EQ           shift and go to state 201
    RPAREN          reduce using rule 197 (empty -> .)
    COL             reduce using rule 197 (empty -> .)

    see_rel                        shift and go to state 202
    expresion_1                    shift and go to state 203
    empty                          shift and go to state 205

state 171

    (91) asignacion -> seen_id_asignacion consarray EQUALS . cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (92) cuadruplo_exp_8_asignacion -> .

    LCURLY          reduce using rule 92 (cuadruplo_exp_8_asignacion -> .)
    LBRACKET        reduce using rule 92 (cuadruplo_exp_8_asignacion -> .)
    TOSTR           reduce using rule 92 (cuadruplo_exp_8_asignacion -> .)
    TOINT           reduce using rule 92 (cuadruplo_exp_8_asignacion -> .)
    LPAREN          reduce using rule 92 (cuadruplo_exp_8_asignacion -> .)
    PLUS            reduce using rule 92 (cuadruplo_exp_8_asignacion -> .)
    MINUS           reduce using rule 92 (cuadruplo_exp_8_asignacion -> .)
    ID              reduce using rule 92 (cuadruplo_exp_8_asignacion -> .)
    CTE_INT         reduce using rule 92 (cuadruplo_exp_8_asignacion -> .)
    CTE_FLOAT       reduce using rule 92 (cuadruplo_exp_8_asignacion -> .)
    CTE_DOUBLE      reduce using rule 92 (cuadruplo_exp_8_asignacion -> .)
    CTE_STRING      reduce using rule 92 (cuadruplo_exp_8_asignacion -> .)
    RES_TRUE        reduce using rule 92 (cuadruplo_exp_8_asignacion -> .)
    RES_FALSE       reduce using rule 92 (cuadruplo_exp_8_asignacion -> .)

    cuadruplo_exp_8_asignacion     shift and go to state 206

state 172

    (89) escritura -> RES_PRINT LPAREN cons . RPAREN cuadruplo_est_prnt

    RPAREN          shift and go to state 207


state 173

    (110) while -> RES_WHILE cuadruplo_est_while_1 LPAREN . expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (135) expresion -> . exp expresion_1 cuadruplo_exp_9
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    seen_double_cons               shift and go to state 77
    termino                        shift and go to state 148
    seen_bool                      shift and go to state 71
    seen_float_cons                shift and go to state 73
    factor                         shift and go to state 151
    seen_int_cons                  shift and go to state 81
    seen_id_cons                   shift and go to state 74
    seen_string_cons               shift and go to state 72
    expresion                      shift and go to state 208
    conslist                       shift and go to state 82
    exp                            shift and go to state 170

state 174

    (79) llamada -> seen_id_call LPAREN call_proc_2 . llamada1 RPAREN call_proc_4
    (83) llamada1 -> . exp call_proc_3 param
    (84) llamada1 -> . empty
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (197) empty -> .
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    RPAREN          reduce using rule 197 (empty -> .)
    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    termino                        shift and go to state 148
    llamada1                       shift and go to state 209
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    seen_float_cons                shift and go to state 73
    factor                         shift and go to state 151
    empty                          shift and go to state 210
    seen_double_cons               shift and go to state 77
    seen_id_cons                   shift and go to state 74
    seen_int_cons                  shift and go to state 81
    conslist                       shift and go to state 82
    exp                            shift and go to state 211

state 175

    (146) exp -> termino cuadruplo_exp_4 . exp1
    (147) exp1 -> . see_operador_e cuadruplos_exp_2 exp
    (148) exp1 -> . empty
    (149) see_operador_e -> . PLUS
    (150) see_operador_e -> . MINUS
    (197) empty -> .

    PLUS            shift and go to state 213
    MINUS           shift and go to state 215
    RES_RETURN      reduce using rule 197 (empty -> .)
    RES_READ        reduce using rule 197 (empty -> .)
    RES_PRINT       reduce using rule 197 (empty -> .)
    RES_DEF         reduce using rule 197 (empty -> .)
    RES_IF          reduce using rule 197 (empty -> .)
    RES_SWITCH      reduce using rule 197 (empty -> .)
    RES_WHILE       reduce using rule 197 (empty -> .)
    RES_FOR         reduce using rule 197 (empty -> .)
    ID              reduce using rule 197 (empty -> .)
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)
    $end            reduce using rule 197 (empty -> .)
    RES_END         reduce using rule 197 (empty -> .)
    E_END           reduce using rule 197 (empty -> .)
    RES_ELSE        reduce using rule 197 (empty -> .)
    RES_CASE        reduce using rule 197 (empty -> .)
    MIN             reduce using rule 197 (empty -> .)
    MIN_EQ          reduce using rule 197 (empty -> .)
    MAY             reduce using rule 197 (empty -> .)
    MAY_EQ          reduce using rule 197 (empty -> .)
    DIF             reduce using rule 197 (empty -> .)
    EQ_EQ           reduce using rule 197 (empty -> .)
    RPAREN          reduce using rule 197 (empty -> .)
    COMMA           reduce using rule 197 (empty -> .)
    RBRACKET        reduce using rule 197 (empty -> .)
    COL             reduce using rule 197 (empty -> .)

    exp1                           shift and go to state 212
    see_operador_e                 shift and go to state 214
    empty                          shift and go to state 216

state 176

    (163) factor -> MINUS cons .

    TIMES           reduce using rule 163 (factor -> MINUS cons .)
    DIVIDE          reduce using rule 163 (factor -> MINUS cons .)
    PLUS            reduce using rule 163 (factor -> MINUS cons .)
    MINUS           reduce using rule 163 (factor -> MINUS cons .)
    RES_RETURN      reduce using rule 163 (factor -> MINUS cons .)
    RES_READ        reduce using rule 163 (factor -> MINUS cons .)
    RES_PRINT       reduce using rule 163 (factor -> MINUS cons .)
    RES_DEF         reduce using rule 163 (factor -> MINUS cons .)
    RES_IF          reduce using rule 163 (factor -> MINUS cons .)
    RES_SWITCH      reduce using rule 163 (factor -> MINUS cons .)
    RES_WHILE       reduce using rule 163 (factor -> MINUS cons .)
    RES_FOR         reduce using rule 163 (factor -> MINUS cons .)
    ID              reduce using rule 163 (factor -> MINUS cons .)
    RES_FUNC        reduce using rule 163 (factor -> MINUS cons .)
    RES_START       reduce using rule 163 (factor -> MINUS cons .)
    $end            reduce using rule 163 (factor -> MINUS cons .)
    RES_END         reduce using rule 163 (factor -> MINUS cons .)
    E_END           reduce using rule 163 (factor -> MINUS cons .)
    RES_ELSE        reduce using rule 163 (factor -> MINUS cons .)
    RES_CASE        reduce using rule 163 (factor -> MINUS cons .)
    COL             reduce using rule 163 (factor -> MINUS cons .)
    RPAREN          reduce using rule 163 (factor -> MINUS cons .)
    MIN             reduce using rule 163 (factor -> MINUS cons .)
    MIN_EQ          reduce using rule 163 (factor -> MINUS cons .)
    MAY             reduce using rule 163 (factor -> MINUS cons .)
    MAY_EQ          reduce using rule 163 (factor -> MINUS cons .)
    DIF             reduce using rule 163 (factor -> MINUS cons .)
    EQ_EQ           reduce using rule 163 (factor -> MINUS cons .)
    COMMA           reduce using rule 163 (factor -> MINUS cons .)
    RBRACKET        reduce using rule 163 (factor -> MINUS cons .)


state 177

    (162) factor -> PLUS cons .

    TIMES           reduce using rule 162 (factor -> PLUS cons .)
    DIVIDE          reduce using rule 162 (factor -> PLUS cons .)
    PLUS            reduce using rule 162 (factor -> PLUS cons .)
    MINUS           reduce using rule 162 (factor -> PLUS cons .)
    RES_RETURN      reduce using rule 162 (factor -> PLUS cons .)
    RES_READ        reduce using rule 162 (factor -> PLUS cons .)
    RES_PRINT       reduce using rule 162 (factor -> PLUS cons .)
    RES_DEF         reduce using rule 162 (factor -> PLUS cons .)
    RES_IF          reduce using rule 162 (factor -> PLUS cons .)
    RES_SWITCH      reduce using rule 162 (factor -> PLUS cons .)
    RES_WHILE       reduce using rule 162 (factor -> PLUS cons .)
    RES_FOR         reduce using rule 162 (factor -> PLUS cons .)
    ID              reduce using rule 162 (factor -> PLUS cons .)
    RES_FUNC        reduce using rule 162 (factor -> PLUS cons .)
    RES_START       reduce using rule 162 (factor -> PLUS cons .)
    $end            reduce using rule 162 (factor -> PLUS cons .)
    RES_END         reduce using rule 162 (factor -> PLUS cons .)
    E_END           reduce using rule 162 (factor -> PLUS cons .)
    RES_ELSE        reduce using rule 162 (factor -> PLUS cons .)
    RES_CASE        reduce using rule 162 (factor -> PLUS cons .)
    COL             reduce using rule 162 (factor -> PLUS cons .)
    RPAREN          reduce using rule 162 (factor -> PLUS cons .)
    MIN             reduce using rule 162 (factor -> PLUS cons .)
    MIN_EQ          reduce using rule 162 (factor -> PLUS cons .)
    MAY             reduce using rule 162 (factor -> PLUS cons .)
    MAY_EQ          reduce using rule 162 (factor -> PLUS cons .)
    DIF             reduce using rule 162 (factor -> PLUS cons .)
    EQ_EQ           reduce using rule 162 (factor -> PLUS cons .)
    COMMA           reduce using rule 162 (factor -> PLUS cons .)
    RBRACKET        reduce using rule 162 (factor -> PLUS cons .)


state 178

    (152) termino -> factor cuadruplo_exp_5 . termino1
    (153) termino1 -> . see_operador_f cuadruplos_exp_3 termino
    (154) termino1 -> . empty
    (155) see_operador_f -> . TIMES
    (156) see_operador_f -> . DIVIDE
    (197) empty -> .

    TIMES           shift and go to state 220
    DIVIDE          shift and go to state 217
    PLUS            reduce using rule 197 (empty -> .)
    MINUS           reduce using rule 197 (empty -> .)
    RES_RETURN      reduce using rule 197 (empty -> .)
    RES_READ        reduce using rule 197 (empty -> .)
    RES_PRINT       reduce using rule 197 (empty -> .)
    RES_DEF         reduce using rule 197 (empty -> .)
    RES_IF          reduce using rule 197 (empty -> .)
    RES_SWITCH      reduce using rule 197 (empty -> .)
    RES_WHILE       reduce using rule 197 (empty -> .)
    RES_FOR         reduce using rule 197 (empty -> .)
    ID              reduce using rule 197 (empty -> .)
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)
    $end            reduce using rule 197 (empty -> .)
    RES_END         reduce using rule 197 (empty -> .)
    E_END           reduce using rule 197 (empty -> .)
    RES_ELSE        reduce using rule 197 (empty -> .)
    RES_CASE        reduce using rule 197 (empty -> .)
    MIN             reduce using rule 197 (empty -> .)
    MIN_EQ          reduce using rule 197 (empty -> .)
    MAY             reduce using rule 197 (empty -> .)
    MAY_EQ          reduce using rule 197 (empty -> .)
    DIF             reduce using rule 197 (empty -> .)
    EQ_EQ           reduce using rule 197 (empty -> .)
    RPAREN          reduce using rule 197 (empty -> .)
    COMMA           reduce using rule 197 (empty -> .)
    RBRACKET        reduce using rule 197 (empty -> .)
    COL             reduce using rule 197 (empty -> .)

    termino1                       shift and go to state 218
    see_operador_f                 shift and go to state 219
    empty                          shift and go to state 221

state 179

    (160) factor -> LPAREN cuadruplo_exp_6 . exp RPAREN cuadruplo_exp_7
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    termino                        shift and go to state 148
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    seen_float_cons                shift and go to state 73
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 77
    seen_id_cons                   shift and go to state 74
    seen_int_cons                  shift and go to state 81
    conslist                       shift and go to state 82
    exp                            shift and go to state 222

state 180

    (128) switch -> RES_SWITCH LPAREN seen_exp_switch . RPAREN COL switch2

    RPAREN          shift and go to state 223


state 181

    (129) seen_exp_switch -> exp .

    RPAREN          reduce using rule 129 (seen_exp_switch -> exp .)


state 182

    (88) lectura -> RES_READ LPAREN tipo . RPAREN

    RPAREN          shift and go to state 224


state 183

    (185) main -> RES_START comienza_main COL bloque RES_END .

    RES_FUNC        reduce using rule 185 (main -> RES_START comienza_main COL bloque RES_END .)
    $end            reduce using rule 185 (main -> RES_START comienza_main COL bloque RES_END .)


state 184

    (48) array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms . array1
    (56) array1 -> . COL LBRACKET array2 RBRACKET array1
    (57) array1 -> . empty
    (197) empty -> .

    COL             shift and go to state 226
    RES_DEF         reduce using rule 197 (empty -> .)
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)
    RES_RETURN      reduce using rule 197 (empty -> .)
    RES_READ        reduce using rule 197 (empty -> .)
    RES_PRINT       reduce using rule 197 (empty -> .)
    RES_IF          reduce using rule 197 (empty -> .)
    RES_SWITCH      reduce using rule 197 (empty -> .)
    RES_WHILE       reduce using rule 197 (empty -> .)
    RES_FOR         reduce using rule 197 (empty -> .)
    ID              reduce using rule 197 (empty -> .)
    $end            reduce using rule 197 (empty -> .)
    RES_END         reduce using rule 197 (empty -> .)
    E_END           reduce using rule 197 (empty -> .)
    RES_ELSE        reduce using rule 197 (empty -> .)
    RES_CASE        reduce using rule 197 (empty -> .)
    RPAREN          reduce using rule 197 (empty -> .)

    array1                         shift and go to state 225
    empty                          shift and go to state 227

state 185

    (51) dim -> dim_cte dim_struct dim2 .

    RBRACKET        reduce using rule 51 (dim -> dim_cte dim_struct dim2 .)


state 186

    (54) dim2 -> COMMA . dim
    (51) dim -> . dim_cte dim_struct dim2
    (52) dim_cte -> . CTE_INT

    CTE_INT         shift and go to state 123

    dim                            shift and go to state 228
    dim_cte                        shift and go to state 122

state 187

    (55) dim2 -> empty .

    RBRACKET        reduce using rule 55 (dim2 -> empty .)


state 188

    (187) consarray -> is_dim LBRACKET dim_pos . RBRACKET

    RBRACKET        shift and go to state 229


state 189

    (190) dim_pos -> seen_int_pos . dim_pos_2
    (192) dim_pos_2 -> . COMMA dim_pos
    (193) dim_pos_2 -> . empty
    (197) empty -> .

    COMMA           shift and go to state 230
    RBRACKET        reduce using rule 197 (empty -> .)

    empty                          shift and go to state 231
    dim_pos_2                      shift and go to state 232

state 190

    (191) seen_int_pos -> exp .

    COMMA           reduce using rule 191 (seen_int_pos -> exp .)
    RBRACKET        reduce using rule 191 (seen_int_pos -> exp .)


state 191

    (195) conslist1 -> cons .
    (196) conslist1 -> cons . COMMA conslist1

    RCURLY          reduce using rule 195 (conslist1 -> cons .)
    COMMA           shift and go to state 233


state 192

    (194) conslist -> ID EQUALS LCURLY conslist1 . RCURLY

    RCURLY          shift and go to state 234


state 193

    (46) cons_loop_1 -> COMMA cons_loop .

    RCURLY          reduce using rule 46 (cons_loop_1 -> COMMA cons_loop .)


state 194

    (116) forexp -> asignacion cuadruplo_est_for_1 . COL expresion cuadruplo_est_for_2 COL entra_update asignacion

    COL             shift and go to state 235


state 195

    (114) for -> RES_FOR LPAREN forexp RPAREN . sale_update COL bloque cuadruplo_est_for_3
    (115) sale_update -> .

    COL             reduce using rule 115 (sale_update -> .)

    sale_update                    shift and go to state 236

state 196

    (121) if -> RES_IF LPAREN expresion RPAREN . cuadruplo_est_if_1 COL bloque ifelse
    (122) cuadruplo_est_if_1 -> .

    COL             reduce using rule 122 (cuadruplo_est_if_1 -> .)

    cuadruplo_est_if_1             shift and go to state 237

state 197

    (139) see_rel -> MIN_EQ .

    LPAREN          reduce using rule 139 (see_rel -> MIN_EQ .)
    PLUS            reduce using rule 139 (see_rel -> MIN_EQ .)
    MINUS           reduce using rule 139 (see_rel -> MIN_EQ .)
    ID              reduce using rule 139 (see_rel -> MIN_EQ .)
    CTE_INT         reduce using rule 139 (see_rel -> MIN_EQ .)
    CTE_FLOAT       reduce using rule 139 (see_rel -> MIN_EQ .)
    CTE_DOUBLE      reduce using rule 139 (see_rel -> MIN_EQ .)
    CTE_STRING      reduce using rule 139 (see_rel -> MIN_EQ .)
    RES_TRUE        reduce using rule 139 (see_rel -> MIN_EQ .)
    RES_FALSE       reduce using rule 139 (see_rel -> MIN_EQ .)


state 198

    (138) see_rel -> MIN .

    LPAREN          reduce using rule 138 (see_rel -> MIN .)
    PLUS            reduce using rule 138 (see_rel -> MIN .)
    MINUS           reduce using rule 138 (see_rel -> MIN .)
    ID              reduce using rule 138 (see_rel -> MIN .)
    CTE_INT         reduce using rule 138 (see_rel -> MIN .)
    CTE_FLOAT       reduce using rule 138 (see_rel -> MIN .)
    CTE_DOUBLE      reduce using rule 138 (see_rel -> MIN .)
    CTE_STRING      reduce using rule 138 (see_rel -> MIN .)
    RES_TRUE        reduce using rule 138 (see_rel -> MIN .)
    RES_FALSE       reduce using rule 138 (see_rel -> MIN .)


state 199

    (140) see_rel -> MAY .

    LPAREN          reduce using rule 140 (see_rel -> MAY .)
    PLUS            reduce using rule 140 (see_rel -> MAY .)
    MINUS           reduce using rule 140 (see_rel -> MAY .)
    ID              reduce using rule 140 (see_rel -> MAY .)
    CTE_INT         reduce using rule 140 (see_rel -> MAY .)
    CTE_FLOAT       reduce using rule 140 (see_rel -> MAY .)
    CTE_DOUBLE      reduce using rule 140 (see_rel -> MAY .)
    CTE_STRING      reduce using rule 140 (see_rel -> MAY .)
    RES_TRUE        reduce using rule 140 (see_rel -> MAY .)
    RES_FALSE       reduce using rule 140 (see_rel -> MAY .)


state 200

    (141) see_rel -> MAY_EQ .

    LPAREN          reduce using rule 141 (see_rel -> MAY_EQ .)
    PLUS            reduce using rule 141 (see_rel -> MAY_EQ .)
    MINUS           reduce using rule 141 (see_rel -> MAY_EQ .)
    ID              reduce using rule 141 (see_rel -> MAY_EQ .)
    CTE_INT         reduce using rule 141 (see_rel -> MAY_EQ .)
    CTE_FLOAT       reduce using rule 141 (see_rel -> MAY_EQ .)
    CTE_DOUBLE      reduce using rule 141 (see_rel -> MAY_EQ .)
    CTE_STRING      reduce using rule 141 (see_rel -> MAY_EQ .)
    RES_TRUE        reduce using rule 141 (see_rel -> MAY_EQ .)
    RES_FALSE       reduce using rule 141 (see_rel -> MAY_EQ .)


state 201

    (143) see_rel -> EQ_EQ .

    LPAREN          reduce using rule 143 (see_rel -> EQ_EQ .)
    PLUS            reduce using rule 143 (see_rel -> EQ_EQ .)
    MINUS           reduce using rule 143 (see_rel -> EQ_EQ .)
    ID              reduce using rule 143 (see_rel -> EQ_EQ .)
    CTE_INT         reduce using rule 143 (see_rel -> EQ_EQ .)
    CTE_FLOAT       reduce using rule 143 (see_rel -> EQ_EQ .)
    CTE_DOUBLE      reduce using rule 143 (see_rel -> EQ_EQ .)
    CTE_STRING      reduce using rule 143 (see_rel -> EQ_EQ .)
    RES_TRUE        reduce using rule 143 (see_rel -> EQ_EQ .)
    RES_FALSE       reduce using rule 143 (see_rel -> EQ_EQ .)


state 202

    (136) expresion_1 -> see_rel . cuadruplo_exp_8 exp
    (144) cuadruplo_exp_8 -> .

    LPAREN          reduce using rule 144 (cuadruplo_exp_8 -> .)
    PLUS            reduce using rule 144 (cuadruplo_exp_8 -> .)
    MINUS           reduce using rule 144 (cuadruplo_exp_8 -> .)
    ID              reduce using rule 144 (cuadruplo_exp_8 -> .)
    CTE_INT         reduce using rule 144 (cuadruplo_exp_8 -> .)
    CTE_FLOAT       reduce using rule 144 (cuadruplo_exp_8 -> .)
    CTE_DOUBLE      reduce using rule 144 (cuadruplo_exp_8 -> .)
    CTE_STRING      reduce using rule 144 (cuadruplo_exp_8 -> .)
    RES_TRUE        reduce using rule 144 (cuadruplo_exp_8 -> .)
    RES_FALSE       reduce using rule 144 (cuadruplo_exp_8 -> .)

    cuadruplo_exp_8                shift and go to state 238

state 203

    (135) expresion -> exp expresion_1 . cuadruplo_exp_9
    (145) cuadruplo_exp_9 -> .

    RPAREN          reduce using rule 145 (cuadruplo_exp_9 -> .)
    COL             reduce using rule 145 (cuadruplo_exp_9 -> .)

    cuadruplo_exp_9                shift and go to state 239

state 204

    (142) see_rel -> DIF .

    LPAREN          reduce using rule 142 (see_rel -> DIF .)
    PLUS            reduce using rule 142 (see_rel -> DIF .)
    MINUS           reduce using rule 142 (see_rel -> DIF .)
    ID              reduce using rule 142 (see_rel -> DIF .)
    CTE_INT         reduce using rule 142 (see_rel -> DIF .)
    CTE_FLOAT       reduce using rule 142 (see_rel -> DIF .)
    CTE_DOUBLE      reduce using rule 142 (see_rel -> DIF .)
    CTE_STRING      reduce using rule 142 (see_rel -> DIF .)
    RES_TRUE        reduce using rule 142 (see_rel -> DIF .)
    RES_FALSE       reduce using rule 142 (see_rel -> DIF .)


state 205

    (137) expresion_1 -> empty .

    RPAREN          reduce using rule 137 (expresion_1 -> empty .)
    COL             reduce using rule 137 (expresion_1 -> empty .)


state 206

    (91) asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion . asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (96) asignacion1 -> . exp
    (97) asignacion1 -> . asignlist
    (98) asignacion1 -> . asignarray
    (99) asignacion1 -> . see_llamada
    (100) asignacion1 -> . convert
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (104) asignlist -> . LCURLY asignlist1 RCURLY
    (107) asignarray -> . LBRACKET asignarray1 RBRACKET
    (103) see_llamada -> . llamada
    (101) convert -> . TOSTR LPAREN exp RPAREN
    (102) convert -> . TOINT LPAREN exp RPAREN
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (79) llamada -> . seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (81) seen_id_call -> . ID
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LCURLY          shift and go to state 242
    LBRACKET        shift and go to state 241
    TOSTR           shift and go to state 240
    TOINT           shift and go to state 245
    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 246
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    termino                        shift and go to state 148
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    asignarray                     shift and go to state 243
    llamada                        shift and go to state 244
    seen_id_cons                   shift and go to state 74
    see_llamada                    shift and go to state 247
    asignlist                      shift and go to state 248
    seen_double_cons               shift and go to state 77
    factor                         shift and go to state 151
    seen_id_call                   shift and go to state 113
    seen_int_cons                  shift and go to state 81
    convert                        shift and go to state 249
    conslist                       shift and go to state 82
    exp                            shift and go to state 250
    seen_float_cons                shift and go to state 73
    asignacion1                    shift and go to state 251

state 207

    (89) escritura -> RES_PRINT LPAREN cons RPAREN . cuadruplo_est_prnt
    (90) cuadruplo_est_prnt -> .

    RES_RETURN      reduce using rule 90 (cuadruplo_est_prnt -> .)
    RES_READ        reduce using rule 90 (cuadruplo_est_prnt -> .)
    RES_PRINT       reduce using rule 90 (cuadruplo_est_prnt -> .)
    RES_DEF         reduce using rule 90 (cuadruplo_est_prnt -> .)
    RES_IF          reduce using rule 90 (cuadruplo_est_prnt -> .)
    RES_SWITCH      reduce using rule 90 (cuadruplo_est_prnt -> .)
    RES_WHILE       reduce using rule 90 (cuadruplo_est_prnt -> .)
    RES_FOR         reduce using rule 90 (cuadruplo_est_prnt -> .)
    ID              reduce using rule 90 (cuadruplo_est_prnt -> .)
    RES_FUNC        reduce using rule 90 (cuadruplo_est_prnt -> .)
    RES_START       reduce using rule 90 (cuadruplo_est_prnt -> .)
    $end            reduce using rule 90 (cuadruplo_est_prnt -> .)
    RES_END         reduce using rule 90 (cuadruplo_est_prnt -> .)
    E_END           reduce using rule 90 (cuadruplo_est_prnt -> .)
    RES_ELSE        reduce using rule 90 (cuadruplo_est_prnt -> .)
    RES_CASE        reduce using rule 90 (cuadruplo_est_prnt -> .)

    cuadruplo_est_prnt             shift and go to state 252

state 208

    (110) while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion . RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3

    RPAREN          shift and go to state 253


state 209

    (79) llamada -> seen_id_call LPAREN call_proc_2 llamada1 . RPAREN call_proc_4

    RPAREN          shift and go to state 254


state 210

    (84) llamada1 -> empty .

    RPAREN          reduce using rule 84 (llamada1 -> empty .)


state 211

    (83) llamada1 -> exp . call_proc_3 param
    (85) call_proc_3 -> .

    COMMA           reduce using rule 85 (call_proc_3 -> .)
    RPAREN          reduce using rule 85 (call_proc_3 -> .)

    call_proc_3                    shift and go to state 255

state 212

    (146) exp -> termino cuadruplo_exp_4 exp1 .

    RES_RETURN      reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_READ        reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_PRINT       reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_DEF         reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_IF          reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_SWITCH      reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_WHILE       reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_FOR         reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    ID              reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_FUNC        reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_START       reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    $end            reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_END         reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    E_END           reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_ELSE        reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_CASE        reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    MIN             reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    MIN_EQ          reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    MAY             reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    MAY_EQ          reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    DIF             reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    EQ_EQ           reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    RPAREN          reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    COMMA           reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    RBRACKET        reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)
    COL             reduce using rule 146 (exp -> termino cuadruplo_exp_4 exp1 .)


state 213

    (149) see_operador_e -> PLUS .

    LPAREN          reduce using rule 149 (see_operador_e -> PLUS .)
    PLUS            reduce using rule 149 (see_operador_e -> PLUS .)
    MINUS           reduce using rule 149 (see_operador_e -> PLUS .)
    ID              reduce using rule 149 (see_operador_e -> PLUS .)
    CTE_INT         reduce using rule 149 (see_operador_e -> PLUS .)
    CTE_FLOAT       reduce using rule 149 (see_operador_e -> PLUS .)
    CTE_DOUBLE      reduce using rule 149 (see_operador_e -> PLUS .)
    CTE_STRING      reduce using rule 149 (see_operador_e -> PLUS .)
    RES_TRUE        reduce using rule 149 (see_operador_e -> PLUS .)
    RES_FALSE       reduce using rule 149 (see_operador_e -> PLUS .)


state 214

    (147) exp1 -> see_operador_e . cuadruplos_exp_2 exp
    (151) cuadruplos_exp_2 -> .

    LPAREN          reduce using rule 151 (cuadruplos_exp_2 -> .)
    PLUS            reduce using rule 151 (cuadruplos_exp_2 -> .)
    MINUS           reduce using rule 151 (cuadruplos_exp_2 -> .)
    ID              reduce using rule 151 (cuadruplos_exp_2 -> .)
    CTE_INT         reduce using rule 151 (cuadruplos_exp_2 -> .)
    CTE_FLOAT       reduce using rule 151 (cuadruplos_exp_2 -> .)
    CTE_DOUBLE      reduce using rule 151 (cuadruplos_exp_2 -> .)
    CTE_STRING      reduce using rule 151 (cuadruplos_exp_2 -> .)
    RES_TRUE        reduce using rule 151 (cuadruplos_exp_2 -> .)
    RES_FALSE       reduce using rule 151 (cuadruplos_exp_2 -> .)

    cuadruplos_exp_2               shift and go to state 256

state 215

    (150) see_operador_e -> MINUS .

    LPAREN          reduce using rule 150 (see_operador_e -> MINUS .)
    PLUS            reduce using rule 150 (see_operador_e -> MINUS .)
    MINUS           reduce using rule 150 (see_operador_e -> MINUS .)
    ID              reduce using rule 150 (see_operador_e -> MINUS .)
    CTE_INT         reduce using rule 150 (see_operador_e -> MINUS .)
    CTE_FLOAT       reduce using rule 150 (see_operador_e -> MINUS .)
    CTE_DOUBLE      reduce using rule 150 (see_operador_e -> MINUS .)
    CTE_STRING      reduce using rule 150 (see_operador_e -> MINUS .)
    RES_TRUE        reduce using rule 150 (see_operador_e -> MINUS .)
    RES_FALSE       reduce using rule 150 (see_operador_e -> MINUS .)


state 216

    (148) exp1 -> empty .

    RES_RETURN      reduce using rule 148 (exp1 -> empty .)
    RES_READ        reduce using rule 148 (exp1 -> empty .)
    RES_PRINT       reduce using rule 148 (exp1 -> empty .)
    RES_DEF         reduce using rule 148 (exp1 -> empty .)
    RES_IF          reduce using rule 148 (exp1 -> empty .)
    RES_SWITCH      reduce using rule 148 (exp1 -> empty .)
    RES_WHILE       reduce using rule 148 (exp1 -> empty .)
    RES_FOR         reduce using rule 148 (exp1 -> empty .)
    ID              reduce using rule 148 (exp1 -> empty .)
    RES_FUNC        reduce using rule 148 (exp1 -> empty .)
    RES_START       reduce using rule 148 (exp1 -> empty .)
    $end            reduce using rule 148 (exp1 -> empty .)
    RES_END         reduce using rule 148 (exp1 -> empty .)
    E_END           reduce using rule 148 (exp1 -> empty .)
    RES_ELSE        reduce using rule 148 (exp1 -> empty .)
    RES_CASE        reduce using rule 148 (exp1 -> empty .)
    MIN             reduce using rule 148 (exp1 -> empty .)
    MIN_EQ          reduce using rule 148 (exp1 -> empty .)
    MAY             reduce using rule 148 (exp1 -> empty .)
    MAY_EQ          reduce using rule 148 (exp1 -> empty .)
    DIF             reduce using rule 148 (exp1 -> empty .)
    EQ_EQ           reduce using rule 148 (exp1 -> empty .)
    RPAREN          reduce using rule 148 (exp1 -> empty .)
    COMMA           reduce using rule 148 (exp1 -> empty .)
    RBRACKET        reduce using rule 148 (exp1 -> empty .)
    COL             reduce using rule 148 (exp1 -> empty .)


state 217

    (156) see_operador_f -> DIVIDE .

    LPAREN          reduce using rule 156 (see_operador_f -> DIVIDE .)
    PLUS            reduce using rule 156 (see_operador_f -> DIVIDE .)
    MINUS           reduce using rule 156 (see_operador_f -> DIVIDE .)
    ID              reduce using rule 156 (see_operador_f -> DIVIDE .)
    CTE_INT         reduce using rule 156 (see_operador_f -> DIVIDE .)
    CTE_FLOAT       reduce using rule 156 (see_operador_f -> DIVIDE .)
    CTE_DOUBLE      reduce using rule 156 (see_operador_f -> DIVIDE .)
    CTE_STRING      reduce using rule 156 (see_operador_f -> DIVIDE .)
    RES_TRUE        reduce using rule 156 (see_operador_f -> DIVIDE .)
    RES_FALSE       reduce using rule 156 (see_operador_f -> DIVIDE .)


state 218

    (152) termino -> factor cuadruplo_exp_5 termino1 .

    PLUS            reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    MINUS           reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    RPAREN          reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    COL             reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    MIN             reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    MIN_EQ          reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    MAY             reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    MAY_EQ          reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    DIF             reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    EQ_EQ           reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    COMMA           reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    RBRACKET        reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_RETURN      reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_READ        reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_PRINT       reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_DEF         reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_IF          reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_SWITCH      reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_WHILE       reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_FOR         reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    ID              reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_FUNC        reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_START       reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    $end            reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_END         reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    E_END           reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_ELSE        reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_CASE        reduce using rule 152 (termino -> factor cuadruplo_exp_5 termino1 .)


state 219

    (153) termino1 -> see_operador_f . cuadruplos_exp_3 termino
    (157) cuadruplos_exp_3 -> .

    LPAREN          reduce using rule 157 (cuadruplos_exp_3 -> .)
    PLUS            reduce using rule 157 (cuadruplos_exp_3 -> .)
    MINUS           reduce using rule 157 (cuadruplos_exp_3 -> .)
    ID              reduce using rule 157 (cuadruplos_exp_3 -> .)
    CTE_INT         reduce using rule 157 (cuadruplos_exp_3 -> .)
    CTE_FLOAT       reduce using rule 157 (cuadruplos_exp_3 -> .)
    CTE_DOUBLE      reduce using rule 157 (cuadruplos_exp_3 -> .)
    CTE_STRING      reduce using rule 157 (cuadruplos_exp_3 -> .)
    RES_TRUE        reduce using rule 157 (cuadruplos_exp_3 -> .)
    RES_FALSE       reduce using rule 157 (cuadruplos_exp_3 -> .)

    cuadruplos_exp_3               shift and go to state 257

state 220

    (155) see_operador_f -> TIMES .

    LPAREN          reduce using rule 155 (see_operador_f -> TIMES .)
    PLUS            reduce using rule 155 (see_operador_f -> TIMES .)
    MINUS           reduce using rule 155 (see_operador_f -> TIMES .)
    ID              reduce using rule 155 (see_operador_f -> TIMES .)
    CTE_INT         reduce using rule 155 (see_operador_f -> TIMES .)
    CTE_FLOAT       reduce using rule 155 (see_operador_f -> TIMES .)
    CTE_DOUBLE      reduce using rule 155 (see_operador_f -> TIMES .)
    CTE_STRING      reduce using rule 155 (see_operador_f -> TIMES .)
    RES_TRUE        reduce using rule 155 (see_operador_f -> TIMES .)
    RES_FALSE       reduce using rule 155 (see_operador_f -> TIMES .)


state 221

    (154) termino1 -> empty .

    PLUS            reduce using rule 154 (termino1 -> empty .)
    MINUS           reduce using rule 154 (termino1 -> empty .)
    RES_RETURN      reduce using rule 154 (termino1 -> empty .)
    RES_READ        reduce using rule 154 (termino1 -> empty .)
    RES_PRINT       reduce using rule 154 (termino1 -> empty .)
    RES_DEF         reduce using rule 154 (termino1 -> empty .)
    RES_IF          reduce using rule 154 (termino1 -> empty .)
    RES_SWITCH      reduce using rule 154 (termino1 -> empty .)
    RES_WHILE       reduce using rule 154 (termino1 -> empty .)
    RES_FOR         reduce using rule 154 (termino1 -> empty .)
    ID              reduce using rule 154 (termino1 -> empty .)
    RES_FUNC        reduce using rule 154 (termino1 -> empty .)
    RES_START       reduce using rule 154 (termino1 -> empty .)
    $end            reduce using rule 154 (termino1 -> empty .)
    RES_END         reduce using rule 154 (termino1 -> empty .)
    E_END           reduce using rule 154 (termino1 -> empty .)
    RES_ELSE        reduce using rule 154 (termino1 -> empty .)
    RES_CASE        reduce using rule 154 (termino1 -> empty .)
    MIN             reduce using rule 154 (termino1 -> empty .)
    MIN_EQ          reduce using rule 154 (termino1 -> empty .)
    MAY             reduce using rule 154 (termino1 -> empty .)
    MAY_EQ          reduce using rule 154 (termino1 -> empty .)
    DIF             reduce using rule 154 (termino1 -> empty .)
    EQ_EQ           reduce using rule 154 (termino1 -> empty .)
    RPAREN          reduce using rule 154 (termino1 -> empty .)
    COMMA           reduce using rule 154 (termino1 -> empty .)
    RBRACKET        reduce using rule 154 (termino1 -> empty .)
    COL             reduce using rule 154 (termino1 -> empty .)


state 222

    (160) factor -> LPAREN cuadruplo_exp_6 exp . RPAREN cuadruplo_exp_7

    RPAREN          shift and go to state 258


state 223

    (128) switch -> RES_SWITCH LPAREN seen_exp_switch RPAREN . COL switch2

    COL             shift and go to state 259


state 224

    (88) lectura -> RES_READ LPAREN tipo RPAREN .

    RES_RETURN      reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_READ        reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_PRINT       reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_DEF         reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_IF          reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_SWITCH      reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_WHILE       reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_FOR         reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)
    ID              reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_FUNC        reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_START       reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)
    $end            reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_END         reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)
    E_END           reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_ELSE        reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_CASE        reduce using rule 88 (lectura -> RES_READ LPAREN tipo RPAREN .)


state 225

    (48) array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .

    ID              reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    RES_DEF         reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    RES_FUNC        reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    RES_START       reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    RES_RETURN      reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    RES_READ        reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    RES_PRINT       reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    RES_IF          reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    RES_SWITCH      reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    RES_WHILE       reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    RES_FOR         reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    $end            reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    RES_END         reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    E_END           reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    RES_ELSE        reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    RES_CASE        reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)
    RPAREN          reduce using rule 48 (array -> RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 .)


state 226

    (56) array1 -> COL . LBRACKET array2 RBRACKET array1

    LBRACKET        shift and go to state 260


state 227

    (57) array1 -> empty .

    RES_DEF         reduce using rule 57 (array1 -> empty .)
    RES_FUNC        reduce using rule 57 (array1 -> empty .)
    RES_START       reduce using rule 57 (array1 -> empty .)
    RES_RETURN      reduce using rule 57 (array1 -> empty .)
    RES_READ        reduce using rule 57 (array1 -> empty .)
    RES_PRINT       reduce using rule 57 (array1 -> empty .)
    RES_IF          reduce using rule 57 (array1 -> empty .)
    RES_SWITCH      reduce using rule 57 (array1 -> empty .)
    RES_WHILE       reduce using rule 57 (array1 -> empty .)
    RES_FOR         reduce using rule 57 (array1 -> empty .)
    ID              reduce using rule 57 (array1 -> empty .)
    $end            reduce using rule 57 (array1 -> empty .)
    RES_END         reduce using rule 57 (array1 -> empty .)
    E_END           reduce using rule 57 (array1 -> empty .)
    RES_ELSE        reduce using rule 57 (array1 -> empty .)
    RES_CASE        reduce using rule 57 (array1 -> empty .)
    RPAREN          reduce using rule 57 (array1 -> empty .)


state 228

    (54) dim2 -> COMMA dim .

    RBRACKET        reduce using rule 54 (dim2 -> COMMA dim .)


state 229

    (187) consarray -> is_dim LBRACKET dim_pos RBRACKET .

    EQUALS          reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_LIST        reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_ARRAY       reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_INT         reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_FLOAT       reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_DOUBLE      reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_BOOLEAN     reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_STRING      reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_DEF         reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_FUNC        reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_START       reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_RETURN      reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_READ        reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_PRINT       reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_IF          reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_SWITCH      reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_WHILE       reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_FOR         reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    ID              reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    $end            reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_END         reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    E_END           reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_ELSE        reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RES_CASE        reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    COMMA           reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RCURLY          reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    TIMES           reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    DIVIDE          reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    PLUS            reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    MINUS           reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    MIN             reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    MIN_EQ          reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    MAY             reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    MAY_EQ          reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    DIF             reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    EQ_EQ           reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RPAREN          reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    RBRACKET        reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)
    COL             reduce using rule 187 (consarray -> is_dim LBRACKET dim_pos RBRACKET .)


state 230

    (192) dim_pos_2 -> COMMA . dim_pos
    (190) dim_pos -> . seen_int_pos dim_pos_2
    (191) seen_int_pos -> . exp
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    termino                        shift and go to state 148
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    seen_float_cons                shift and go to state 73
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 77
    dim_pos                        shift and go to state 261
    seen_int_pos                   shift and go to state 189
    seen_id_cons                   shift and go to state 74
    seen_int_cons                  shift and go to state 81
    conslist                       shift and go to state 82
    exp                            shift and go to state 190

state 231

    (193) dim_pos_2 -> empty .

    RBRACKET        reduce using rule 193 (dim_pos_2 -> empty .)


state 232

    (190) dim_pos -> seen_int_pos dim_pos_2 .

    RBRACKET        reduce using rule 190 (dim_pos -> seen_int_pos dim_pos_2 .)


state 233

    (196) conslist1 -> cons COMMA . conslist1
    (195) conslist1 -> . cons
    (196) conslist1 -> . cons COMMA conslist1
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    seen_int_cons                  shift and go to state 81
    seen_double_cons               shift and go to state 77
    cons                           shift and go to state 191
    seen_string_cons               shift and go to state 72
    seen_bool                      shift and go to state 71
    seen_float_cons                shift and go to state 73
    conslist                       shift and go to state 82
    conslist1                      shift and go to state 262
    seen_id_cons                   shift and go to state 74

state 234

    (194) conslist -> ID EQUALS LCURLY conslist1 RCURLY .

    COMMA           reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RCURLY          reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_LIST        reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_ARRAY       reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_INT         reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FLOAT       reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_DOUBLE      reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_BOOLEAN     reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_STRING      reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_DEF         reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FUNC        reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_START       reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_RETURN      reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_READ        reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_PRINT       reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_IF          reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_SWITCH      reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_WHILE       reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FOR         reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    ID              reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    $end            reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_END         reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    E_END           reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_ELSE        reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_CASE        reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RBRACKET        reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    TIMES           reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    DIVIDE          reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    PLUS            reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MINUS           reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RPAREN          reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    COL             reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MIN             reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MIN_EQ          reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MAY             reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MAY_EQ          reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    DIF             reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    EQ_EQ           reduce using rule 194 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)


state 235

    (116) forexp -> asignacion cuadruplo_est_for_1 COL . expresion cuadruplo_est_for_2 COL entra_update asignacion
    (135) expresion -> . exp expresion_1 cuadruplo_exp_9
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    seen_double_cons               shift and go to state 77
    termino                        shift and go to state 148
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    seen_float_cons                shift and go to state 73
    factor                         shift and go to state 151
    seen_int_cons                  shift and go to state 81
    seen_id_cons                   shift and go to state 74
    expresion                      shift and go to state 263
    conslist                       shift and go to state 82
    exp                            shift and go to state 170

state 236

    (114) for -> RES_FOR LPAREN forexp RPAREN sale_update . COL bloque cuadruplo_est_for_3

    COL             shift and go to state 264


state 237

    (121) if -> RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 . COL bloque ifelse

    COL             shift and go to state 265


state 238

    (136) expresion_1 -> see_rel cuadruplo_exp_8 . exp
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    termino                        shift and go to state 148
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    seen_float_cons                shift and go to state 73
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 77
    seen_id_cons                   shift and go to state 74
    seen_int_cons                  shift and go to state 81
    conslist                       shift and go to state 82
    exp                            shift and go to state 266

state 239

    (135) expresion -> exp expresion_1 cuadruplo_exp_9 .

    RPAREN          reduce using rule 135 (expresion -> exp expresion_1 cuadruplo_exp_9 .)
    COL             reduce using rule 135 (expresion -> exp expresion_1 cuadruplo_exp_9 .)


state 240

    (101) convert -> TOSTR . LPAREN exp RPAREN

    LPAREN          shift and go to state 267


state 241

    (107) asignarray -> LBRACKET . asignarray1 RBRACKET
    (108) asignarray1 -> . cons
    (109) asignarray1 -> . cons COMMA asignarray1
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    seen_int_cons                  shift and go to state 81
    seen_double_cons               shift and go to state 77
    cons                           shift and go to state 268
    seen_string_cons               shift and go to state 72
    seen_bool                      shift and go to state 71
    seen_float_cons                shift and go to state 73
    seen_id_cons                   shift and go to state 74
    conslist                       shift and go to state 82
    asignarray1                    shift and go to state 269

state 242

    (104) asignlist -> LCURLY . asignlist1 RCURLY
    (105) asignlist1 -> . cons
    (106) asignlist1 -> . cons COMMA asignlist1
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    seen_int_cons                  shift and go to state 81
    asignlist1                     shift and go to state 270
    cons                           shift and go to state 271
    seen_string_cons               shift and go to state 72
    seen_double_cons               shift and go to state 77
    seen_float_cons                shift and go to state 73
    seen_bool                      shift and go to state 71
    conslist                       shift and go to state 82
    seen_id_cons                   shift and go to state 74

state 243

    (98) asignacion1 -> asignarray .

    RES_RETURN      reduce using rule 98 (asignacion1 -> asignarray .)
    RES_READ        reduce using rule 98 (asignacion1 -> asignarray .)
    RES_PRINT       reduce using rule 98 (asignacion1 -> asignarray .)
    RES_DEF         reduce using rule 98 (asignacion1 -> asignarray .)
    RES_IF          reduce using rule 98 (asignacion1 -> asignarray .)
    RES_SWITCH      reduce using rule 98 (asignacion1 -> asignarray .)
    RES_WHILE       reduce using rule 98 (asignacion1 -> asignarray .)
    RES_FOR         reduce using rule 98 (asignacion1 -> asignarray .)
    ID              reduce using rule 98 (asignacion1 -> asignarray .)
    RES_FUNC        reduce using rule 98 (asignacion1 -> asignarray .)
    RES_START       reduce using rule 98 (asignacion1 -> asignarray .)
    $end            reduce using rule 98 (asignacion1 -> asignarray .)
    RES_END         reduce using rule 98 (asignacion1 -> asignarray .)
    E_END           reduce using rule 98 (asignacion1 -> asignarray .)
    RES_ELSE        reduce using rule 98 (asignacion1 -> asignarray .)
    RES_CASE        reduce using rule 98 (asignacion1 -> asignarray .)
    COL             reduce using rule 98 (asignacion1 -> asignarray .)
    RPAREN          reduce using rule 98 (asignacion1 -> asignarray .)


state 244

    (103) see_llamada -> llamada .

    RES_RETURN      reduce using rule 103 (see_llamada -> llamada .)
    RES_READ        reduce using rule 103 (see_llamada -> llamada .)
    RES_PRINT       reduce using rule 103 (see_llamada -> llamada .)
    RES_DEF         reduce using rule 103 (see_llamada -> llamada .)
    RES_IF          reduce using rule 103 (see_llamada -> llamada .)
    RES_SWITCH      reduce using rule 103 (see_llamada -> llamada .)
    RES_WHILE       reduce using rule 103 (see_llamada -> llamada .)
    RES_FOR         reduce using rule 103 (see_llamada -> llamada .)
    ID              reduce using rule 103 (see_llamada -> llamada .)
    RES_FUNC        reduce using rule 103 (see_llamada -> llamada .)
    RES_START       reduce using rule 103 (see_llamada -> llamada .)
    $end            reduce using rule 103 (see_llamada -> llamada .)
    RES_END         reduce using rule 103 (see_llamada -> llamada .)
    E_END           reduce using rule 103 (see_llamada -> llamada .)
    RES_ELSE        reduce using rule 103 (see_llamada -> llamada .)
    RES_CASE        reduce using rule 103 (see_llamada -> llamada .)
    COL             reduce using rule 103 (see_llamada -> llamada .)
    RPAREN          reduce using rule 103 (see_llamada -> llamada .)


state 245

    (102) convert -> TOINT . LPAREN exp RPAREN

    LPAREN          shift and go to state 272


state 246

    (81) seen_id_call -> ID .
    (175) seen_id_cons -> ID .
    (194) conslist -> ID . EQUALS LCURLY conslist1 RCURLY

    LPAREN          reduce using rule 81 (seen_id_call -> ID .)
    LBRACKET        reduce using rule 175 (seen_id_cons -> ID .)
    TIMES           reduce using rule 175 (seen_id_cons -> ID .)
    DIVIDE          reduce using rule 175 (seen_id_cons -> ID .)
    PLUS            reduce using rule 175 (seen_id_cons -> ID .)
    MINUS           reduce using rule 175 (seen_id_cons -> ID .)
    RES_RETURN      reduce using rule 175 (seen_id_cons -> ID .)
    RES_READ        reduce using rule 175 (seen_id_cons -> ID .)
    RES_PRINT       reduce using rule 175 (seen_id_cons -> ID .)
    RES_DEF         reduce using rule 175 (seen_id_cons -> ID .)
    RES_IF          reduce using rule 175 (seen_id_cons -> ID .)
    RES_SWITCH      reduce using rule 175 (seen_id_cons -> ID .)
    RES_WHILE       reduce using rule 175 (seen_id_cons -> ID .)
    RES_FOR         reduce using rule 175 (seen_id_cons -> ID .)
    ID              reduce using rule 175 (seen_id_cons -> ID .)
    RES_FUNC        reduce using rule 175 (seen_id_cons -> ID .)
    RES_START       reduce using rule 175 (seen_id_cons -> ID .)
    $end            reduce using rule 175 (seen_id_cons -> ID .)
    RES_END         reduce using rule 175 (seen_id_cons -> ID .)
    E_END           reduce using rule 175 (seen_id_cons -> ID .)
    RES_ELSE        reduce using rule 175 (seen_id_cons -> ID .)
    RES_CASE        reduce using rule 175 (seen_id_cons -> ID .)
    COL             reduce using rule 175 (seen_id_cons -> ID .)
    RPAREN          reduce using rule 175 (seen_id_cons -> ID .)
    EQUALS          shift and go to state 130


state 247

    (99) asignacion1 -> see_llamada .

    RES_RETURN      reduce using rule 99 (asignacion1 -> see_llamada .)
    RES_READ        reduce using rule 99 (asignacion1 -> see_llamada .)
    RES_PRINT       reduce using rule 99 (asignacion1 -> see_llamada .)
    RES_DEF         reduce using rule 99 (asignacion1 -> see_llamada .)
    RES_IF          reduce using rule 99 (asignacion1 -> see_llamada .)
    RES_SWITCH      reduce using rule 99 (asignacion1 -> see_llamada .)
    RES_WHILE       reduce using rule 99 (asignacion1 -> see_llamada .)
    RES_FOR         reduce using rule 99 (asignacion1 -> see_llamada .)
    ID              reduce using rule 99 (asignacion1 -> see_llamada .)
    RES_FUNC        reduce using rule 99 (asignacion1 -> see_llamada .)
    RES_START       reduce using rule 99 (asignacion1 -> see_llamada .)
    $end            reduce using rule 99 (asignacion1 -> see_llamada .)
    RES_END         reduce using rule 99 (asignacion1 -> see_llamada .)
    E_END           reduce using rule 99 (asignacion1 -> see_llamada .)
    RES_ELSE        reduce using rule 99 (asignacion1 -> see_llamada .)
    RES_CASE        reduce using rule 99 (asignacion1 -> see_llamada .)
    COL             reduce using rule 99 (asignacion1 -> see_llamada .)
    RPAREN          reduce using rule 99 (asignacion1 -> see_llamada .)


state 248

    (97) asignacion1 -> asignlist .

    RES_RETURN      reduce using rule 97 (asignacion1 -> asignlist .)
    RES_READ        reduce using rule 97 (asignacion1 -> asignlist .)
    RES_PRINT       reduce using rule 97 (asignacion1 -> asignlist .)
    RES_DEF         reduce using rule 97 (asignacion1 -> asignlist .)
    RES_IF          reduce using rule 97 (asignacion1 -> asignlist .)
    RES_SWITCH      reduce using rule 97 (asignacion1 -> asignlist .)
    RES_WHILE       reduce using rule 97 (asignacion1 -> asignlist .)
    RES_FOR         reduce using rule 97 (asignacion1 -> asignlist .)
    ID              reduce using rule 97 (asignacion1 -> asignlist .)
    RES_FUNC        reduce using rule 97 (asignacion1 -> asignlist .)
    RES_START       reduce using rule 97 (asignacion1 -> asignlist .)
    $end            reduce using rule 97 (asignacion1 -> asignlist .)
    RES_END         reduce using rule 97 (asignacion1 -> asignlist .)
    E_END           reduce using rule 97 (asignacion1 -> asignlist .)
    RES_ELSE        reduce using rule 97 (asignacion1 -> asignlist .)
    RES_CASE        reduce using rule 97 (asignacion1 -> asignlist .)
    COL             reduce using rule 97 (asignacion1 -> asignlist .)
    RPAREN          reduce using rule 97 (asignacion1 -> asignlist .)


state 249

    (100) asignacion1 -> convert .

    RES_RETURN      reduce using rule 100 (asignacion1 -> convert .)
    RES_READ        reduce using rule 100 (asignacion1 -> convert .)
    RES_PRINT       reduce using rule 100 (asignacion1 -> convert .)
    RES_DEF         reduce using rule 100 (asignacion1 -> convert .)
    RES_IF          reduce using rule 100 (asignacion1 -> convert .)
    RES_SWITCH      reduce using rule 100 (asignacion1 -> convert .)
    RES_WHILE       reduce using rule 100 (asignacion1 -> convert .)
    RES_FOR         reduce using rule 100 (asignacion1 -> convert .)
    ID              reduce using rule 100 (asignacion1 -> convert .)
    RES_FUNC        reduce using rule 100 (asignacion1 -> convert .)
    RES_START       reduce using rule 100 (asignacion1 -> convert .)
    $end            reduce using rule 100 (asignacion1 -> convert .)
    RES_END         reduce using rule 100 (asignacion1 -> convert .)
    E_END           reduce using rule 100 (asignacion1 -> convert .)
    RES_ELSE        reduce using rule 100 (asignacion1 -> convert .)
    RES_CASE        reduce using rule 100 (asignacion1 -> convert .)
    COL             reduce using rule 100 (asignacion1 -> convert .)
    RPAREN          reduce using rule 100 (asignacion1 -> convert .)


state 250

    (96) asignacion1 -> exp .

    RES_RETURN      reduce using rule 96 (asignacion1 -> exp .)
    RES_READ        reduce using rule 96 (asignacion1 -> exp .)
    RES_PRINT       reduce using rule 96 (asignacion1 -> exp .)
    RES_DEF         reduce using rule 96 (asignacion1 -> exp .)
    RES_IF          reduce using rule 96 (asignacion1 -> exp .)
    RES_SWITCH      reduce using rule 96 (asignacion1 -> exp .)
    RES_WHILE       reduce using rule 96 (asignacion1 -> exp .)
    RES_FOR         reduce using rule 96 (asignacion1 -> exp .)
    ID              reduce using rule 96 (asignacion1 -> exp .)
    RES_FUNC        reduce using rule 96 (asignacion1 -> exp .)
    RES_START       reduce using rule 96 (asignacion1 -> exp .)
    $end            reduce using rule 96 (asignacion1 -> exp .)
    RES_END         reduce using rule 96 (asignacion1 -> exp .)
    E_END           reduce using rule 96 (asignacion1 -> exp .)
    RES_ELSE        reduce using rule 96 (asignacion1 -> exp .)
    RES_CASE        reduce using rule 96 (asignacion1 -> exp .)
    COL             reduce using rule 96 (asignacion1 -> exp .)
    RPAREN          reduce using rule 96 (asignacion1 -> exp .)


state 251

    (91) asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 . insert_asignacion cuadruplo_exp_9_asignacion
    (95) insert_asignacion -> .

    RES_RETURN      reduce using rule 95 (insert_asignacion -> .)
    RES_READ        reduce using rule 95 (insert_asignacion -> .)
    RES_PRINT       reduce using rule 95 (insert_asignacion -> .)
    RES_DEF         reduce using rule 95 (insert_asignacion -> .)
    RES_IF          reduce using rule 95 (insert_asignacion -> .)
    RES_SWITCH      reduce using rule 95 (insert_asignacion -> .)
    RES_WHILE       reduce using rule 95 (insert_asignacion -> .)
    RES_FOR         reduce using rule 95 (insert_asignacion -> .)
    ID              reduce using rule 95 (insert_asignacion -> .)
    RES_FUNC        reduce using rule 95 (insert_asignacion -> .)
    RES_START       reduce using rule 95 (insert_asignacion -> .)
    $end            reduce using rule 95 (insert_asignacion -> .)
    RES_END         reduce using rule 95 (insert_asignacion -> .)
    E_END           reduce using rule 95 (insert_asignacion -> .)
    RES_ELSE        reduce using rule 95 (insert_asignacion -> .)
    RES_CASE        reduce using rule 95 (insert_asignacion -> .)
    COL             reduce using rule 95 (insert_asignacion -> .)
    RPAREN          reduce using rule 95 (insert_asignacion -> .)

    insert_asignacion              shift and go to state 273

state 252

    (89) escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .

    RES_RETURN      reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_READ        reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_PRINT       reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_DEF         reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_IF          reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_SWITCH      reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_WHILE       reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_FOR         reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    ID              reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_FUNC        reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_START       reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    $end            reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_END         reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    E_END           reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_ELSE        reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_CASE        reduce using rule 89 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)


state 253

    (110) while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN . cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (112) cuadruplo_est_while_2 -> .

    COL             reduce using rule 112 (cuadruplo_est_while_2 -> .)

    cuadruplo_est_while_2          shift and go to state 274

state 254

    (79) llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN . call_proc_4
    (80) call_proc_4 -> .

    RES_RETURN      reduce using rule 80 (call_proc_4 -> .)
    RES_READ        reduce using rule 80 (call_proc_4 -> .)
    RES_PRINT       reduce using rule 80 (call_proc_4 -> .)
    RES_DEF         reduce using rule 80 (call_proc_4 -> .)
    RES_IF          reduce using rule 80 (call_proc_4 -> .)
    RES_SWITCH      reduce using rule 80 (call_proc_4 -> .)
    RES_WHILE       reduce using rule 80 (call_proc_4 -> .)
    RES_FOR         reduce using rule 80 (call_proc_4 -> .)
    ID              reduce using rule 80 (call_proc_4 -> .)
    RES_FUNC        reduce using rule 80 (call_proc_4 -> .)
    RES_START       reduce using rule 80 (call_proc_4 -> .)
    $end            reduce using rule 80 (call_proc_4 -> .)
    RES_END         reduce using rule 80 (call_proc_4 -> .)
    E_END           reduce using rule 80 (call_proc_4 -> .)
    RES_ELSE        reduce using rule 80 (call_proc_4 -> .)
    RES_CASE        reduce using rule 80 (call_proc_4 -> .)
    COL             reduce using rule 80 (call_proc_4 -> .)
    RPAREN          reduce using rule 80 (call_proc_4 -> .)

    call_proc_4                    shift and go to state 275

state 255

    (83) llamada1 -> exp call_proc_3 . param
    (86) param -> . COMMA exp call_proc_3 param
    (87) param -> . empty
    (197) empty -> .

    COMMA           shift and go to state 277
    RPAREN          reduce using rule 197 (empty -> .)

    empty                          shift and go to state 276
    param                          shift and go to state 278

state 256

    (147) exp1 -> see_operador_e cuadruplos_exp_2 . exp
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    termino                        shift and go to state 148
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    seen_float_cons                shift and go to state 73
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 77
    seen_id_cons                   shift and go to state 74
    seen_int_cons                  shift and go to state 81
    conslist                       shift and go to state 82
    exp                            shift and go to state 279

state 257

    (153) termino1 -> see_operador_f cuadruplos_exp_3 . termino
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    termino                        shift and go to state 280
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    seen_float_cons                shift and go to state 73
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 77
    seen_id_cons                   shift and go to state 74
    seen_int_cons                  shift and go to state 81
    conslist                       shift and go to state 82

state 258

    (160) factor -> LPAREN cuadruplo_exp_6 exp RPAREN . cuadruplo_exp_7
    (165) cuadruplo_exp_7 -> .

    TIMES           reduce using rule 165 (cuadruplo_exp_7 -> .)
    DIVIDE          reduce using rule 165 (cuadruplo_exp_7 -> .)
    PLUS            reduce using rule 165 (cuadruplo_exp_7 -> .)
    MINUS           reduce using rule 165 (cuadruplo_exp_7 -> .)
    RES_RETURN      reduce using rule 165 (cuadruplo_exp_7 -> .)
    RES_READ        reduce using rule 165 (cuadruplo_exp_7 -> .)
    RES_PRINT       reduce using rule 165 (cuadruplo_exp_7 -> .)
    RES_DEF         reduce using rule 165 (cuadruplo_exp_7 -> .)
    RES_IF          reduce using rule 165 (cuadruplo_exp_7 -> .)
    RES_SWITCH      reduce using rule 165 (cuadruplo_exp_7 -> .)
    RES_WHILE       reduce using rule 165 (cuadruplo_exp_7 -> .)
    RES_FOR         reduce using rule 165 (cuadruplo_exp_7 -> .)
    ID              reduce using rule 165 (cuadruplo_exp_7 -> .)
    RES_FUNC        reduce using rule 165 (cuadruplo_exp_7 -> .)
    RES_START       reduce using rule 165 (cuadruplo_exp_7 -> .)
    $end            reduce using rule 165 (cuadruplo_exp_7 -> .)
    RES_END         reduce using rule 165 (cuadruplo_exp_7 -> .)
    E_END           reduce using rule 165 (cuadruplo_exp_7 -> .)
    RES_ELSE        reduce using rule 165 (cuadruplo_exp_7 -> .)
    RES_CASE        reduce using rule 165 (cuadruplo_exp_7 -> .)
    MIN             reduce using rule 165 (cuadruplo_exp_7 -> .)
    MIN_EQ          reduce using rule 165 (cuadruplo_exp_7 -> .)
    MAY             reduce using rule 165 (cuadruplo_exp_7 -> .)
    MAY_EQ          reduce using rule 165 (cuadruplo_exp_7 -> .)
    DIF             reduce using rule 165 (cuadruplo_exp_7 -> .)
    EQ_EQ           reduce using rule 165 (cuadruplo_exp_7 -> .)
    RPAREN          reduce using rule 165 (cuadruplo_exp_7 -> .)
    COMMA           reduce using rule 165 (cuadruplo_exp_7 -> .)
    RBRACKET        reduce using rule 165 (cuadruplo_exp_7 -> .)
    COL             reduce using rule 165 (cuadruplo_exp_7 -> .)

    cuadruplo_exp_7                shift and go to state 281

state 259

    (128) switch -> RES_SWITCH LPAREN seen_exp_switch RPAREN COL . switch2
    (130) switch2 -> . RES_CASE seen_exp_case COL seen_case_3 bloque seen_case_4 switch2
    (131) switch2 -> . empty
    (197) empty -> .

    RES_CASE        shift and go to state 283
    E_END           reduce using rule 197 (empty -> .)

    switch2                        shift and go to state 282
    empty                          shift and go to state 284

state 260

    (56) array1 -> COL LBRACKET . array2 RBRACKET array1
    (58) array2 -> . cons array3
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    seen_int_cons                  shift and go to state 81
    seen_double_cons               shift and go to state 77
    cons                           shift and go to state 285
    seen_string_cons               shift and go to state 72
    seen_bool                      shift and go to state 71
    array2                         shift and go to state 286
    conslist                       shift and go to state 82
    seen_float_cons                shift and go to state 73
    seen_id_cons                   shift and go to state 74

state 261

    (192) dim_pos_2 -> COMMA dim_pos .

    RBRACKET        reduce using rule 192 (dim_pos_2 -> COMMA dim_pos .)


state 262

    (196) conslist1 -> cons COMMA conslist1 .

    RCURLY          reduce using rule 196 (conslist1 -> cons COMMA conslist1 .)


state 263

    (116) forexp -> asignacion cuadruplo_est_for_1 COL expresion . cuadruplo_est_for_2 COL entra_update asignacion
    (119) cuadruplo_est_for_2 -> .

    COL             reduce using rule 119 (cuadruplo_est_for_2 -> .)

    cuadruplo_est_for_2            shift and go to state 287

state 264

    (114) for -> RES_FOR LPAREN forexp RPAREN sale_update COL . bloque cuadruplo_est_for_3
    (64) bloque -> . estatutos bloque
    (65) bloque -> . return bloque
    (66) bloque -> . empty
    (68) estatutos -> . condicion E_END
    (69) estatutos -> . ciclo E_END
    (70) estatutos -> . lectura
    (71) estatutos -> . escritura
    (72) estatutos -> . asignacion
    (73) estatutos -> . llamada
    (74) estatutos -> . vars
    (67) return -> . RES_RETURN exp
    (197) empty -> .
    (77) condicion -> . if
    (78) condicion -> . switch
    (75) ciclo -> . while
    (76) ciclo -> . for
    (88) lectura -> . RES_READ LPAREN tipo RPAREN
    (89) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (91) asignacion -> . seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (79) llamada -> . seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4
    (32) vars -> . RES_DEF COL vars1
    (121) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (128) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (110) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (114) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (94) seen_id_asignacion -> . ID
    (81) seen_id_call -> . ID

    RES_RETURN      shift and go to state 114
    E_END           reduce using rule 197 (empty -> .)
    RES_READ        shift and go to state 116
    RES_PRINT       shift and go to state 107
    RES_DEF         shift and go to state 20
    RES_IF          shift and go to state 98
    RES_SWITCH      shift and go to state 115
    RES_WHILE       shift and go to state 112
    RES_FOR         shift and go to state 96
    ID              shift and go to state 104

    vars                           shift and go to state 95
    bloque                         shift and go to state 288
    if                             shift and go to state 99
    ciclo                          shift and go to state 100
    seen_id_asignacion             shift and go to state 102
    switch                         shift and go to state 103
    llamada                        shift and go to state 105
    condicion                      shift and go to state 106
    lectura                        shift and go to state 108
    empty                          shift and go to state 109
    return                         shift and go to state 110
    estatutos                      shift and go to state 111
    seen_id_call                   shift and go to state 113
    for                            shift and go to state 101
    asignacion                     shift and go to state 117
    while                          shift and go to state 118
    escritura                      shift and go to state 119

state 265

    (121) if -> RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL . bloque ifelse
    (64) bloque -> . estatutos bloque
    (65) bloque -> . return bloque
    (66) bloque -> . empty
    (68) estatutos -> . condicion E_END
    (69) estatutos -> . ciclo E_END
    (70) estatutos -> . lectura
    (71) estatutos -> . escritura
    (72) estatutos -> . asignacion
    (73) estatutos -> . llamada
    (74) estatutos -> . vars
    (67) return -> . RES_RETURN exp
    (197) empty -> .
    (77) condicion -> . if
    (78) condicion -> . switch
    (75) ciclo -> . while
    (76) ciclo -> . for
    (88) lectura -> . RES_READ LPAREN tipo RPAREN
    (89) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (91) asignacion -> . seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (79) llamada -> . seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4
    (32) vars -> . RES_DEF COL vars1
    (121) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (128) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (110) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (114) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (94) seen_id_asignacion -> . ID
    (81) seen_id_call -> . ID

    RES_RETURN      shift and go to state 114
    RES_ELSE        reduce using rule 197 (empty -> .)
    E_END           reduce using rule 197 (empty -> .)
    RES_READ        shift and go to state 116
    RES_PRINT       shift and go to state 107
    RES_DEF         shift and go to state 20
    RES_IF          shift and go to state 98
    RES_SWITCH      shift and go to state 115
    RES_WHILE       shift and go to state 112
    RES_FOR         shift and go to state 96
    ID              shift and go to state 104

    vars                           shift and go to state 95
    bloque                         shift and go to state 289
    if                             shift and go to state 99
    ciclo                          shift and go to state 100
    seen_id_asignacion             shift and go to state 102
    switch                         shift and go to state 103
    for                            shift and go to state 101
    llamada                        shift and go to state 105
    condicion                      shift and go to state 106
    lectura                        shift and go to state 108
    empty                          shift and go to state 109
    return                         shift and go to state 110
    estatutos                      shift and go to state 111
    seen_id_call                   shift and go to state 113
    asignacion                     shift and go to state 117
    while                          shift and go to state 118
    escritura                      shift and go to state 119

state 266

    (136) expresion_1 -> see_rel cuadruplo_exp_8 exp .

    RPAREN          reduce using rule 136 (expresion_1 -> see_rel cuadruplo_exp_8 exp .)
    COL             reduce using rule 136 (expresion_1 -> see_rel cuadruplo_exp_8 exp .)


state 267

    (101) convert -> TOSTR LPAREN . exp RPAREN
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    termino                        shift and go to state 148
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    seen_float_cons                shift and go to state 73
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 77
    seen_id_cons                   shift and go to state 74
    seen_int_cons                  shift and go to state 81
    conslist                       shift and go to state 82
    exp                            shift and go to state 290

state 268

    (108) asignarray1 -> cons .
    (109) asignarray1 -> cons . COMMA asignarray1

    RBRACKET        reduce using rule 108 (asignarray1 -> cons .)
    COMMA           shift and go to state 291


state 269

    (107) asignarray -> LBRACKET asignarray1 . RBRACKET

    RBRACKET        shift and go to state 292


state 270

    (104) asignlist -> LCURLY asignlist1 . RCURLY

    RCURLY          shift and go to state 293


state 271

    (105) asignlist1 -> cons .
    (106) asignlist1 -> cons . COMMA asignlist1

    RCURLY          reduce using rule 105 (asignlist1 -> cons .)
    COMMA           shift and go to state 294


state 272

    (102) convert -> TOINT LPAREN . exp RPAREN
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    termino                        shift and go to state 148
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    seen_float_cons                shift and go to state 73
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 77
    seen_id_cons                   shift and go to state 74
    seen_int_cons                  shift and go to state 81
    conslist                       shift and go to state 82
    exp                            shift and go to state 295

state 273

    (91) asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion . cuadruplo_exp_9_asignacion
    (93) cuadruplo_exp_9_asignacion -> .

    RES_RETURN      reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    RES_READ        reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    RES_PRINT       reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    RES_DEF         reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    RES_IF          reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    RES_SWITCH      reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    RES_WHILE       reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    RES_FOR         reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    ID              reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    RES_FUNC        reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    RES_START       reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    $end            reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    RES_END         reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    E_END           reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    RES_ELSE        reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    RES_CASE        reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    COL             reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)
    RPAREN          reduce using rule 93 (cuadruplo_exp_9_asignacion -> .)

    cuadruplo_exp_9_asignacion     shift and go to state 296

state 274

    (110) while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 . COL bloque cuadruplo_est_while_3

    COL             shift and go to state 297


state 275

    (79) llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .

    RES_RETURN      reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    RES_READ        reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    RES_PRINT       reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    RES_DEF         reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    RES_IF          reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    RES_SWITCH      reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    RES_WHILE       reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    RES_FOR         reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    ID              reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    E_END           reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    RES_FUNC        reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    RES_START       reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    $end            reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    RES_END         reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    RES_ELSE        reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    RES_CASE        reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    COL             reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)
    RPAREN          reduce using rule 79 (llamada -> seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 .)


state 276

    (87) param -> empty .

    RPAREN          reduce using rule 87 (param -> empty .)


state 277

    (86) param -> COMMA . exp call_proc_3 param
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    seen_float_cons                shift and go to state 73
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 77
    seen_id_cons                   shift and go to state 74
    seen_int_cons                  shift and go to state 81
    conslist                       shift and go to state 82
    exp                            shift and go to state 298
    termino                        shift and go to state 148

state 278

    (83) llamada1 -> exp call_proc_3 param .

    RPAREN          reduce using rule 83 (llamada1 -> exp call_proc_3 param .)


state 279

    (147) exp1 -> see_operador_e cuadruplos_exp_2 exp .

    RES_RETURN      reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_READ        reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_PRINT       reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_DEF         reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_IF          reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_SWITCH      reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_WHILE       reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_FOR         reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    ID              reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_FUNC        reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_START       reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    $end            reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_END         reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    E_END           reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_ELSE        reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_CASE        reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    MIN             reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    MIN_EQ          reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    MAY             reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    MAY_EQ          reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    DIF             reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    EQ_EQ           reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RPAREN          reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    COMMA           reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RBRACKET        reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    COL             reduce using rule 147 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)


state 280

    (153) termino1 -> see_operador_f cuadruplos_exp_3 termino .

    PLUS            reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    MINUS           reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_RETURN      reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_READ        reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_PRINT       reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_DEF         reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_IF          reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_SWITCH      reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_WHILE       reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_FOR         reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    ID              reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_FUNC        reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_START       reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    $end            reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_END         reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    E_END           reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_ELSE        reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_CASE        reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    MIN             reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    MIN_EQ          reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    MAY             reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    MAY_EQ          reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    DIF             reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    EQ_EQ           reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RPAREN          reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    COMMA           reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RBRACKET        reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    COL             reduce using rule 153 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)


state 281

    (160) factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .

    TIMES           reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    DIVIDE          reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    PLUS            reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    MINUS           reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_RETURN      reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_READ        reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_PRINT       reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_DEF         reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_IF          reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_SWITCH      reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_WHILE       reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_FOR         reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    ID              reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_FUNC        reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_START       reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    $end            reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_END         reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    E_END           reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_ELSE        reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_CASE        reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    COL             reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RPAREN          reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    MIN             reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    MIN_EQ          reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    MAY             reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    MAY_EQ          reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    DIF             reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    EQ_EQ           reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    COMMA           reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RBRACKET        reduce using rule 160 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)


state 282

    (128) switch -> RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2 .

    E_END           reduce using rule 128 (switch -> RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2 .)


state 283

    (130) switch2 -> RES_CASE . seen_exp_case COL seen_case_3 bloque seen_case_4 switch2
    (134) seen_exp_case -> . exp
    (146) exp -> . termino cuadruplo_exp_4 exp1
    (152) termino -> . factor cuadruplo_exp_5 termino1
    (160) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (161) factor -> . cons
    (162) factor -> . PLUS cons
    (163) factor -> . MINUS cons
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 152
    PLUS            shift and go to state 150
    MINUS           shift and go to state 149
    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    cons                           shift and go to state 147
    termino                        shift and go to state 148
    seen_bool                      shift and go to state 71
    seen_string_cons               shift and go to state 72
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 77
    seen_id_cons                   shift and go to state 74
    seen_int_cons                  shift and go to state 81
    seen_exp_case                  shift and go to state 299
    conslist                       shift and go to state 82
    exp                            shift and go to state 300
    seen_float_cons                shift and go to state 73

state 284

    (131) switch2 -> empty .

    E_END           reduce using rule 131 (switch2 -> empty .)


state 285

    (58) array2 -> cons . array3
    (59) array3 -> . COMMA array2
    (60) array3 -> . empty
    (197) empty -> .

    COMMA           shift and go to state 302
    RBRACKET        reduce using rule 197 (empty -> .)

    array3                         shift and go to state 301
    empty                          shift and go to state 303

state 286

    (56) array1 -> COL LBRACKET array2 . RBRACKET array1

    RBRACKET        shift and go to state 304


state 287

    (116) forexp -> asignacion cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 . COL entra_update asignacion

    COL             shift and go to state 305


state 288

    (114) for -> RES_FOR LPAREN forexp RPAREN sale_update COL bloque . cuadruplo_est_for_3
    (120) cuadruplo_est_for_3 -> .

    E_END           reduce using rule 120 (cuadruplo_est_for_3 -> .)

    cuadruplo_est_for_3            shift and go to state 306

state 289

    (121) if -> RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque . ifelse
    (123) ifelse -> . cuadruplo_est_if_else_2 RES_ELSE COL bloque cuadruplo_est_if_else_3
    (124) ifelse -> . empty cuadruplo_est_if_2
    (126) cuadruplo_est_if_else_2 -> .
    (197) empty -> .

    RES_ELSE        reduce using rule 126 (cuadruplo_est_if_else_2 -> .)
    E_END           reduce using rule 197 (empty -> .)

    ifelse                         shift and go to state 307
    cuadruplo_est_if_else_2        shift and go to state 309
    empty                          shift and go to state 308

state 290

    (101) convert -> TOSTR LPAREN exp . RPAREN

    RPAREN          shift and go to state 310


state 291

    (109) asignarray1 -> cons COMMA . asignarray1
    (108) asignarray1 -> . cons
    (109) asignarray1 -> . cons COMMA asignarray1
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    seen_int_cons                  shift and go to state 81
    seen_double_cons               shift and go to state 77
    cons                           shift and go to state 268
    seen_string_cons               shift and go to state 72
    seen_bool                      shift and go to state 71
    seen_float_cons                shift and go to state 73
    seen_id_cons                   shift and go to state 74
    conslist                       shift and go to state 82
    asignarray1                    shift and go to state 311

state 292

    (107) asignarray -> LBRACKET asignarray1 RBRACKET .

    RES_RETURN      reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_READ        reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_PRINT       reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_DEF         reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_IF          reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_SWITCH      reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_WHILE       reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_FOR         reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    ID              reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_FUNC        reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_START       reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    $end            reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_END         reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    E_END           reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_ELSE        reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_CASE        reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    COL             reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RPAREN          reduce using rule 107 (asignarray -> LBRACKET asignarray1 RBRACKET .)


state 293

    (104) asignlist -> LCURLY asignlist1 RCURLY .

    RES_RETURN      reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_READ        reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_PRINT       reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_DEF         reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_IF          reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_SWITCH      reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_WHILE       reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_FOR         reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    ID              reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_FUNC        reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_START       reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    $end            reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_END         reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    E_END           reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_ELSE        reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_CASE        reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    COL             reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)
    RPAREN          reduce using rule 104 (asignlist -> LCURLY asignlist1 RCURLY .)


state 294

    (106) asignlist1 -> cons COMMA . asignlist1
    (105) asignlist1 -> . cons
    (106) asignlist1 -> . cons COMMA asignlist1
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    seen_int_cons                  shift and go to state 81
    asignlist1                     shift and go to state 312
    cons                           shift and go to state 271
    seen_string_cons               shift and go to state 72
    seen_double_cons               shift and go to state 77
    seen_float_cons                shift and go to state 73
    seen_bool                      shift and go to state 71
    conslist                       shift and go to state 82
    seen_id_cons                   shift and go to state 74

state 295

    (102) convert -> TOINT LPAREN exp . RPAREN

    RPAREN          shift and go to state 313


state 296

    (91) asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .

    RPAREN          reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_RETURN      reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_READ        reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_PRINT       reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_DEF         reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_IF          reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_SWITCH      reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_WHILE       reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_FOR         reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    ID              reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_FUNC        reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_START       reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    $end            reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_END         reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    E_END           reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_ELSE        reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_CASE        reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    COL             reduce using rule 91 (asignacion -> seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)


state 297

    (110) while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL . bloque cuadruplo_est_while_3
    (64) bloque -> . estatutos bloque
    (65) bloque -> . return bloque
    (66) bloque -> . empty
    (68) estatutos -> . condicion E_END
    (69) estatutos -> . ciclo E_END
    (70) estatutos -> . lectura
    (71) estatutos -> . escritura
    (72) estatutos -> . asignacion
    (73) estatutos -> . llamada
    (74) estatutos -> . vars
    (67) return -> . RES_RETURN exp
    (197) empty -> .
    (77) condicion -> . if
    (78) condicion -> . switch
    (75) ciclo -> . while
    (76) ciclo -> . for
    (88) lectura -> . RES_READ LPAREN tipo RPAREN
    (89) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (91) asignacion -> . seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (79) llamada -> . seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4
    (32) vars -> . RES_DEF COL vars1
    (121) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (128) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (110) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (114) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (94) seen_id_asignacion -> . ID
    (81) seen_id_call -> . ID

    RES_RETURN      shift and go to state 114
    E_END           reduce using rule 197 (empty -> .)
    RES_READ        shift and go to state 116
    RES_PRINT       shift and go to state 107
    RES_DEF         shift and go to state 20
    RES_IF          shift and go to state 98
    RES_SWITCH      shift and go to state 115
    RES_WHILE       shift and go to state 112
    RES_FOR         shift and go to state 96
    ID              shift and go to state 104

    vars                           shift and go to state 95
    bloque                         shift and go to state 314
    if                             shift and go to state 99
    seen_id_asignacion             shift and go to state 102
    switch                         shift and go to state 103
    for                            shift and go to state 101
    llamada                        shift and go to state 105
    condicion                      shift and go to state 106
    lectura                        shift and go to state 108
    empty                          shift and go to state 109
    return                         shift and go to state 110
    estatutos                      shift and go to state 111
    seen_id_call                   shift and go to state 113
    ciclo                          shift and go to state 100
    asignacion                     shift and go to state 117
    while                          shift and go to state 118
    escritura                      shift and go to state 119

state 298

    (86) param -> COMMA exp . call_proc_3 param
    (85) call_proc_3 -> .

    COMMA           reduce using rule 85 (call_proc_3 -> .)
    RPAREN          reduce using rule 85 (call_proc_3 -> .)

    call_proc_3                    shift and go to state 315

state 299

    (130) switch2 -> RES_CASE seen_exp_case . COL seen_case_3 bloque seen_case_4 switch2

    COL             shift and go to state 316


state 300

    (134) seen_exp_case -> exp .

    COL             reduce using rule 134 (seen_exp_case -> exp .)


state 301

    (58) array2 -> cons array3 .

    RBRACKET        reduce using rule 58 (array2 -> cons array3 .)


state 302

    (59) array3 -> COMMA . array2
    (58) array2 -> . cons array3
    (166) cons -> . seen_id_cons consarray exp_1
    (167) cons -> . seen_int_cons exp_cons_int
    (168) cons -> . seen_float_cons exp_cons_float
    (169) cons -> . seen_double_cons exp_cons_double
    (170) cons -> . seen_string_cons exp_cons_string
    (171) cons -> . seen_bool
    (172) cons -> . conslist
    (175) seen_id_cons -> . ID
    (179) seen_int_cons -> . CTE_INT
    (176) seen_float_cons -> . CTE_FLOAT
    (177) seen_double_cons -> . CTE_DOUBLE
    (178) seen_string_cons -> . CTE_STRING
    (173) seen_bool -> . RES_TRUE
    (174) seen_bool -> . RES_FALSE
    (194) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 80
    CTE_INT         shift and go to state 79
    CTE_FLOAT       shift and go to state 83
    CTE_DOUBLE      shift and go to state 78
    CTE_STRING      shift and go to state 76
    RES_TRUE        shift and go to state 75
    RES_FALSE       shift and go to state 84

    seen_int_cons                  shift and go to state 81
    seen_double_cons               shift and go to state 77
    cons                           shift and go to state 285
    seen_string_cons               shift and go to state 72
    seen_bool                      shift and go to state 71
    array2                         shift and go to state 317
    conslist                       shift and go to state 82
    seen_float_cons                shift and go to state 73
    seen_id_cons                   shift and go to state 74

state 303

    (60) array3 -> empty .

    RBRACKET        reduce using rule 60 (array3 -> empty .)


state 304

    (56) array1 -> COL LBRACKET array2 RBRACKET . array1
    (56) array1 -> . COL LBRACKET array2 RBRACKET array1
    (57) array1 -> . empty
    (197) empty -> .

    COL             shift and go to state 226
    RES_DEF         reduce using rule 197 (empty -> .)
    RES_FUNC        reduce using rule 197 (empty -> .)
    RES_START       reduce using rule 197 (empty -> .)
    RES_RETURN      reduce using rule 197 (empty -> .)
    RES_READ        reduce using rule 197 (empty -> .)
    RES_PRINT       reduce using rule 197 (empty -> .)
    RES_IF          reduce using rule 197 (empty -> .)
    RES_SWITCH      reduce using rule 197 (empty -> .)
    RES_WHILE       reduce using rule 197 (empty -> .)
    RES_FOR         reduce using rule 197 (empty -> .)
    ID              reduce using rule 197 (empty -> .)
    $end            reduce using rule 197 (empty -> .)
    RES_END         reduce using rule 197 (empty -> .)
    E_END           reduce using rule 197 (empty -> .)
    RES_ELSE        reduce using rule 197 (empty -> .)
    RES_CASE        reduce using rule 197 (empty -> .)
    RPAREN          reduce using rule 197 (empty -> .)

    array1                         shift and go to state 318
    empty                          shift and go to state 227

state 305

    (116) forexp -> asignacion cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 COL . entra_update asignacion
    (117) entra_update -> .

    ID              reduce using rule 117 (entra_update -> .)

    entra_update                   shift and go to state 319

state 306

    (114) for -> RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3 .

    E_END           reduce using rule 114 (for -> RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3 .)


state 307

    (121) if -> RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse .

    E_END           reduce using rule 121 (if -> RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse .)


state 308

    (124) ifelse -> empty . cuadruplo_est_if_2
    (125) cuadruplo_est_if_2 -> .

    E_END           reduce using rule 125 (cuadruplo_est_if_2 -> .)

    cuadruplo_est_if_2             shift and go to state 320

state 309

    (123) ifelse -> cuadruplo_est_if_else_2 . RES_ELSE COL bloque cuadruplo_est_if_else_3

    RES_ELSE        shift and go to state 321


state 310

    (101) convert -> TOSTR LPAREN exp RPAREN .

    RES_RETURN      reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    RES_READ        reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    RES_PRINT       reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    RES_DEF         reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    RES_IF          reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    RES_SWITCH      reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    RES_WHILE       reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    RES_FOR         reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    ID              reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    RES_FUNC        reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    RES_START       reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    $end            reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    RES_END         reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    E_END           reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    RES_ELSE        reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    RES_CASE        reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    COL             reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)
    RPAREN          reduce using rule 101 (convert -> TOSTR LPAREN exp RPAREN .)


state 311

    (109) asignarray1 -> cons COMMA asignarray1 .

    RBRACKET        reduce using rule 109 (asignarray1 -> cons COMMA asignarray1 .)


state 312

    (106) asignlist1 -> cons COMMA asignlist1 .

    RCURLY          reduce using rule 106 (asignlist1 -> cons COMMA asignlist1 .)


state 313

    (102) convert -> TOINT LPAREN exp RPAREN .

    RES_RETURN      reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    RES_READ        reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    RES_PRINT       reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    RES_DEF         reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    RES_IF          reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    RES_SWITCH      reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    RES_WHILE       reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    RES_FOR         reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    ID              reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    RES_FUNC        reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    RES_START       reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    $end            reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    RES_END         reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    E_END           reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    RES_ELSE        reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    RES_CASE        reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    COL             reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)
    RPAREN          reduce using rule 102 (convert -> TOINT LPAREN exp RPAREN .)


state 314

    (110) while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque . cuadruplo_est_while_3
    (113) cuadruplo_est_while_3 -> .

    E_END           reduce using rule 113 (cuadruplo_est_while_3 -> .)

    cuadruplo_est_while_3          shift and go to state 322

state 315

    (86) param -> COMMA exp call_proc_3 . param
    (86) param -> . COMMA exp call_proc_3 param
    (87) param -> . empty
    (197) empty -> .

    COMMA           shift and go to state 277
    RPAREN          reduce using rule 197 (empty -> .)

    empty                          shift and go to state 276
    param                          shift and go to state 323

state 316

    (130) switch2 -> RES_CASE seen_exp_case COL . seen_case_3 bloque seen_case_4 switch2
    (132) seen_case_3 -> .

    RES_RETURN      reduce using rule 132 (seen_case_3 -> .)
    RES_READ        reduce using rule 132 (seen_case_3 -> .)
    RES_PRINT       reduce using rule 132 (seen_case_3 -> .)
    RES_DEF         reduce using rule 132 (seen_case_3 -> .)
    RES_IF          reduce using rule 132 (seen_case_3 -> .)
    RES_SWITCH      reduce using rule 132 (seen_case_3 -> .)
    RES_WHILE       reduce using rule 132 (seen_case_3 -> .)
    RES_FOR         reduce using rule 132 (seen_case_3 -> .)
    ID              reduce using rule 132 (seen_case_3 -> .)
    RES_CASE        reduce using rule 132 (seen_case_3 -> .)
    E_END           reduce using rule 132 (seen_case_3 -> .)

    seen_case_3                    shift and go to state 324

state 317

    (59) array3 -> COMMA array2 .

    RBRACKET        reduce using rule 59 (array3 -> COMMA array2 .)


state 318

    (56) array1 -> COL LBRACKET array2 RBRACKET array1 .

    RES_DEF         reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    RES_FUNC        reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    RES_START       reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    RES_RETURN      reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    RES_READ        reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    RES_PRINT       reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    RES_IF          reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    RES_SWITCH      reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    RES_WHILE       reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    RES_FOR         reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    ID              reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    $end            reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    RES_END         reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    E_END           reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    RES_ELSE        reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    RES_CASE        reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)
    RPAREN          reduce using rule 56 (array1 -> COL LBRACKET array2 RBRACKET array1 .)


state 319

    (116) forexp -> asignacion cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 COL entra_update . asignacion
    (91) asignacion -> . seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (94) seen_id_asignacion -> . ID

    ID              shift and go to state 167

    asignacion                     shift and go to state 325
    seen_id_asignacion             shift and go to state 102

state 320

    (124) ifelse -> empty cuadruplo_est_if_2 .

    E_END           reduce using rule 124 (ifelse -> empty cuadruplo_est_if_2 .)


state 321

    (123) ifelse -> cuadruplo_est_if_else_2 RES_ELSE . COL bloque cuadruplo_est_if_else_3

    COL             shift and go to state 326


state 322

    (110) while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3 .

    E_END           reduce using rule 110 (while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3 .)


state 323

    (86) param -> COMMA exp call_proc_3 param .

    RPAREN          reduce using rule 86 (param -> COMMA exp call_proc_3 param .)


state 324

    (130) switch2 -> RES_CASE seen_exp_case COL seen_case_3 . bloque seen_case_4 switch2
    (64) bloque -> . estatutos bloque
    (65) bloque -> . return bloque
    (66) bloque -> . empty
    (68) estatutos -> . condicion E_END
    (69) estatutos -> . ciclo E_END
    (70) estatutos -> . lectura
    (71) estatutos -> . escritura
    (72) estatutos -> . asignacion
    (73) estatutos -> . llamada
    (74) estatutos -> . vars
    (67) return -> . RES_RETURN exp
    (197) empty -> .
    (77) condicion -> . if
    (78) condicion -> . switch
    (75) ciclo -> . while
    (76) ciclo -> . for
    (88) lectura -> . RES_READ LPAREN tipo RPAREN
    (89) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (91) asignacion -> . seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (79) llamada -> . seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4
    (32) vars -> . RES_DEF COL vars1
    (121) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (128) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (110) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (114) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (94) seen_id_asignacion -> . ID
    (81) seen_id_call -> . ID

    RES_RETURN      shift and go to state 114
    RES_CASE        reduce using rule 197 (empty -> .)
    E_END           reduce using rule 197 (empty -> .)
    RES_READ        shift and go to state 116
    RES_PRINT       shift and go to state 107
    RES_DEF         shift and go to state 20
    RES_IF          shift and go to state 98
    RES_SWITCH      shift and go to state 115
    RES_WHILE       shift and go to state 112
    RES_FOR         shift and go to state 96
    ID              shift and go to state 104

    vars                           shift and go to state 95
    bloque                         shift and go to state 327
    if                             shift and go to state 99
    ciclo                          shift and go to state 100
    seen_id_asignacion             shift and go to state 102
    switch                         shift and go to state 103
    llamada                        shift and go to state 105
    condicion                      shift and go to state 106
    lectura                        shift and go to state 108
    empty                          shift and go to state 109
    return                         shift and go to state 110
    estatutos                      shift and go to state 111
    seen_id_call                   shift and go to state 113
    for                            shift and go to state 101
    asignacion                     shift and go to state 117
    while                          shift and go to state 118
    escritura                      shift and go to state 119

state 325

    (116) forexp -> asignacion cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 COL entra_update asignacion .

    RPAREN          reduce using rule 116 (forexp -> asignacion cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 COL entra_update asignacion .)


state 326

    (123) ifelse -> cuadruplo_est_if_else_2 RES_ELSE COL . bloque cuadruplo_est_if_else_3
    (64) bloque -> . estatutos bloque
    (65) bloque -> . return bloque
    (66) bloque -> . empty
    (68) estatutos -> . condicion E_END
    (69) estatutos -> . ciclo E_END
    (70) estatutos -> . lectura
    (71) estatutos -> . escritura
    (72) estatutos -> . asignacion
    (73) estatutos -> . llamada
    (74) estatutos -> . vars
    (67) return -> . RES_RETURN exp
    (197) empty -> .
    (77) condicion -> . if
    (78) condicion -> . switch
    (75) ciclo -> . while
    (76) ciclo -> . for
    (88) lectura -> . RES_READ LPAREN tipo RPAREN
    (89) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (91) asignacion -> . seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (79) llamada -> . seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4
    (32) vars -> . RES_DEF COL vars1
    (121) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (128) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (110) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (114) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (94) seen_id_asignacion -> . ID
    (81) seen_id_call -> . ID

    RES_RETURN      shift and go to state 114
    E_END           reduce using rule 197 (empty -> .)
    RES_READ        shift and go to state 116
    RES_PRINT       shift and go to state 107
    RES_DEF         shift and go to state 20
    RES_IF          shift and go to state 98
    RES_SWITCH      shift and go to state 115
    RES_WHILE       shift and go to state 112
    RES_FOR         shift and go to state 96
    ID              shift and go to state 104

    vars                           shift and go to state 95
    bloque                         shift and go to state 328
    if                             shift and go to state 99
    ciclo                          shift and go to state 100
    seen_id_asignacion             shift and go to state 102
    switch                         shift and go to state 103
    llamada                        shift and go to state 105
    condicion                      shift and go to state 106
    lectura                        shift and go to state 108
    empty                          shift and go to state 109
    return                         shift and go to state 110
    estatutos                      shift and go to state 111
    seen_id_call                   shift and go to state 113
    for                            shift and go to state 101
    asignacion                     shift and go to state 117
    while                          shift and go to state 118
    escritura                      shift and go to state 119

state 327

    (130) switch2 -> RES_CASE seen_exp_case COL seen_case_3 bloque . seen_case_4 switch2
    (133) seen_case_4 -> .

    RES_CASE        reduce using rule 133 (seen_case_4 -> .)
    E_END           reduce using rule 133 (seen_case_4 -> .)

    seen_case_4                    shift and go to state 329

state 328

    (123) ifelse -> cuadruplo_est_if_else_2 RES_ELSE COL bloque . cuadruplo_est_if_else_3
    (127) cuadruplo_est_if_else_3 -> .

    E_END           reduce using rule 127 (cuadruplo_est_if_else_3 -> .)

    cuadruplo_est_if_else_3        shift and go to state 330

state 329

    (130) switch2 -> RES_CASE seen_exp_case COL seen_case_3 bloque seen_case_4 . switch2
    (130) switch2 -> . RES_CASE seen_exp_case COL seen_case_3 bloque seen_case_4 switch2
    (131) switch2 -> . empty
    (197) empty -> .

    RES_CASE        shift and go to state 283
    E_END           reduce using rule 197 (empty -> .)

    switch2                        shift and go to state 331
    empty                          shift and go to state 284

state 330

    (123) ifelse -> cuadruplo_est_if_else_2 RES_ELSE COL bloque cuadruplo_est_if_else_3 .

    E_END           reduce using rule 123 (ifelse -> cuadruplo_est_if_else_2 RES_ELSE COL bloque cuadruplo_est_if_else_3 .)


state 331

    (130) switch2 -> RES_CASE seen_exp_case COL seen_case_3 bloque seen_case_4 switch2 .

    E_END           reduce using rule 130 (switch2 -> RES_CASE seen_exp_case COL seen_case_3 bloque seen_case_4 switch2 .)

