Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RES_SET
    ENDI
    TAB
    RES_ELIF
    NEW_LINE
    VAR
    AND
    OR

Grammar

Rule 0     S' -> programa
Rule 1     programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 main programa3
Rule 2     programa -> empty
Rule 3     prueba -> <empty>
Rule 4     generaglo -> <empty>
Rule 5     programa1 -> RES_PROTO prototipos seen_prototipo programa1
Rule 6     programa1 -> empty
Rule 7     seen_prototipo -> <empty>
Rule 8     programa2 -> vars programa2
Rule 9     programa2 -> empty
Rule 10    valida_entra_global -> <empty>
Rule 11    valida_salir_gobal -> <empty>
Rule 12    programa3 -> programa3 modulos
Rule 13    programa3 -> empty
Rule 14    prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN
Rule 15    seen_dato -> <empty>
Rule 16    prototipos_1 -> tipo ID prototipos_2
Rule 17    prototipos_2 -> COMMA prototipos_1
Rule 18    prototipos_2 -> empty
Rule 19    dato -> RES_INT
Rule 20    dato -> RES_FLOAT
Rule 21    dato -> RES_DOUBLE
Rule 22    dato -> RES_BOOLEAN
Rule 23    dato -> RES_STRING
Rule 24    tipo -> dato
Rule 25    tipo -> estructura
Rule 26    estructura -> list
Rule 27    estructura -> array
Rule 28    vars -> RES_DEF COL vars1
Rule 29    vars1 -> estructura vars1
Rule 30    vars1 -> dato ID vars2 vars1_1
Rule 31    vars1_1 -> vars1
Rule 32    vars1_1 -> empty
Rule 33    vars2 -> EQUALS cons
Rule 34    vars2 -> vars3
Rule 35    vars3 -> COMMA ID vars3
Rule 36    vars3 -> empty
Rule 37    list -> RES_LIST dato ID list1
Rule 38    list1 -> LCURLY cons_loop RCURLY
Rule 39    list1 -> empty
Rule 40    cons_loop -> cons cons_loop_1
Rule 41    cons_loop_1 -> COMMA cons_loop
Rule 42    cons_loop_1 -> empty
Rule 43    array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1
Rule 44    array1 -> COL LBRACKET array2 RBRACKET
Rule 45    array1 -> empty
Rule 46    array2 -> cons
Rule 47    array2 -> cons COMMA array2
Rule 48    modulos -> prototipos se_uso COL bloque
Rule 49    se_uso -> <empty>
Rule 50    bloque -> estatutos bloque
Rule 51    bloque -> empty
Rule 52    estatutos -> condicion E_END
Rule 53    estatutos -> ciclo E_END
Rule 54    estatutos -> lectura
Rule 55    estatutos -> escritura
Rule 56    estatutos -> asignacion
Rule 57    estatutos -> llamada
Rule 58    estatutos -> vars
Rule 59    ciclo -> while
Rule 60    ciclo -> for
Rule 61    condicion -> if
Rule 62    condicion -> switch
Rule 63    llamada -> ID LPAREN llamada1 RPAREN
Rule 64    llamada1 -> expresion
Rule 65    llamada1 -> empty
Rule 66    lectura -> RES_READ LPAREN tipo RPAREN
Rule 67    escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
Rule 68    cuadruplo_est_prnt -> <empty>
Rule 69    asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
Rule 70    cuadruplo_exp_8_asignacion -> <empty>
Rule 71    cuadruplo_exp_9_asignacion -> <empty>
Rule 72    seen_id_asignacion -> ID
Rule 73    insert_asignacion -> <empty>
Rule 74    asignacion1 -> exp
Rule 75    asignacion1 -> asignlist
Rule 76    asignacion1 -> asignarray
Rule 77    asignlist -> LCURLY asignlist1 RCURLY
Rule 78    asignlist1 -> cons
Rule 79    asignlist1 -> cons COMMA asignlist1
Rule 80    asignarray -> LBRACKET asignarray1 RBRACKET
Rule 81    asignarray1 -> cons
Rule 82    asignarray1 -> cons COMMA asignarray1
Rule 83    while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
Rule 84    cuadruplo_est_while_1 -> <empty>
Rule 85    cuadruplo_est_while_2 -> <empty>
Rule 86    cuadruplo_est_while_3 -> <empty>
Rule 87    for -> RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
Rule 88    sale_update -> <empty>
Rule 89    forexp -> asignacion cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 COL entra_update asignacion
Rule 90    entra_update -> <empty>
Rule 91    cuadruplo_est_for_1 -> <empty>
Rule 92    cuadruplo_est_for_2 -> <empty>
Rule 93    cuadruplo_est_for_3 -> <empty>
Rule 94    cuadruplo_est_for_4 -> <empty>
Rule 95    if -> RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
Rule 96    cuadruplo_est_if_1 -> <empty>
Rule 97    ifelse -> cuadruplo_est_if_else_2 RES_ELSE COL bloque cuadruplo_est_if_else_3
Rule 98    ifelse -> empty cuadruplo_est_if_2
Rule 99    cuadruplo_est_if_2 -> <empty>
Rule 100   cuadruplo_est_if_else_2 -> <empty>
Rule 101   cuadruplo_est_if_else_3 -> <empty>
Rule 102   switch -> RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
Rule 103   seen_exp_switch -> exp
Rule 104   switch2 -> RES_CASE seen_exp_case COL seen_case_3 bloque seen_case_4 switch2
Rule 105   switch2 -> empty
Rule 106   seen_case_3 -> <empty>
Rule 107   seen_case_4 -> <empty>
Rule 108   seen_exp_case -> exp
Rule 109   expresion -> exp expresion_1 cuadruplo_exp_9
Rule 110   expresion_1 -> see_rel cuadruplo_exp_8 exp
Rule 111   expresion_1 -> empty
Rule 112   see_rel -> MIN
Rule 113   see_rel -> MIN_EQ
Rule 114   see_rel -> MAY
Rule 115   see_rel -> MAY_EQ
Rule 116   see_rel -> DIF
Rule 117   see_rel -> EQ_EQ
Rule 118   cuadruplo_exp_8 -> <empty>
Rule 119   cuadruplo_exp_9 -> <empty>
Rule 120   exp -> termino cuadruplo_exp_4 exp1
Rule 121   exp1 -> see_operador_e cuadruplos_exp_2 exp
Rule 122   exp1 -> empty
Rule 123   see_operador_e -> PLUS
Rule 124   see_operador_e -> MINUS
Rule 125   cuadruplos_exp_2 -> <empty>
Rule 126   termino -> factor cuadruplo_exp_5 termino1
Rule 127   termino1 -> see_operador_f cuadruplos_exp_3 termino
Rule 128   termino1 -> empty
Rule 129   see_operador_f -> TIMES
Rule 130   see_operador_f -> DIVIDE
Rule 131   cuadruplos_exp_3 -> <empty>
Rule 132   cuadruplo_exp_4 -> <empty>
Rule 133   cuadruplo_exp_5 -> <empty>
Rule 134   factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
Rule 135   factor -> cons
Rule 136   factor -> PLUS cons
Rule 137   factor -> MINUS cons
Rule 138   cuadruplo_exp_6 -> <empty>
Rule 139   cuadruplo_exp_7 -> <empty>
Rule 140   cons -> seen_id_cons exp_1
Rule 141   cons -> seen_int_cons exp_cons_int
Rule 142   cons -> seen_float_cons exp_cons_float
Rule 143   cons -> seen_double_cons exp_cons_double
Rule 144   cons -> seen_string_cons exp_cons_string
Rule 145   cons -> seen_bool
Rule 146   cons -> consarray
Rule 147   cons -> conslist
Rule 148   seen_bool -> RES_TRUE
Rule 149   seen_bool -> RES_FALSE
Rule 150   seen_id_cons -> ID
Rule 151   seen_float_cons -> CTE_FLOAT
Rule 152   seen_double_cons -> CTE_DOUBLE
Rule 153   seen_string_cons -> CTE_STRING
Rule 154   seen_int_cons -> CTE_INT
Rule 155   exp_1 -> <empty>
Rule 156   exp_cons_int -> <empty>
Rule 157   exp_cons_float -> <empty>
Rule 158   exp_cons_double -> <empty>
Rule 159   exp_cons_string -> <empty>
Rule 160   main -> RES_START comienza_main COL bloque RES_END
Rule 161   comienza_main -> <empty>
Rule 162   consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons
Rule 163   conslist -> ID EQUALS LCURLY conslist1 RCURLY
Rule 164   conslist1 -> cons
Rule 165   conslist1 -> cons COMMA conslist1
Rule 166   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
COL                  : 28 44 48 83 87 89 89 95 97 102 104 160
COMMA                : 17 35 41 47 79 82 165
CTE_DOUBLE           : 152
CTE_FLOAT            : 151
CTE_INT              : 43 154 162
CTE_STRING           : 153
DIF                  : 116
DIVIDE               : 130
ENDI                 : 
EQUALS               : 33 69 162 163
EQ_EQ                : 117
E_END                : 52 53
ID                   : 14 16 30 35 37 43 63 72 150 162 163
LBRACKET             : 43 44 80 162
LCURLY               : 38 77 163
LPAREN               : 14 63 66 67 83 87 95 102 134
MAY                  : 114
MAY_EQ               : 115
MIN                  : 112
MINUS                : 124 137
MIN_EQ               : 113
NEW_LINE             : 
OR                   : 
PLUS                 : 123 136
RBRACKET             : 43 44 80 162
RCURLY               : 38 77 163
RES_ARRAY            : 43
RES_BOOLEAN          : 22
RES_CASE             : 104
RES_DEF              : 28
RES_DOUBLE           : 21
RES_ELIF             : 
RES_ELSE             : 97
RES_END              : 160
RES_FALSE            : 149
RES_FLOAT            : 20
RES_FOR              : 87
RES_FUNC             : 14
RES_IF               : 95
RES_INT              : 19
RES_LIST             : 37
RES_PRINT            : 67
RES_PROTO            : 5
RES_READ             : 66
RES_SET              : 
RES_START            : 160
RES_STRING           : 23
RES_SWITCH           : 102
RES_TRUE             : 148
RES_WHILE            : 83
RPAREN               : 14 63 66 67 83 87 95 102 134
TAB                  : 
TIMES                : 129
VAR                  : 
error                : 

Nonterminals, with rules where they appear

array                : 27
array1               : 43
array2               : 44 47
asignacion           : 56 89 89
asignacion1          : 69
asignarray           : 76
asignarray1          : 80 82
asignlist            : 75
asignlist1           : 77 79
bloque               : 48 50 83 87 95 97 104 160
ciclo                : 53
comienza_main        : 160
condicion            : 52
cons                 : 33 40 46 47 67 78 79 81 82 135 136 137 162 164 165
cons_loop            : 38 41
cons_loop_1          : 40
consarray            : 146
conslist             : 147
conslist1            : 163 165
cuadruplo_est_for_1  : 89
cuadruplo_est_for_2  : 89
cuadruplo_est_for_3  : 87
cuadruplo_est_for_4  : 
cuadruplo_est_if_1   : 95
cuadruplo_est_if_2   : 98
cuadruplo_est_if_else_2 : 97
cuadruplo_est_if_else_3 : 97
cuadruplo_est_prnt   : 67
cuadruplo_est_while_1 : 83
cuadruplo_est_while_2 : 83
cuadruplo_est_while_3 : 83
cuadruplo_exp_4      : 120
cuadruplo_exp_5      : 126
cuadruplo_exp_6      : 134
cuadruplo_exp_7      : 134
cuadruplo_exp_8      : 110
cuadruplo_exp_8_asignacion : 69
cuadruplo_exp_9      : 109
cuadruplo_exp_9_asignacion : 69
cuadruplos_exp_2     : 121
cuadruplos_exp_3     : 127
dato                 : 14 24 30 37 43
empty                : 2 6 9 13 18 32 36 39 42 45 51 65 98 105 111 122 128
entra_update         : 89
escritura            : 55
estatutos            : 50
estructura           : 25 29
exp                  : 74 103 108 109 110 121 134
exp1                 : 120
exp_1                : 140
exp_cons_double      : 143
exp_cons_float       : 142
exp_cons_int         : 141
exp_cons_string      : 144
expresion            : 64 83 89 95
expresion_1          : 109
factor               : 126
for                  : 60
forexp               : 87
generaglo            : 1
if                   : 61
ifelse               : 95
insert_asignacion    : 69
lectura              : 54
list                 : 26
list1                : 37
llamada              : 57
llamada1             : 63
main                 : 1
modulos              : 12
programa             : 0
programa1            : 1 5
programa2            : 1 8
programa3            : 1 1 12
prototipos           : 5 48
prototipos_1         : 14 17
prototipos_2         : 16
prueba               : 
sale_update          : 87
se_uso               : 48
see_operador_e       : 121
see_operador_f       : 127
see_rel              : 110
seen_bool            : 145
seen_case_3          : 104
seen_case_4          : 104
seen_dato            : 14
seen_double_cons     : 143
seen_exp_case        : 104
seen_exp_switch      : 102
seen_float_cons      : 142
seen_id_asignacion   : 69
seen_id_cons         : 140
seen_int_cons        : 141
seen_prototipo       : 5
seen_string_cons     : 144
switch               : 62
switch2              : 102 104
termino              : 120 127
termino1             : 126
tipo                 : 16 66
valida_entra_global  : 1
valida_salir_gobal   : 1
vars                 : 8 58
vars1                : 28 29 31
vars1_1              : 30
vars2                : 30
vars3                : 34 35
while                : 59

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 main programa3
    (2) programa -> . empty
    (5) programa1 -> . RES_PROTO prototipos seen_prototipo programa1
    (6) programa1 -> . empty
    (166) empty -> .

    RES_PROTO       shift and go to state 3
    $end            reduce using rule 166 (empty -> .)
    RES_DEF         reduce using rule 166 (empty -> .)
    RES_START       reduce using rule 166 (empty -> .)
    RES_FUNC        reduce using rule 166 (empty -> .)

    programa1                      shift and go to state 1
    programa                       shift and go to state 2
    empty                          shift and go to state 4

state 1

    (1) programa -> programa1 . valida_entra_global generaglo programa2 valida_salir_gobal programa3 main programa3
    (10) valida_entra_global -> .

    RES_DEF         reduce using rule 10 (valida_entra_global -> .)
    RES_START       reduce using rule 10 (valida_entra_global -> .)
    RES_FUNC        reduce using rule 10 (valida_entra_global -> .)

    valida_entra_global            shift and go to state 5

state 2

    (0) S' -> programa .



state 3

    (5) programa1 -> RES_PROTO . prototipos seen_prototipo programa1
    (14) prototipos -> . RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN

    RES_FUNC        shift and go to state 7

    prototipos                     shift and go to state 6

state 4

    (2) programa -> empty .
    (6) programa1 -> empty .

    $end            reduce using rule 2 (programa -> empty .)
    RES_DEF         reduce using rule 6 (programa1 -> empty .)
    RES_START       reduce using rule 6 (programa1 -> empty .)
    RES_FUNC        reduce using rule 6 (programa1 -> empty .)


state 5

    (1) programa -> programa1 valida_entra_global . generaglo programa2 valida_salir_gobal programa3 main programa3
    (4) generaglo -> .

    RES_DEF         reduce using rule 4 (generaglo -> .)
    RES_START       reduce using rule 4 (generaglo -> .)
    RES_FUNC        reduce using rule 4 (generaglo -> .)

    generaglo                      shift and go to state 8

state 6

    (5) programa1 -> RES_PROTO prototipos . seen_prototipo programa1
    (7) seen_prototipo -> .

    RES_PROTO       reduce using rule 7 (seen_prototipo -> .)
    RES_DEF         reduce using rule 7 (seen_prototipo -> .)
    RES_START       reduce using rule 7 (seen_prototipo -> .)
    RES_FUNC        reduce using rule 7 (seen_prototipo -> .)

    seen_prototipo                 shift and go to state 9

state 7

    (14) prototipos -> RES_FUNC . dato seen_dato ID LPAREN prototipos_1 RPAREN
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12

    dato                           shift and go to state 14

state 8

    (1) programa -> programa1 valida_entra_global generaglo . programa2 valida_salir_gobal programa3 main programa3
    (8) programa2 -> . vars programa2
    (9) programa2 -> . empty
    (28) vars -> . RES_DEF COL vars1
    (166) empty -> .

    RES_DEF         shift and go to state 18
    RES_START       reduce using rule 166 (empty -> .)
    RES_FUNC        reduce using rule 166 (empty -> .)

    vars                           shift and go to state 16
    programa2                      shift and go to state 17
    empty                          shift and go to state 19

state 9

    (5) programa1 -> RES_PROTO prototipos seen_prototipo . programa1
    (5) programa1 -> . RES_PROTO prototipos seen_prototipo programa1
    (6) programa1 -> . empty
    (166) empty -> .

    RES_PROTO       shift and go to state 3
    RES_DEF         reduce using rule 166 (empty -> .)
    RES_START       reduce using rule 166 (empty -> .)
    RES_FUNC        reduce using rule 166 (empty -> .)

    empty                          shift and go to state 20
    programa1                      shift and go to state 21

state 10

    (22) dato -> RES_BOOLEAN .

    ID              reduce using rule 22 (dato -> RES_BOOLEAN .)
    RPAREN          reduce using rule 22 (dato -> RES_BOOLEAN .)


state 11

    (19) dato -> RES_INT .

    ID              reduce using rule 19 (dato -> RES_INT .)
    RPAREN          reduce using rule 19 (dato -> RES_INT .)


state 12

    (23) dato -> RES_STRING .

    ID              reduce using rule 23 (dato -> RES_STRING .)
    RPAREN          reduce using rule 23 (dato -> RES_STRING .)


state 13

    (21) dato -> RES_DOUBLE .

    ID              reduce using rule 21 (dato -> RES_DOUBLE .)
    RPAREN          reduce using rule 21 (dato -> RES_DOUBLE .)


state 14

    (14) prototipos -> RES_FUNC dato . seen_dato ID LPAREN prototipos_1 RPAREN
    (15) seen_dato -> .

    ID              reduce using rule 15 (seen_dato -> .)

    seen_dato                      shift and go to state 22

state 15

    (20) dato -> RES_FLOAT .

    ID              reduce using rule 20 (dato -> RES_FLOAT .)
    RPAREN          reduce using rule 20 (dato -> RES_FLOAT .)


state 16

    (8) programa2 -> vars . programa2
    (8) programa2 -> . vars programa2
    (9) programa2 -> . empty
    (28) vars -> . RES_DEF COL vars1
    (166) empty -> .

    RES_DEF         shift and go to state 18
    RES_START       reduce using rule 166 (empty -> .)
    RES_FUNC        reduce using rule 166 (empty -> .)

    programa2                      shift and go to state 23
    empty                          shift and go to state 19
    vars                           shift and go to state 16

state 17

    (1) programa -> programa1 valida_entra_global generaglo programa2 . valida_salir_gobal programa3 main programa3
    (11) valida_salir_gobal -> .

    RES_START       reduce using rule 11 (valida_salir_gobal -> .)
    RES_FUNC        reduce using rule 11 (valida_salir_gobal -> .)

    valida_salir_gobal             shift and go to state 24

state 18

    (28) vars -> RES_DEF . COL vars1

    COL             shift and go to state 25


state 19

    (9) programa2 -> empty .

    RES_START       reduce using rule 9 (programa2 -> empty .)
    RES_FUNC        reduce using rule 9 (programa2 -> empty .)


state 20

    (6) programa1 -> empty .

    RES_DEF         reduce using rule 6 (programa1 -> empty .)
    RES_START       reduce using rule 6 (programa1 -> empty .)
    RES_FUNC        reduce using rule 6 (programa1 -> empty .)


state 21

    (5) programa1 -> RES_PROTO prototipos seen_prototipo programa1 .

    RES_DEF         reduce using rule 5 (programa1 -> RES_PROTO prototipos seen_prototipo programa1 .)
    RES_START       reduce using rule 5 (programa1 -> RES_PROTO prototipos seen_prototipo programa1 .)
    RES_FUNC        reduce using rule 5 (programa1 -> RES_PROTO prototipos seen_prototipo programa1 .)


state 22

    (14) prototipos -> RES_FUNC dato seen_dato . ID LPAREN prototipos_1 RPAREN

    ID              shift and go to state 26


state 23

    (8) programa2 -> vars programa2 .

    RES_START       reduce using rule 8 (programa2 -> vars programa2 .)
    RES_FUNC        reduce using rule 8 (programa2 -> vars programa2 .)


state 24

    (1) programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal . programa3 main programa3
    (12) programa3 -> . programa3 modulos
    (13) programa3 -> . empty
    (166) empty -> .

    RES_START       reduce using rule 166 (empty -> .)
    RES_FUNC        reduce using rule 166 (empty -> .)

    programa3                      shift and go to state 27
    empty                          shift and go to state 28

state 25

    (28) vars -> RES_DEF COL . vars1
    (29) vars1 -> . estructura vars1
    (30) vars1 -> . dato ID vars2 vars1_1
    (26) estructura -> . list
    (27) estructura -> . array
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    estructura                     shift and go to state 31
    list                           shift and go to state 34
    vars1                          shift and go to state 30
    dato                           shift and go to state 33
    array                          shift and go to state 29

state 26

    (14) prototipos -> RES_FUNC dato seen_dato ID . LPAREN prototipos_1 RPAREN

    LPAREN          shift and go to state 36


state 27

    (1) programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 . main programa3
    (12) programa3 -> programa3 . modulos
    (160) main -> . RES_START comienza_main COL bloque RES_END
    (48) modulos -> . prototipos se_uso COL bloque
    (14) prototipos -> . RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN

    RES_START       shift and go to state 38
    RES_FUNC        shift and go to state 7

    prototipos                     shift and go to state 37
    modulos                        shift and go to state 40
    main                           shift and go to state 39

state 28

    (13) programa3 -> empty .

    RES_FUNC        reduce using rule 13 (programa3 -> empty .)
    $end            reduce using rule 13 (programa3 -> empty .)
    RES_START       reduce using rule 13 (programa3 -> empty .)


state 29

    (27) estructura -> array .

    RPAREN          reduce using rule 27 (estructura -> array .)
    ID              reduce using rule 27 (estructura -> array .)
    RES_INT         reduce using rule 27 (estructura -> array .)
    RES_FLOAT       reduce using rule 27 (estructura -> array .)
    RES_DOUBLE      reduce using rule 27 (estructura -> array .)
    RES_BOOLEAN     reduce using rule 27 (estructura -> array .)
    RES_STRING      reduce using rule 27 (estructura -> array .)
    RES_LIST        reduce using rule 27 (estructura -> array .)
    RES_ARRAY       reduce using rule 27 (estructura -> array .)


state 30

    (28) vars -> RES_DEF COL vars1 .

    RES_READ        reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_PRINT       reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    ID              reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_DEF         reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_IF          reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_SWITCH      reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_WHILE       reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_FOR         reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_ELSE        reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    E_END           reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_START       reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_FUNC        reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    $end            reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_END         reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_CASE        reduce using rule 28 (vars -> RES_DEF COL vars1 .)


state 31

    (29) vars1 -> estructura . vars1
    (29) vars1 -> . estructura vars1
    (30) vars1 -> . dato ID vars2 vars1_1
    (26) estructura -> . list
    (27) estructura -> . array
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    list                           shift and go to state 34
    estructura                     shift and go to state 31
    dato                           shift and go to state 33
    vars1                          shift and go to state 41
    array                          shift and go to state 29

state 32

    (37) list -> RES_LIST . dato ID list1
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12

    dato                           shift and go to state 42

state 33

    (30) vars1 -> dato . ID vars2 vars1_1

    ID              shift and go to state 43


state 34

    (26) estructura -> list .

    RPAREN          reduce using rule 26 (estructura -> list .)
    ID              reduce using rule 26 (estructura -> list .)
    RES_INT         reduce using rule 26 (estructura -> list .)
    RES_FLOAT       reduce using rule 26 (estructura -> list .)
    RES_DOUBLE      reduce using rule 26 (estructura -> list .)
    RES_BOOLEAN     reduce using rule 26 (estructura -> list .)
    RES_STRING      reduce using rule 26 (estructura -> list .)
    RES_LIST        reduce using rule 26 (estructura -> list .)
    RES_ARRAY       reduce using rule 26 (estructura -> list .)


state 35

    (43) array -> RES_ARRAY . dato ID LBRACKET CTE_INT RBRACKET array1
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12

    dato                           shift and go to state 44

state 36

    (14) prototipos -> RES_FUNC dato seen_dato ID LPAREN . prototipos_1 RPAREN
    (16) prototipos_1 -> . tipo ID prototipos_2
    (24) tipo -> . dato
    (25) tipo -> . estructura
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (26) estructura -> . list
    (27) estructura -> . array
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    tipo                           shift and go to state 46
    prototipos_1                   shift and go to state 45
    list                           shift and go to state 34
    estructura                     shift and go to state 47
    dato                           shift and go to state 48
    array                          shift and go to state 29

state 37

    (48) modulos -> prototipos . se_uso COL bloque
    (49) se_uso -> .

    COL             reduce using rule 49 (se_uso -> .)

    se_uso                         shift and go to state 49

state 38

    (160) main -> RES_START . comienza_main COL bloque RES_END
    (161) comienza_main -> .

    COL             reduce using rule 161 (comienza_main -> .)

    comienza_main                  shift and go to state 50

state 39

    (1) programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 main . programa3
    (12) programa3 -> . programa3 modulos
    (13) programa3 -> . empty
    (166) empty -> .

    RES_FUNC        reduce using rule 166 (empty -> .)
    $end            reduce using rule 166 (empty -> .)

    programa3                      shift and go to state 51
    empty                          shift and go to state 28

state 40

    (12) programa3 -> programa3 modulos .

    RES_FUNC        reduce using rule 12 (programa3 -> programa3 modulos .)
    $end            reduce using rule 12 (programa3 -> programa3 modulos .)
    RES_START       reduce using rule 12 (programa3 -> programa3 modulos .)


state 41

    (29) vars1 -> estructura vars1 .

    RES_DEF         reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_START       reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_FUNC        reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_READ        reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_PRINT       reduce using rule 29 (vars1 -> estructura vars1 .)
    ID              reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_IF          reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_SWITCH      reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_WHILE       reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_FOR         reduce using rule 29 (vars1 -> estructura vars1 .)
    $end            reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_END         reduce using rule 29 (vars1 -> estructura vars1 .)
    E_END           reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_ELSE        reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_CASE        reduce using rule 29 (vars1 -> estructura vars1 .)


state 42

    (37) list -> RES_LIST dato . ID list1

    ID              shift and go to state 52


state 43

    (30) vars1 -> dato ID . vars2 vars1_1
    (33) vars2 -> . EQUALS cons
    (34) vars2 -> . vars3
    (35) vars3 -> . COMMA ID vars3
    (36) vars3 -> . empty
    (166) empty -> .

    EQUALS          shift and go to state 53
    COMMA           shift and go to state 56
    RES_INT         reduce using rule 166 (empty -> .)
    RES_FLOAT       reduce using rule 166 (empty -> .)
    RES_DOUBLE      reduce using rule 166 (empty -> .)
    RES_BOOLEAN     reduce using rule 166 (empty -> .)
    RES_STRING      reduce using rule 166 (empty -> .)
    RES_LIST        reduce using rule 166 (empty -> .)
    RES_ARRAY       reduce using rule 166 (empty -> .)
    RES_DEF         reduce using rule 166 (empty -> .)
    RES_START       reduce using rule 166 (empty -> .)
    RES_FUNC        reduce using rule 166 (empty -> .)
    RES_READ        reduce using rule 166 (empty -> .)
    RES_PRINT       reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    RES_IF          reduce using rule 166 (empty -> .)
    RES_SWITCH      reduce using rule 166 (empty -> .)
    RES_WHILE       reduce using rule 166 (empty -> .)
    RES_FOR         reduce using rule 166 (empty -> .)
    $end            reduce using rule 166 (empty -> .)
    RES_END         reduce using rule 166 (empty -> .)
    E_END           reduce using rule 166 (empty -> .)
    RES_ELSE        reduce using rule 166 (empty -> .)
    RES_CASE        reduce using rule 166 (empty -> .)

    vars3                          shift and go to state 54
    vars2                          shift and go to state 55
    empty                          shift and go to state 57

state 44

    (43) array -> RES_ARRAY dato . ID LBRACKET CTE_INT RBRACKET array1

    ID              shift and go to state 58


state 45

    (14) prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 . RPAREN

    RPAREN          shift and go to state 59


state 46

    (16) prototipos_1 -> tipo . ID prototipos_2

    ID              shift and go to state 60


state 47

    (25) tipo -> estructura .

    ID              reduce using rule 25 (tipo -> estructura .)
    RPAREN          reduce using rule 25 (tipo -> estructura .)


state 48

    (24) tipo -> dato .

    ID              reduce using rule 24 (tipo -> dato .)
    RPAREN          reduce using rule 24 (tipo -> dato .)


state 49

    (48) modulos -> prototipos se_uso . COL bloque

    COL             shift and go to state 61


state 50

    (160) main -> RES_START comienza_main . COL bloque RES_END

    COL             shift and go to state 62


state 51

    (1) programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 main programa3 .
    (12) programa3 -> programa3 . modulos
    (48) modulos -> . prototipos se_uso COL bloque
    (14) prototipos -> . RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN

    $end            reduce using rule 1 (programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 main programa3 .)
    RES_FUNC        shift and go to state 7

    prototipos                     shift and go to state 37
    modulos                        shift and go to state 40

state 52

    (37) list -> RES_LIST dato ID . list1
    (38) list1 -> . LCURLY cons_loop RCURLY
    (39) list1 -> . empty
    (166) empty -> .

    LCURLY          shift and go to state 64
    RES_INT         reduce using rule 166 (empty -> .)
    RES_FLOAT       reduce using rule 166 (empty -> .)
    RES_DOUBLE      reduce using rule 166 (empty -> .)
    RES_BOOLEAN     reduce using rule 166 (empty -> .)
    RES_STRING      reduce using rule 166 (empty -> .)
    RES_LIST        reduce using rule 166 (empty -> .)
    RES_ARRAY       reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)

    list1                          shift and go to state 63
    empty                          shift and go to state 65

state 53

    (33) vars2 -> EQUALS . cons
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    seen_int_cons                  shift and go to state 77
    seen_double_cons               shift and go to state 73
    cons                           shift and go to state 66
    seen_string_cons               shift and go to state 68
    seen_bool                      shift and go to state 67
    seen_float_cons                shift and go to state 69
    consarray                      shift and go to state 79
    conslist                       shift and go to state 78
    seen_id_cons                   shift and go to state 70

state 54

    (34) vars2 -> vars3 .

    RES_INT         reduce using rule 34 (vars2 -> vars3 .)
    RES_FLOAT       reduce using rule 34 (vars2 -> vars3 .)
    RES_DOUBLE      reduce using rule 34 (vars2 -> vars3 .)
    RES_BOOLEAN     reduce using rule 34 (vars2 -> vars3 .)
    RES_STRING      reduce using rule 34 (vars2 -> vars3 .)
    RES_LIST        reduce using rule 34 (vars2 -> vars3 .)
    RES_ARRAY       reduce using rule 34 (vars2 -> vars3 .)
    RES_DEF         reduce using rule 34 (vars2 -> vars3 .)
    RES_START       reduce using rule 34 (vars2 -> vars3 .)
    RES_FUNC        reduce using rule 34 (vars2 -> vars3 .)
    RES_READ        reduce using rule 34 (vars2 -> vars3 .)
    RES_PRINT       reduce using rule 34 (vars2 -> vars3 .)
    ID              reduce using rule 34 (vars2 -> vars3 .)
    RES_IF          reduce using rule 34 (vars2 -> vars3 .)
    RES_SWITCH      reduce using rule 34 (vars2 -> vars3 .)
    RES_WHILE       reduce using rule 34 (vars2 -> vars3 .)
    RES_FOR         reduce using rule 34 (vars2 -> vars3 .)
    $end            reduce using rule 34 (vars2 -> vars3 .)
    RES_END         reduce using rule 34 (vars2 -> vars3 .)
    E_END           reduce using rule 34 (vars2 -> vars3 .)
    RES_ELSE        reduce using rule 34 (vars2 -> vars3 .)
    RES_CASE        reduce using rule 34 (vars2 -> vars3 .)


state 55

    (30) vars1 -> dato ID vars2 . vars1_1
    (31) vars1_1 -> . vars1
    (32) vars1_1 -> . empty
    (29) vars1 -> . estructura vars1
    (30) vars1 -> . dato ID vars2 vars1_1
    (166) empty -> .
    (26) estructura -> . list
    (27) estructura -> . array
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_DEF         reduce using rule 166 (empty -> .)
    RES_START       reduce using rule 166 (empty -> .)
    RES_FUNC        reduce using rule 166 (empty -> .)
    RES_READ        reduce using rule 166 (empty -> .)
    RES_PRINT       reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    RES_IF          reduce using rule 166 (empty -> .)
    RES_SWITCH      reduce using rule 166 (empty -> .)
    RES_WHILE       reduce using rule 166 (empty -> .)
    RES_FOR         reduce using rule 166 (empty -> .)
    $end            reduce using rule 166 (empty -> .)
    RES_END         reduce using rule 166 (empty -> .)
    E_END           reduce using rule 166 (empty -> .)
    RES_ELSE        reduce using rule 166 (empty -> .)
    RES_CASE        reduce using rule 166 (empty -> .)
    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    list                           shift and go to state 34
    estructura                     shift and go to state 31
    dato                           shift and go to state 33
    vars1                          shift and go to state 82
    vars1_1                        shift and go to state 83
    array                          shift and go to state 29
    empty                          shift and go to state 84

state 56

    (35) vars3 -> COMMA . ID vars3

    ID              shift and go to state 85


state 57

    (36) vars3 -> empty .

    RES_INT         reduce using rule 36 (vars3 -> empty .)
    RES_FLOAT       reduce using rule 36 (vars3 -> empty .)
    RES_DOUBLE      reduce using rule 36 (vars3 -> empty .)
    RES_BOOLEAN     reduce using rule 36 (vars3 -> empty .)
    RES_STRING      reduce using rule 36 (vars3 -> empty .)
    RES_LIST        reduce using rule 36 (vars3 -> empty .)
    RES_ARRAY       reduce using rule 36 (vars3 -> empty .)
    RES_DEF         reduce using rule 36 (vars3 -> empty .)
    RES_START       reduce using rule 36 (vars3 -> empty .)
    RES_FUNC        reduce using rule 36 (vars3 -> empty .)
    RES_READ        reduce using rule 36 (vars3 -> empty .)
    RES_PRINT       reduce using rule 36 (vars3 -> empty .)
    ID              reduce using rule 36 (vars3 -> empty .)
    RES_IF          reduce using rule 36 (vars3 -> empty .)
    RES_SWITCH      reduce using rule 36 (vars3 -> empty .)
    RES_WHILE       reduce using rule 36 (vars3 -> empty .)
    RES_FOR         reduce using rule 36 (vars3 -> empty .)
    $end            reduce using rule 36 (vars3 -> empty .)
    RES_END         reduce using rule 36 (vars3 -> empty .)
    E_END           reduce using rule 36 (vars3 -> empty .)
    RES_ELSE        reduce using rule 36 (vars3 -> empty .)
    RES_CASE        reduce using rule 36 (vars3 -> empty .)


state 58

    (43) array -> RES_ARRAY dato ID . LBRACKET CTE_INT RBRACKET array1

    LBRACKET        shift and go to state 86


state 59

    (14) prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .

    COL             reduce using rule 14 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_PROTO       reduce using rule 14 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_DEF         reduce using rule 14 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_START       reduce using rule 14 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_FUNC        reduce using rule 14 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)


state 60

    (16) prototipos_1 -> tipo ID . prototipos_2
    (17) prototipos_2 -> . COMMA prototipos_1
    (18) prototipos_2 -> . empty
    (166) empty -> .

    COMMA           shift and go to state 88
    RPAREN          reduce using rule 166 (empty -> .)

    prototipos_2                   shift and go to state 87
    empty                          shift and go to state 89

state 61

    (48) modulos -> prototipos se_uso COL . bloque
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (166) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (69) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (95) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (102) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (83) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (87) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (72) seen_id_asignacion -> . ID

    RES_START       reduce using rule 166 (empty -> .)
    RES_FUNC        reduce using rule 166 (empty -> .)
    $end            reduce using rule 166 (empty -> .)
    RES_READ        shift and go to state 107
    RES_PRINT       shift and go to state 101
    ID              shift and go to state 106
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 93
    RES_SWITCH      shift and go to state 109
    RES_WHILE       shift and go to state 105
    RES_FOR         shift and go to state 91

    vars                           shift and go to state 90
    bloque                         shift and go to state 92
    if                             shift and go to state 94
    ciclo                          shift and go to state 95
    seen_id_asignacion             shift and go to state 96
    switch                         shift and go to state 97
    llamada                        shift and go to state 99
    condicion                      shift and go to state 100
    lectura                        shift and go to state 102
    empty                          shift and go to state 103
    estatutos                      shift and go to state 104
    for                            shift and go to state 98
    asignacion                     shift and go to state 108
    while                          shift and go to state 110
    escritura                      shift and go to state 111

state 62

    (160) main -> RES_START comienza_main COL . bloque RES_END
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (166) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (69) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (95) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (102) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (83) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (87) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (72) seen_id_asignacion -> . ID

    RES_END         reduce using rule 166 (empty -> .)
    RES_READ        shift and go to state 107
    RES_PRINT       shift and go to state 101
    ID              shift and go to state 106
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 93
    RES_SWITCH      shift and go to state 109
    RES_WHILE       shift and go to state 105
    RES_FOR         shift and go to state 91

    vars                           shift and go to state 90
    bloque                         shift and go to state 112
    if                             shift and go to state 94
    ciclo                          shift and go to state 95
    seen_id_asignacion             shift and go to state 96
    switch                         shift and go to state 97
    llamada                        shift and go to state 99
    condicion                      shift and go to state 100
    lectura                        shift and go to state 102
    empty                          shift and go to state 103
    estatutos                      shift and go to state 104
    for                            shift and go to state 98
    asignacion                     shift and go to state 108
    while                          shift and go to state 110
    escritura                      shift and go to state 111

state 63

    (37) list -> RES_LIST dato ID list1 .

    ID              reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_INT         reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_FLOAT       reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_DOUBLE      reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_BOOLEAN     reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_STRING      reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_LIST        reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_ARRAY       reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RPAREN          reduce using rule 37 (list -> RES_LIST dato ID list1 .)


state 64

    (38) list1 -> LCURLY . cons_loop RCURLY
    (40) cons_loop -> . cons cons_loop_1
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    seen_int_cons                  shift and go to state 77
    seen_double_cons               shift and go to state 73
    cons                           shift and go to state 113
    seen_string_cons               shift and go to state 68
    seen_bool                      shift and go to state 67
    seen_float_cons                shift and go to state 69
    consarray                      shift and go to state 79
    conslist                       shift and go to state 78
    cons_loop                      shift and go to state 114
    seen_id_cons                   shift and go to state 70

state 65

    (39) list1 -> empty .

    RES_INT         reduce using rule 39 (list1 -> empty .)
    RES_FLOAT       reduce using rule 39 (list1 -> empty .)
    RES_DOUBLE      reduce using rule 39 (list1 -> empty .)
    RES_BOOLEAN     reduce using rule 39 (list1 -> empty .)
    RES_STRING      reduce using rule 39 (list1 -> empty .)
    RES_LIST        reduce using rule 39 (list1 -> empty .)
    RES_ARRAY       reduce using rule 39 (list1 -> empty .)
    ID              reduce using rule 39 (list1 -> empty .)
    RPAREN          reduce using rule 39 (list1 -> empty .)


state 66

    (33) vars2 -> EQUALS cons .

    RES_INT         reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_FLOAT       reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_DOUBLE      reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_BOOLEAN     reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_STRING      reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_LIST        reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_ARRAY       reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_DEF         reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_START       reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_FUNC        reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_READ        reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_PRINT       reduce using rule 33 (vars2 -> EQUALS cons .)
    ID              reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_IF          reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_SWITCH      reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_WHILE       reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_FOR         reduce using rule 33 (vars2 -> EQUALS cons .)
    $end            reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_END         reduce using rule 33 (vars2 -> EQUALS cons .)
    E_END           reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_ELSE        reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_CASE        reduce using rule 33 (vars2 -> EQUALS cons .)


state 67

    (145) cons -> seen_bool .

    TIMES           reduce using rule 145 (cons -> seen_bool .)
    DIVIDE          reduce using rule 145 (cons -> seen_bool .)
    PLUS            reduce using rule 145 (cons -> seen_bool .)
    MINUS           reduce using rule 145 (cons -> seen_bool .)
    MIN             reduce using rule 145 (cons -> seen_bool .)
    MIN_EQ          reduce using rule 145 (cons -> seen_bool .)
    MAY             reduce using rule 145 (cons -> seen_bool .)
    MAY_EQ          reduce using rule 145 (cons -> seen_bool .)
    DIF             reduce using rule 145 (cons -> seen_bool .)
    EQ_EQ           reduce using rule 145 (cons -> seen_bool .)
    RPAREN          reduce using rule 145 (cons -> seen_bool .)
    RES_READ        reduce using rule 145 (cons -> seen_bool .)
    RES_PRINT       reduce using rule 145 (cons -> seen_bool .)
    ID              reduce using rule 145 (cons -> seen_bool .)
    RES_DEF         reduce using rule 145 (cons -> seen_bool .)
    RES_IF          reduce using rule 145 (cons -> seen_bool .)
    RES_SWITCH      reduce using rule 145 (cons -> seen_bool .)
    RES_WHILE       reduce using rule 145 (cons -> seen_bool .)
    RES_FOR         reduce using rule 145 (cons -> seen_bool .)
    RES_START       reduce using rule 145 (cons -> seen_bool .)
    RES_FUNC        reduce using rule 145 (cons -> seen_bool .)
    $end            reduce using rule 145 (cons -> seen_bool .)
    RES_END         reduce using rule 145 (cons -> seen_bool .)
    E_END           reduce using rule 145 (cons -> seen_bool .)
    RES_ELSE        reduce using rule 145 (cons -> seen_bool .)
    RES_CASE        reduce using rule 145 (cons -> seen_bool .)
    COL             reduce using rule 145 (cons -> seen_bool .)
    COMMA           reduce using rule 145 (cons -> seen_bool .)
    RCURLY          reduce using rule 145 (cons -> seen_bool .)
    RES_INT         reduce using rule 145 (cons -> seen_bool .)
    RES_FLOAT       reduce using rule 145 (cons -> seen_bool .)
    RES_DOUBLE      reduce using rule 145 (cons -> seen_bool .)
    RES_BOOLEAN     reduce using rule 145 (cons -> seen_bool .)
    RES_STRING      reduce using rule 145 (cons -> seen_bool .)
    RES_LIST        reduce using rule 145 (cons -> seen_bool .)
    RES_ARRAY       reduce using rule 145 (cons -> seen_bool .)
    RBRACKET        reduce using rule 145 (cons -> seen_bool .)


state 68

    (144) cons -> seen_string_cons . exp_cons_string
    (159) exp_cons_string -> .

    RES_INT         reduce using rule 159 (exp_cons_string -> .)
    RES_FLOAT       reduce using rule 159 (exp_cons_string -> .)
    RES_DOUBLE      reduce using rule 159 (exp_cons_string -> .)
    RES_BOOLEAN     reduce using rule 159 (exp_cons_string -> .)
    RES_STRING      reduce using rule 159 (exp_cons_string -> .)
    RES_LIST        reduce using rule 159 (exp_cons_string -> .)
    RES_ARRAY       reduce using rule 159 (exp_cons_string -> .)
    RES_DEF         reduce using rule 159 (exp_cons_string -> .)
    RES_START       reduce using rule 159 (exp_cons_string -> .)
    RES_FUNC        reduce using rule 159 (exp_cons_string -> .)
    RES_READ        reduce using rule 159 (exp_cons_string -> .)
    RES_PRINT       reduce using rule 159 (exp_cons_string -> .)
    ID              reduce using rule 159 (exp_cons_string -> .)
    RES_IF          reduce using rule 159 (exp_cons_string -> .)
    RES_SWITCH      reduce using rule 159 (exp_cons_string -> .)
    RES_WHILE       reduce using rule 159 (exp_cons_string -> .)
    RES_FOR         reduce using rule 159 (exp_cons_string -> .)
    $end            reduce using rule 159 (exp_cons_string -> .)
    RES_END         reduce using rule 159 (exp_cons_string -> .)
    E_END           reduce using rule 159 (exp_cons_string -> .)
    RES_ELSE        reduce using rule 159 (exp_cons_string -> .)
    RES_CASE        reduce using rule 159 (exp_cons_string -> .)
    COMMA           reduce using rule 159 (exp_cons_string -> .)
    RCURLY          reduce using rule 159 (exp_cons_string -> .)
    TIMES           reduce using rule 159 (exp_cons_string -> .)
    DIVIDE          reduce using rule 159 (exp_cons_string -> .)
    PLUS            reduce using rule 159 (exp_cons_string -> .)
    MINUS           reduce using rule 159 (exp_cons_string -> .)
    MIN             reduce using rule 159 (exp_cons_string -> .)
    MIN_EQ          reduce using rule 159 (exp_cons_string -> .)
    MAY             reduce using rule 159 (exp_cons_string -> .)
    MAY_EQ          reduce using rule 159 (exp_cons_string -> .)
    DIF             reduce using rule 159 (exp_cons_string -> .)
    EQ_EQ           reduce using rule 159 (exp_cons_string -> .)
    RPAREN          reduce using rule 159 (exp_cons_string -> .)
    COL             reduce using rule 159 (exp_cons_string -> .)
    RBRACKET        reduce using rule 159 (exp_cons_string -> .)

    exp_cons_string                shift and go to state 115

state 69

    (142) cons -> seen_float_cons . exp_cons_float
    (157) exp_cons_float -> .

    RES_INT         reduce using rule 157 (exp_cons_float -> .)
    RES_FLOAT       reduce using rule 157 (exp_cons_float -> .)
    RES_DOUBLE      reduce using rule 157 (exp_cons_float -> .)
    RES_BOOLEAN     reduce using rule 157 (exp_cons_float -> .)
    RES_STRING      reduce using rule 157 (exp_cons_float -> .)
    RES_LIST        reduce using rule 157 (exp_cons_float -> .)
    RES_ARRAY       reduce using rule 157 (exp_cons_float -> .)
    RES_DEF         reduce using rule 157 (exp_cons_float -> .)
    RES_START       reduce using rule 157 (exp_cons_float -> .)
    RES_FUNC        reduce using rule 157 (exp_cons_float -> .)
    RES_READ        reduce using rule 157 (exp_cons_float -> .)
    RES_PRINT       reduce using rule 157 (exp_cons_float -> .)
    ID              reduce using rule 157 (exp_cons_float -> .)
    RES_IF          reduce using rule 157 (exp_cons_float -> .)
    RES_SWITCH      reduce using rule 157 (exp_cons_float -> .)
    RES_WHILE       reduce using rule 157 (exp_cons_float -> .)
    RES_FOR         reduce using rule 157 (exp_cons_float -> .)
    $end            reduce using rule 157 (exp_cons_float -> .)
    RES_END         reduce using rule 157 (exp_cons_float -> .)
    E_END           reduce using rule 157 (exp_cons_float -> .)
    RES_ELSE        reduce using rule 157 (exp_cons_float -> .)
    RES_CASE        reduce using rule 157 (exp_cons_float -> .)
    COMMA           reduce using rule 157 (exp_cons_float -> .)
    RCURLY          reduce using rule 157 (exp_cons_float -> .)
    TIMES           reduce using rule 157 (exp_cons_float -> .)
    DIVIDE          reduce using rule 157 (exp_cons_float -> .)
    PLUS            reduce using rule 157 (exp_cons_float -> .)
    MINUS           reduce using rule 157 (exp_cons_float -> .)
    MIN             reduce using rule 157 (exp_cons_float -> .)
    MIN_EQ          reduce using rule 157 (exp_cons_float -> .)
    MAY             reduce using rule 157 (exp_cons_float -> .)
    MAY_EQ          reduce using rule 157 (exp_cons_float -> .)
    DIF             reduce using rule 157 (exp_cons_float -> .)
    EQ_EQ           reduce using rule 157 (exp_cons_float -> .)
    RPAREN          reduce using rule 157 (exp_cons_float -> .)
    COL             reduce using rule 157 (exp_cons_float -> .)
    RBRACKET        reduce using rule 157 (exp_cons_float -> .)

    exp_cons_float                 shift and go to state 116

state 70

    (140) cons -> seen_id_cons . exp_1
    (155) exp_1 -> .

    RES_INT         reduce using rule 155 (exp_1 -> .)
    RES_FLOAT       reduce using rule 155 (exp_1 -> .)
    RES_DOUBLE      reduce using rule 155 (exp_1 -> .)
    RES_BOOLEAN     reduce using rule 155 (exp_1 -> .)
    RES_STRING      reduce using rule 155 (exp_1 -> .)
    RES_LIST        reduce using rule 155 (exp_1 -> .)
    RES_ARRAY       reduce using rule 155 (exp_1 -> .)
    RES_DEF         reduce using rule 155 (exp_1 -> .)
    RES_START       reduce using rule 155 (exp_1 -> .)
    RES_FUNC        reduce using rule 155 (exp_1 -> .)
    RES_READ        reduce using rule 155 (exp_1 -> .)
    RES_PRINT       reduce using rule 155 (exp_1 -> .)
    ID              reduce using rule 155 (exp_1 -> .)
    RES_IF          reduce using rule 155 (exp_1 -> .)
    RES_SWITCH      reduce using rule 155 (exp_1 -> .)
    RES_WHILE       reduce using rule 155 (exp_1 -> .)
    RES_FOR         reduce using rule 155 (exp_1 -> .)
    $end            reduce using rule 155 (exp_1 -> .)
    RES_END         reduce using rule 155 (exp_1 -> .)
    E_END           reduce using rule 155 (exp_1 -> .)
    RES_ELSE        reduce using rule 155 (exp_1 -> .)
    RES_CASE        reduce using rule 155 (exp_1 -> .)
    COMMA           reduce using rule 155 (exp_1 -> .)
    RCURLY          reduce using rule 155 (exp_1 -> .)
    TIMES           reduce using rule 155 (exp_1 -> .)
    DIVIDE          reduce using rule 155 (exp_1 -> .)
    PLUS            reduce using rule 155 (exp_1 -> .)
    MINUS           reduce using rule 155 (exp_1 -> .)
    MIN             reduce using rule 155 (exp_1 -> .)
    MIN_EQ          reduce using rule 155 (exp_1 -> .)
    MAY             reduce using rule 155 (exp_1 -> .)
    MAY_EQ          reduce using rule 155 (exp_1 -> .)
    DIF             reduce using rule 155 (exp_1 -> .)
    EQ_EQ           reduce using rule 155 (exp_1 -> .)
    RPAREN          reduce using rule 155 (exp_1 -> .)
    COL             reduce using rule 155 (exp_1 -> .)
    RBRACKET        reduce using rule 155 (exp_1 -> .)

    exp_1                          shift and go to state 117

state 71

    (148) seen_bool -> RES_TRUE .

    TIMES           reduce using rule 148 (seen_bool -> RES_TRUE .)
    DIVIDE          reduce using rule 148 (seen_bool -> RES_TRUE .)
    PLUS            reduce using rule 148 (seen_bool -> RES_TRUE .)
    MINUS           reduce using rule 148 (seen_bool -> RES_TRUE .)
    MIN             reduce using rule 148 (seen_bool -> RES_TRUE .)
    MIN_EQ          reduce using rule 148 (seen_bool -> RES_TRUE .)
    MAY             reduce using rule 148 (seen_bool -> RES_TRUE .)
    MAY_EQ          reduce using rule 148 (seen_bool -> RES_TRUE .)
    DIF             reduce using rule 148 (seen_bool -> RES_TRUE .)
    EQ_EQ           reduce using rule 148 (seen_bool -> RES_TRUE .)
    RPAREN          reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_READ        reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_PRINT       reduce using rule 148 (seen_bool -> RES_TRUE .)
    ID              reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_DEF         reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_IF          reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_SWITCH      reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_WHILE       reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_FOR         reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_START       reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_FUNC        reduce using rule 148 (seen_bool -> RES_TRUE .)
    $end            reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_END         reduce using rule 148 (seen_bool -> RES_TRUE .)
    E_END           reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_ELSE        reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_CASE        reduce using rule 148 (seen_bool -> RES_TRUE .)
    COL             reduce using rule 148 (seen_bool -> RES_TRUE .)
    COMMA           reduce using rule 148 (seen_bool -> RES_TRUE .)
    RCURLY          reduce using rule 148 (seen_bool -> RES_TRUE .)
    RBRACKET        reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_INT         reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_FLOAT       reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_DOUBLE      reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_BOOLEAN     reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_STRING      reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_LIST        reduce using rule 148 (seen_bool -> RES_TRUE .)
    RES_ARRAY       reduce using rule 148 (seen_bool -> RES_TRUE .)


state 72

    (153) seen_string_cons -> CTE_STRING .

    RES_INT         reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_FLOAT       reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_DOUBLE      reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_BOOLEAN     reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_STRING      reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_LIST        reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_ARRAY       reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_DEF         reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_START       reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_FUNC        reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_READ        reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_PRINT       reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    ID              reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_IF          reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_SWITCH      reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_WHILE       reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_FOR         reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    $end            reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_END         reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    E_END           reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_ELSE        reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RES_CASE        reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    TIMES           reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    DIVIDE          reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    PLUS            reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    MINUS           reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    MIN             reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    MIN_EQ          reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    MAY             reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    MAY_EQ          reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    DIF             reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    EQ_EQ           reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RPAREN          reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    COL             reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    COMMA           reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RCURLY          reduce using rule 153 (seen_string_cons -> CTE_STRING .)
    RBRACKET        reduce using rule 153 (seen_string_cons -> CTE_STRING .)


state 73

    (143) cons -> seen_double_cons . exp_cons_double
    (158) exp_cons_double -> .

    RES_INT         reduce using rule 158 (exp_cons_double -> .)
    RES_FLOAT       reduce using rule 158 (exp_cons_double -> .)
    RES_DOUBLE      reduce using rule 158 (exp_cons_double -> .)
    RES_BOOLEAN     reduce using rule 158 (exp_cons_double -> .)
    RES_STRING      reduce using rule 158 (exp_cons_double -> .)
    RES_LIST        reduce using rule 158 (exp_cons_double -> .)
    RES_ARRAY       reduce using rule 158 (exp_cons_double -> .)
    RES_DEF         reduce using rule 158 (exp_cons_double -> .)
    RES_START       reduce using rule 158 (exp_cons_double -> .)
    RES_FUNC        reduce using rule 158 (exp_cons_double -> .)
    RES_READ        reduce using rule 158 (exp_cons_double -> .)
    RES_PRINT       reduce using rule 158 (exp_cons_double -> .)
    ID              reduce using rule 158 (exp_cons_double -> .)
    RES_IF          reduce using rule 158 (exp_cons_double -> .)
    RES_SWITCH      reduce using rule 158 (exp_cons_double -> .)
    RES_WHILE       reduce using rule 158 (exp_cons_double -> .)
    RES_FOR         reduce using rule 158 (exp_cons_double -> .)
    $end            reduce using rule 158 (exp_cons_double -> .)
    RES_END         reduce using rule 158 (exp_cons_double -> .)
    E_END           reduce using rule 158 (exp_cons_double -> .)
    RES_ELSE        reduce using rule 158 (exp_cons_double -> .)
    RES_CASE        reduce using rule 158 (exp_cons_double -> .)
    COMMA           reduce using rule 158 (exp_cons_double -> .)
    RCURLY          reduce using rule 158 (exp_cons_double -> .)
    TIMES           reduce using rule 158 (exp_cons_double -> .)
    DIVIDE          reduce using rule 158 (exp_cons_double -> .)
    PLUS            reduce using rule 158 (exp_cons_double -> .)
    MINUS           reduce using rule 158 (exp_cons_double -> .)
    MIN             reduce using rule 158 (exp_cons_double -> .)
    MIN_EQ          reduce using rule 158 (exp_cons_double -> .)
    MAY             reduce using rule 158 (exp_cons_double -> .)
    MAY_EQ          reduce using rule 158 (exp_cons_double -> .)
    DIF             reduce using rule 158 (exp_cons_double -> .)
    EQ_EQ           reduce using rule 158 (exp_cons_double -> .)
    RPAREN          reduce using rule 158 (exp_cons_double -> .)
    COL             reduce using rule 158 (exp_cons_double -> .)
    RBRACKET        reduce using rule 158 (exp_cons_double -> .)

    exp_cons_double                shift and go to state 118

state 74

    (152) seen_double_cons -> CTE_DOUBLE .

    COMMA           reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RCURLY          reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RPAREN          reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    TIMES           reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    DIVIDE          reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    PLUS            reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    MINUS           reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    COL             reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_INT         reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_FLOAT       reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_DOUBLE      reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_BOOLEAN     reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_STRING      reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_LIST        reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_ARRAY       reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_DEF         reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_START       reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_FUNC        reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_READ        reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_PRINT       reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    ID              reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_IF          reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_SWITCH      reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_WHILE       reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_FOR         reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    $end            reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_END         reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    E_END           reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_ELSE        reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RES_CASE        reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    MIN             reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    MIN_EQ          reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    MAY             reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    MAY_EQ          reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    DIF             reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    EQ_EQ           reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)
    RBRACKET        reduce using rule 152 (seen_double_cons -> CTE_DOUBLE .)


state 75

    (154) seen_int_cons -> CTE_INT .

    TIMES           reduce using rule 154 (seen_int_cons -> CTE_INT .)
    DIVIDE          reduce using rule 154 (seen_int_cons -> CTE_INT .)
    PLUS            reduce using rule 154 (seen_int_cons -> CTE_INT .)
    MINUS           reduce using rule 154 (seen_int_cons -> CTE_INT .)
    MIN             reduce using rule 154 (seen_int_cons -> CTE_INT .)
    MIN_EQ          reduce using rule 154 (seen_int_cons -> CTE_INT .)
    MAY             reduce using rule 154 (seen_int_cons -> CTE_INT .)
    MAY_EQ          reduce using rule 154 (seen_int_cons -> CTE_INT .)
    DIF             reduce using rule 154 (seen_int_cons -> CTE_INT .)
    EQ_EQ           reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RPAREN          reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_READ        reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_PRINT       reduce using rule 154 (seen_int_cons -> CTE_INT .)
    ID              reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_DEF         reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_IF          reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_SWITCH      reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_WHILE       reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_FOR         reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_START       reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_FUNC        reduce using rule 154 (seen_int_cons -> CTE_INT .)
    $end            reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_END         reduce using rule 154 (seen_int_cons -> CTE_INT .)
    E_END           reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_ELSE        reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_CASE        reduce using rule 154 (seen_int_cons -> CTE_INT .)
    COL             reduce using rule 154 (seen_int_cons -> CTE_INT .)
    COMMA           reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RCURLY          reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RBRACKET        reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_INT         reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_FLOAT       reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_DOUBLE      reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_BOOLEAN     reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_STRING      reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_LIST        reduce using rule 154 (seen_int_cons -> CTE_INT .)
    RES_ARRAY       reduce using rule 154 (seen_int_cons -> CTE_INT .)


state 76

    (150) seen_id_cons -> ID .
    (162) consarray -> ID . LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> ID . EQUALS LCURLY conslist1 RCURLY

    COMMA           reduce using rule 150 (seen_id_cons -> ID .)
    RCURLY          reduce using rule 150 (seen_id_cons -> ID .)
    RES_INT         reduce using rule 150 (seen_id_cons -> ID .)
    RES_FLOAT       reduce using rule 150 (seen_id_cons -> ID .)
    RES_DOUBLE      reduce using rule 150 (seen_id_cons -> ID .)
    RES_BOOLEAN     reduce using rule 150 (seen_id_cons -> ID .)
    RES_STRING      reduce using rule 150 (seen_id_cons -> ID .)
    RES_LIST        reduce using rule 150 (seen_id_cons -> ID .)
    RES_ARRAY       reduce using rule 150 (seen_id_cons -> ID .)
    RES_DEF         reduce using rule 150 (seen_id_cons -> ID .)
    RES_START       reduce using rule 150 (seen_id_cons -> ID .)
    RES_FUNC        reduce using rule 150 (seen_id_cons -> ID .)
    RES_READ        reduce using rule 150 (seen_id_cons -> ID .)
    RES_PRINT       reduce using rule 150 (seen_id_cons -> ID .)
    ID              reduce using rule 150 (seen_id_cons -> ID .)
    RES_IF          reduce using rule 150 (seen_id_cons -> ID .)
    RES_SWITCH      reduce using rule 150 (seen_id_cons -> ID .)
    RES_WHILE       reduce using rule 150 (seen_id_cons -> ID .)
    RES_FOR         reduce using rule 150 (seen_id_cons -> ID .)
    $end            reduce using rule 150 (seen_id_cons -> ID .)
    RES_END         reduce using rule 150 (seen_id_cons -> ID .)
    E_END           reduce using rule 150 (seen_id_cons -> ID .)
    RES_ELSE        reduce using rule 150 (seen_id_cons -> ID .)
    RES_CASE        reduce using rule 150 (seen_id_cons -> ID .)
    TIMES           reduce using rule 150 (seen_id_cons -> ID .)
    DIVIDE          reduce using rule 150 (seen_id_cons -> ID .)
    PLUS            reduce using rule 150 (seen_id_cons -> ID .)
    MINUS           reduce using rule 150 (seen_id_cons -> ID .)
    COL             reduce using rule 150 (seen_id_cons -> ID .)
    RPAREN          reduce using rule 150 (seen_id_cons -> ID .)
    MIN             reduce using rule 150 (seen_id_cons -> ID .)
    MIN_EQ          reduce using rule 150 (seen_id_cons -> ID .)
    MAY             reduce using rule 150 (seen_id_cons -> ID .)
    MAY_EQ          reduce using rule 150 (seen_id_cons -> ID .)
    DIF             reduce using rule 150 (seen_id_cons -> ID .)
    EQ_EQ           reduce using rule 150 (seen_id_cons -> ID .)
    RBRACKET        reduce using rule 150 (seen_id_cons -> ID .)
    LBRACKET        shift and go to state 120
    EQUALS          shift and go to state 119


state 77

    (141) cons -> seen_int_cons . exp_cons_int
    (156) exp_cons_int -> .

    RES_INT         reduce using rule 156 (exp_cons_int -> .)
    RES_FLOAT       reduce using rule 156 (exp_cons_int -> .)
    RES_DOUBLE      reduce using rule 156 (exp_cons_int -> .)
    RES_BOOLEAN     reduce using rule 156 (exp_cons_int -> .)
    RES_STRING      reduce using rule 156 (exp_cons_int -> .)
    RES_LIST        reduce using rule 156 (exp_cons_int -> .)
    RES_ARRAY       reduce using rule 156 (exp_cons_int -> .)
    RES_DEF         reduce using rule 156 (exp_cons_int -> .)
    RES_START       reduce using rule 156 (exp_cons_int -> .)
    RES_FUNC        reduce using rule 156 (exp_cons_int -> .)
    RES_READ        reduce using rule 156 (exp_cons_int -> .)
    RES_PRINT       reduce using rule 156 (exp_cons_int -> .)
    ID              reduce using rule 156 (exp_cons_int -> .)
    RES_IF          reduce using rule 156 (exp_cons_int -> .)
    RES_SWITCH      reduce using rule 156 (exp_cons_int -> .)
    RES_WHILE       reduce using rule 156 (exp_cons_int -> .)
    RES_FOR         reduce using rule 156 (exp_cons_int -> .)
    $end            reduce using rule 156 (exp_cons_int -> .)
    RES_END         reduce using rule 156 (exp_cons_int -> .)
    E_END           reduce using rule 156 (exp_cons_int -> .)
    RES_ELSE        reduce using rule 156 (exp_cons_int -> .)
    RES_CASE        reduce using rule 156 (exp_cons_int -> .)
    COMMA           reduce using rule 156 (exp_cons_int -> .)
    RCURLY          reduce using rule 156 (exp_cons_int -> .)
    TIMES           reduce using rule 156 (exp_cons_int -> .)
    DIVIDE          reduce using rule 156 (exp_cons_int -> .)
    PLUS            reduce using rule 156 (exp_cons_int -> .)
    MINUS           reduce using rule 156 (exp_cons_int -> .)
    MIN             reduce using rule 156 (exp_cons_int -> .)
    MIN_EQ          reduce using rule 156 (exp_cons_int -> .)
    MAY             reduce using rule 156 (exp_cons_int -> .)
    MAY_EQ          reduce using rule 156 (exp_cons_int -> .)
    DIF             reduce using rule 156 (exp_cons_int -> .)
    EQ_EQ           reduce using rule 156 (exp_cons_int -> .)
    RPAREN          reduce using rule 156 (exp_cons_int -> .)
    COL             reduce using rule 156 (exp_cons_int -> .)
    RBRACKET        reduce using rule 156 (exp_cons_int -> .)

    exp_cons_int                   shift and go to state 121

state 78

    (147) cons -> conslist .

    TIMES           reduce using rule 147 (cons -> conslist .)
    DIVIDE          reduce using rule 147 (cons -> conslist .)
    PLUS            reduce using rule 147 (cons -> conslist .)
    MINUS           reduce using rule 147 (cons -> conslist .)
    MIN             reduce using rule 147 (cons -> conslist .)
    MIN_EQ          reduce using rule 147 (cons -> conslist .)
    MAY             reduce using rule 147 (cons -> conslist .)
    MAY_EQ          reduce using rule 147 (cons -> conslist .)
    DIF             reduce using rule 147 (cons -> conslist .)
    EQ_EQ           reduce using rule 147 (cons -> conslist .)
    RPAREN          reduce using rule 147 (cons -> conslist .)
    RES_READ        reduce using rule 147 (cons -> conslist .)
    RES_PRINT       reduce using rule 147 (cons -> conslist .)
    ID              reduce using rule 147 (cons -> conslist .)
    RES_DEF         reduce using rule 147 (cons -> conslist .)
    RES_IF          reduce using rule 147 (cons -> conslist .)
    RES_SWITCH      reduce using rule 147 (cons -> conslist .)
    RES_WHILE       reduce using rule 147 (cons -> conslist .)
    RES_FOR         reduce using rule 147 (cons -> conslist .)
    RES_START       reduce using rule 147 (cons -> conslist .)
    RES_FUNC        reduce using rule 147 (cons -> conslist .)
    $end            reduce using rule 147 (cons -> conslist .)
    RES_END         reduce using rule 147 (cons -> conslist .)
    E_END           reduce using rule 147 (cons -> conslist .)
    RES_ELSE        reduce using rule 147 (cons -> conslist .)
    RES_CASE        reduce using rule 147 (cons -> conslist .)
    COL             reduce using rule 147 (cons -> conslist .)
    COMMA           reduce using rule 147 (cons -> conslist .)
    RCURLY          reduce using rule 147 (cons -> conslist .)
    RES_INT         reduce using rule 147 (cons -> conslist .)
    RES_FLOAT       reduce using rule 147 (cons -> conslist .)
    RES_DOUBLE      reduce using rule 147 (cons -> conslist .)
    RES_BOOLEAN     reduce using rule 147 (cons -> conslist .)
    RES_STRING      reduce using rule 147 (cons -> conslist .)
    RES_LIST        reduce using rule 147 (cons -> conslist .)
    RES_ARRAY       reduce using rule 147 (cons -> conslist .)
    RBRACKET        reduce using rule 147 (cons -> conslist .)


state 79

    (146) cons -> consarray .

    TIMES           reduce using rule 146 (cons -> consarray .)
    DIVIDE          reduce using rule 146 (cons -> consarray .)
    PLUS            reduce using rule 146 (cons -> consarray .)
    MINUS           reduce using rule 146 (cons -> consarray .)
    MIN             reduce using rule 146 (cons -> consarray .)
    MIN_EQ          reduce using rule 146 (cons -> consarray .)
    MAY             reduce using rule 146 (cons -> consarray .)
    MAY_EQ          reduce using rule 146 (cons -> consarray .)
    DIF             reduce using rule 146 (cons -> consarray .)
    EQ_EQ           reduce using rule 146 (cons -> consarray .)
    RPAREN          reduce using rule 146 (cons -> consarray .)
    RES_READ        reduce using rule 146 (cons -> consarray .)
    RES_PRINT       reduce using rule 146 (cons -> consarray .)
    ID              reduce using rule 146 (cons -> consarray .)
    RES_DEF         reduce using rule 146 (cons -> consarray .)
    RES_IF          reduce using rule 146 (cons -> consarray .)
    RES_SWITCH      reduce using rule 146 (cons -> consarray .)
    RES_WHILE       reduce using rule 146 (cons -> consarray .)
    RES_FOR         reduce using rule 146 (cons -> consarray .)
    RES_START       reduce using rule 146 (cons -> consarray .)
    RES_FUNC        reduce using rule 146 (cons -> consarray .)
    $end            reduce using rule 146 (cons -> consarray .)
    RES_END         reduce using rule 146 (cons -> consarray .)
    E_END           reduce using rule 146 (cons -> consarray .)
    RES_ELSE        reduce using rule 146 (cons -> consarray .)
    RES_CASE        reduce using rule 146 (cons -> consarray .)
    COL             reduce using rule 146 (cons -> consarray .)
    COMMA           reduce using rule 146 (cons -> consarray .)
    RCURLY          reduce using rule 146 (cons -> consarray .)
    RES_INT         reduce using rule 146 (cons -> consarray .)
    RES_FLOAT       reduce using rule 146 (cons -> consarray .)
    RES_DOUBLE      reduce using rule 146 (cons -> consarray .)
    RES_BOOLEAN     reduce using rule 146 (cons -> consarray .)
    RES_STRING      reduce using rule 146 (cons -> consarray .)
    RES_LIST        reduce using rule 146 (cons -> consarray .)
    RES_ARRAY       reduce using rule 146 (cons -> consarray .)
    RBRACKET        reduce using rule 146 (cons -> consarray .)


state 80

    (151) seen_float_cons -> CTE_FLOAT .

    COMMA           reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RBRACKET        reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    TIMES           reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    DIVIDE          reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    PLUS            reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    MINUS           reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    MIN             reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    MIN_EQ          reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    MAY             reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    MAY_EQ          reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    DIF             reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    EQ_EQ           reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RPAREN          reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_READ        reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_PRINT       reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    ID              reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_DEF         reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_IF          reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_SWITCH      reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_WHILE       reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_FOR         reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_START       reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_FUNC        reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    $end            reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_END         reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    E_END           reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_ELSE        reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_CASE        reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    COL             reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RCURLY          reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_INT         reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_FLOAT       reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_DOUBLE      reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_BOOLEAN     reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_STRING      reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_LIST        reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)
    RES_ARRAY       reduce using rule 151 (seen_float_cons -> CTE_FLOAT .)


state 81

    (149) seen_bool -> RES_FALSE .

    TIMES           reduce using rule 149 (seen_bool -> RES_FALSE .)
    DIVIDE          reduce using rule 149 (seen_bool -> RES_FALSE .)
    PLUS            reduce using rule 149 (seen_bool -> RES_FALSE .)
    MINUS           reduce using rule 149 (seen_bool -> RES_FALSE .)
    MIN             reduce using rule 149 (seen_bool -> RES_FALSE .)
    MIN_EQ          reduce using rule 149 (seen_bool -> RES_FALSE .)
    MAY             reduce using rule 149 (seen_bool -> RES_FALSE .)
    MAY_EQ          reduce using rule 149 (seen_bool -> RES_FALSE .)
    DIF             reduce using rule 149 (seen_bool -> RES_FALSE .)
    EQ_EQ           reduce using rule 149 (seen_bool -> RES_FALSE .)
    RPAREN          reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_READ        reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_PRINT       reduce using rule 149 (seen_bool -> RES_FALSE .)
    ID              reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_DEF         reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_IF          reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_SWITCH      reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_WHILE       reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_FOR         reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_START       reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_FUNC        reduce using rule 149 (seen_bool -> RES_FALSE .)
    $end            reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_END         reduce using rule 149 (seen_bool -> RES_FALSE .)
    E_END           reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_ELSE        reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_CASE        reduce using rule 149 (seen_bool -> RES_FALSE .)
    COL             reduce using rule 149 (seen_bool -> RES_FALSE .)
    COMMA           reduce using rule 149 (seen_bool -> RES_FALSE .)
    RCURLY          reduce using rule 149 (seen_bool -> RES_FALSE .)
    RBRACKET        reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_INT         reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_FLOAT       reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_DOUBLE      reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_BOOLEAN     reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_STRING      reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_LIST        reduce using rule 149 (seen_bool -> RES_FALSE .)
    RES_ARRAY       reduce using rule 149 (seen_bool -> RES_FALSE .)


state 82

    (31) vars1_1 -> vars1 .

    RES_DEF         reduce using rule 31 (vars1_1 -> vars1 .)
    RES_START       reduce using rule 31 (vars1_1 -> vars1 .)
    RES_FUNC        reduce using rule 31 (vars1_1 -> vars1 .)
    RES_READ        reduce using rule 31 (vars1_1 -> vars1 .)
    RES_PRINT       reduce using rule 31 (vars1_1 -> vars1 .)
    ID              reduce using rule 31 (vars1_1 -> vars1 .)
    RES_IF          reduce using rule 31 (vars1_1 -> vars1 .)
    RES_SWITCH      reduce using rule 31 (vars1_1 -> vars1 .)
    RES_WHILE       reduce using rule 31 (vars1_1 -> vars1 .)
    RES_FOR         reduce using rule 31 (vars1_1 -> vars1 .)
    $end            reduce using rule 31 (vars1_1 -> vars1 .)
    RES_END         reduce using rule 31 (vars1_1 -> vars1 .)
    E_END           reduce using rule 31 (vars1_1 -> vars1 .)
    RES_ELSE        reduce using rule 31 (vars1_1 -> vars1 .)
    RES_CASE        reduce using rule 31 (vars1_1 -> vars1 .)


state 83

    (30) vars1 -> dato ID vars2 vars1_1 .

    RES_DEF         reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_START       reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_FUNC        reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_READ        reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_PRINT       reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    ID              reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_IF          reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_SWITCH      reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_WHILE       reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_FOR         reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    $end            reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_END         reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    E_END           reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_ELSE        reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_CASE        reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)


state 84

    (32) vars1_1 -> empty .

    RES_DEF         reduce using rule 32 (vars1_1 -> empty .)
    RES_START       reduce using rule 32 (vars1_1 -> empty .)
    RES_FUNC        reduce using rule 32 (vars1_1 -> empty .)
    RES_READ        reduce using rule 32 (vars1_1 -> empty .)
    RES_PRINT       reduce using rule 32 (vars1_1 -> empty .)
    ID              reduce using rule 32 (vars1_1 -> empty .)
    RES_IF          reduce using rule 32 (vars1_1 -> empty .)
    RES_SWITCH      reduce using rule 32 (vars1_1 -> empty .)
    RES_WHILE       reduce using rule 32 (vars1_1 -> empty .)
    RES_FOR         reduce using rule 32 (vars1_1 -> empty .)
    $end            reduce using rule 32 (vars1_1 -> empty .)
    RES_END         reduce using rule 32 (vars1_1 -> empty .)
    E_END           reduce using rule 32 (vars1_1 -> empty .)
    RES_ELSE        reduce using rule 32 (vars1_1 -> empty .)
    RES_CASE        reduce using rule 32 (vars1_1 -> empty .)


state 85

    (35) vars3 -> COMMA ID . vars3
    (35) vars3 -> . COMMA ID vars3
    (36) vars3 -> . empty
    (166) empty -> .

    COMMA           shift and go to state 56
    RES_INT         reduce using rule 166 (empty -> .)
    RES_FLOAT       reduce using rule 166 (empty -> .)
    RES_DOUBLE      reduce using rule 166 (empty -> .)
    RES_BOOLEAN     reduce using rule 166 (empty -> .)
    RES_STRING      reduce using rule 166 (empty -> .)
    RES_LIST        reduce using rule 166 (empty -> .)
    RES_ARRAY       reduce using rule 166 (empty -> .)
    RES_DEF         reduce using rule 166 (empty -> .)
    RES_START       reduce using rule 166 (empty -> .)
    RES_FUNC        reduce using rule 166 (empty -> .)
    RES_READ        reduce using rule 166 (empty -> .)
    RES_PRINT       reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    RES_IF          reduce using rule 166 (empty -> .)
    RES_SWITCH      reduce using rule 166 (empty -> .)
    RES_WHILE       reduce using rule 166 (empty -> .)
    RES_FOR         reduce using rule 166 (empty -> .)
    $end            reduce using rule 166 (empty -> .)
    RES_END         reduce using rule 166 (empty -> .)
    E_END           reduce using rule 166 (empty -> .)
    RES_ELSE        reduce using rule 166 (empty -> .)
    RES_CASE        reduce using rule 166 (empty -> .)

    vars3                          shift and go to state 122
    empty                          shift and go to state 57

state 86

    (43) array -> RES_ARRAY dato ID LBRACKET . CTE_INT RBRACKET array1

    CTE_INT         shift and go to state 123


state 87

    (16) prototipos_1 -> tipo ID prototipos_2 .

    RPAREN          reduce using rule 16 (prototipos_1 -> tipo ID prototipos_2 .)


state 88

    (17) prototipos_2 -> COMMA . prototipos_1
    (16) prototipos_1 -> . tipo ID prototipos_2
    (24) tipo -> . dato
    (25) tipo -> . estructura
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (26) estructura -> . list
    (27) estructura -> . array
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    tipo                           shift and go to state 46
    prototipos_1                   shift and go to state 124
    list                           shift and go to state 34
    estructura                     shift and go to state 47
    dato                           shift and go to state 48
    array                          shift and go to state 29

state 89

    (18) prototipos_2 -> empty .

    RPAREN          reduce using rule 18 (prototipos_2 -> empty .)


state 90

    (58) estatutos -> vars .

    RES_READ        reduce using rule 58 (estatutos -> vars .)
    RES_PRINT       reduce using rule 58 (estatutos -> vars .)
    ID              reduce using rule 58 (estatutos -> vars .)
    RES_DEF         reduce using rule 58 (estatutos -> vars .)
    RES_IF          reduce using rule 58 (estatutos -> vars .)
    RES_SWITCH      reduce using rule 58 (estatutos -> vars .)
    RES_WHILE       reduce using rule 58 (estatutos -> vars .)
    RES_FOR         reduce using rule 58 (estatutos -> vars .)
    RES_END         reduce using rule 58 (estatutos -> vars .)
    E_END           reduce using rule 58 (estatutos -> vars .)
    RES_START       reduce using rule 58 (estatutos -> vars .)
    RES_FUNC        reduce using rule 58 (estatutos -> vars .)
    $end            reduce using rule 58 (estatutos -> vars .)
    RES_ELSE        reduce using rule 58 (estatutos -> vars .)
    RES_CASE        reduce using rule 58 (estatutos -> vars .)


state 91

    (87) for -> RES_FOR . LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3

    LPAREN          shift and go to state 125


state 92

    (48) modulos -> prototipos se_uso COL bloque .

    RES_START       reduce using rule 48 (modulos -> prototipos se_uso COL bloque .)
    RES_FUNC        reduce using rule 48 (modulos -> prototipos se_uso COL bloque .)
    $end            reduce using rule 48 (modulos -> prototipos se_uso COL bloque .)


state 93

    (95) if -> RES_IF . LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse

    LPAREN          shift and go to state 126


state 94

    (61) condicion -> if .

    E_END           reduce using rule 61 (condicion -> if .)


state 95

    (53) estatutos -> ciclo . E_END

    E_END           shift and go to state 127


state 96

    (69) asignacion -> seen_id_asignacion . EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion

    EQUALS          shift and go to state 128


state 97

    (62) condicion -> switch .

    E_END           reduce using rule 62 (condicion -> switch .)


state 98

    (60) ciclo -> for .

    E_END           reduce using rule 60 (ciclo -> for .)


state 99

    (57) estatutos -> llamada .

    RES_READ        reduce using rule 57 (estatutos -> llamada .)
    RES_PRINT       reduce using rule 57 (estatutos -> llamada .)
    ID              reduce using rule 57 (estatutos -> llamada .)
    RES_DEF         reduce using rule 57 (estatutos -> llamada .)
    RES_IF          reduce using rule 57 (estatutos -> llamada .)
    RES_SWITCH      reduce using rule 57 (estatutos -> llamada .)
    RES_WHILE       reduce using rule 57 (estatutos -> llamada .)
    RES_FOR         reduce using rule 57 (estatutos -> llamada .)
    RES_END         reduce using rule 57 (estatutos -> llamada .)
    E_END           reduce using rule 57 (estatutos -> llamada .)
    RES_START       reduce using rule 57 (estatutos -> llamada .)
    RES_FUNC        reduce using rule 57 (estatutos -> llamada .)
    $end            reduce using rule 57 (estatutos -> llamada .)
    RES_ELSE        reduce using rule 57 (estatutos -> llamada .)
    RES_CASE        reduce using rule 57 (estatutos -> llamada .)


state 100

    (52) estatutos -> condicion . E_END

    E_END           shift and go to state 129


state 101

    (67) escritura -> RES_PRINT . LPAREN cons RPAREN cuadruplo_est_prnt

    LPAREN          shift and go to state 130


state 102

    (54) estatutos -> lectura .

    RES_READ        reduce using rule 54 (estatutos -> lectura .)
    RES_PRINT       reduce using rule 54 (estatutos -> lectura .)
    ID              reduce using rule 54 (estatutos -> lectura .)
    RES_DEF         reduce using rule 54 (estatutos -> lectura .)
    RES_IF          reduce using rule 54 (estatutos -> lectura .)
    RES_SWITCH      reduce using rule 54 (estatutos -> lectura .)
    RES_WHILE       reduce using rule 54 (estatutos -> lectura .)
    RES_FOR         reduce using rule 54 (estatutos -> lectura .)
    RES_END         reduce using rule 54 (estatutos -> lectura .)
    E_END           reduce using rule 54 (estatutos -> lectura .)
    RES_START       reduce using rule 54 (estatutos -> lectura .)
    RES_FUNC        reduce using rule 54 (estatutos -> lectura .)
    $end            reduce using rule 54 (estatutos -> lectura .)
    RES_ELSE        reduce using rule 54 (estatutos -> lectura .)
    RES_CASE        reduce using rule 54 (estatutos -> lectura .)


state 103

    (51) bloque -> empty .

    RES_ELSE        reduce using rule 51 (bloque -> empty .)
    E_END           reduce using rule 51 (bloque -> empty .)
    RES_START       reduce using rule 51 (bloque -> empty .)
    RES_FUNC        reduce using rule 51 (bloque -> empty .)
    $end            reduce using rule 51 (bloque -> empty .)
    RES_END         reduce using rule 51 (bloque -> empty .)
    RES_CASE        reduce using rule 51 (bloque -> empty .)


state 104

    (50) bloque -> estatutos . bloque
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (166) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (69) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (95) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (102) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (83) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (87) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (72) seen_id_asignacion -> . ID

    RES_START       reduce using rule 166 (empty -> .)
    RES_FUNC        reduce using rule 166 (empty -> .)
    $end            reduce using rule 166 (empty -> .)
    RES_END         reduce using rule 166 (empty -> .)
    E_END           reduce using rule 166 (empty -> .)
    RES_ELSE        reduce using rule 166 (empty -> .)
    RES_CASE        reduce using rule 166 (empty -> .)
    RES_READ        shift and go to state 107
    RES_PRINT       shift and go to state 101
    ID              shift and go to state 106
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 93
    RES_SWITCH      shift and go to state 109
    RES_WHILE       shift and go to state 105
    RES_FOR         shift and go to state 91

    vars                           shift and go to state 90
    bloque                         shift and go to state 131
    if                             shift and go to state 94
    ciclo                          shift and go to state 95
    seen_id_asignacion             shift and go to state 96
    switch                         shift and go to state 97
    llamada                        shift and go to state 99
    condicion                      shift and go to state 100
    lectura                        shift and go to state 102
    empty                          shift and go to state 103
    estatutos                      shift and go to state 104
    for                            shift and go to state 98
    asignacion                     shift and go to state 108
    while                          shift and go to state 110
    escritura                      shift and go to state 111

state 105

    (83) while -> RES_WHILE . cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (84) cuadruplo_est_while_1 -> .

    LPAREN          reduce using rule 84 (cuadruplo_est_while_1 -> .)

    cuadruplo_est_while_1          shift and go to state 132

state 106

    (63) llamada -> ID . LPAREN llamada1 RPAREN
    (72) seen_id_asignacion -> ID .

    LPAREN          shift and go to state 133
    EQUALS          reduce using rule 72 (seen_id_asignacion -> ID .)


state 107

    (66) lectura -> RES_READ . LPAREN tipo RPAREN

    LPAREN          shift and go to state 134


state 108

    (56) estatutos -> asignacion .

    RES_READ        reduce using rule 56 (estatutos -> asignacion .)
    RES_PRINT       reduce using rule 56 (estatutos -> asignacion .)
    ID              reduce using rule 56 (estatutos -> asignacion .)
    RES_DEF         reduce using rule 56 (estatutos -> asignacion .)
    RES_IF          reduce using rule 56 (estatutos -> asignacion .)
    RES_SWITCH      reduce using rule 56 (estatutos -> asignacion .)
    RES_WHILE       reduce using rule 56 (estatutos -> asignacion .)
    RES_FOR         reduce using rule 56 (estatutos -> asignacion .)
    RES_END         reduce using rule 56 (estatutos -> asignacion .)
    E_END           reduce using rule 56 (estatutos -> asignacion .)
    RES_START       reduce using rule 56 (estatutos -> asignacion .)
    RES_FUNC        reduce using rule 56 (estatutos -> asignacion .)
    $end            reduce using rule 56 (estatutos -> asignacion .)
    RES_ELSE        reduce using rule 56 (estatutos -> asignacion .)
    RES_CASE        reduce using rule 56 (estatutos -> asignacion .)


state 109

    (102) switch -> RES_SWITCH . LPAREN seen_exp_switch RPAREN COL switch2

    LPAREN          shift and go to state 135


state 110

    (59) ciclo -> while .

    E_END           reduce using rule 59 (ciclo -> while .)


state 111

    (55) estatutos -> escritura .

    RES_READ        reduce using rule 55 (estatutos -> escritura .)
    RES_PRINT       reduce using rule 55 (estatutos -> escritura .)
    ID              reduce using rule 55 (estatutos -> escritura .)
    RES_DEF         reduce using rule 55 (estatutos -> escritura .)
    RES_IF          reduce using rule 55 (estatutos -> escritura .)
    RES_SWITCH      reduce using rule 55 (estatutos -> escritura .)
    RES_WHILE       reduce using rule 55 (estatutos -> escritura .)
    RES_FOR         reduce using rule 55 (estatutos -> escritura .)
    RES_END         reduce using rule 55 (estatutos -> escritura .)
    E_END           reduce using rule 55 (estatutos -> escritura .)
    RES_START       reduce using rule 55 (estatutos -> escritura .)
    RES_FUNC        reduce using rule 55 (estatutos -> escritura .)
    $end            reduce using rule 55 (estatutos -> escritura .)
    RES_ELSE        reduce using rule 55 (estatutos -> escritura .)
    RES_CASE        reduce using rule 55 (estatutos -> escritura .)


state 112

    (160) main -> RES_START comienza_main COL bloque . RES_END

    RES_END         shift and go to state 136


state 113

    (40) cons_loop -> cons . cons_loop_1
    (41) cons_loop_1 -> . COMMA cons_loop
    (42) cons_loop_1 -> . empty
    (166) empty -> .

    COMMA           shift and go to state 137
    RCURLY          reduce using rule 166 (empty -> .)

    empty                          shift and go to state 138
    cons_loop_1                    shift and go to state 139

state 114

    (38) list1 -> LCURLY cons_loop . RCURLY

    RCURLY          shift and go to state 140


state 115

    (144) cons -> seen_string_cons exp_cons_string .

    TIMES           reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    DIVIDE          reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    PLUS            reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    MINUS           reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    MIN             reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    MIN_EQ          reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    MAY             reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    MAY_EQ          reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    DIF             reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    EQ_EQ           reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RPAREN          reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_READ        reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_PRINT       reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    ID              reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_DEF         reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_IF          reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_SWITCH      reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_WHILE       reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_FOR         reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_START       reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_FUNC        reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    $end            reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_END         reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    E_END           reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_ELSE        reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_CASE        reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    COL             reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    COMMA           reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RCURLY          reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_INT         reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_FLOAT       reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_DOUBLE      reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_BOOLEAN     reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_STRING      reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_LIST        reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RES_ARRAY       reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)
    RBRACKET        reduce using rule 144 (cons -> seen_string_cons exp_cons_string .)


state 116

    (142) cons -> seen_float_cons exp_cons_float .

    TIMES           reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    DIVIDE          reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    PLUS            reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    MINUS           reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    MIN             reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    MIN_EQ          reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    MAY             reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    MAY_EQ          reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    DIF             reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    EQ_EQ           reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RPAREN          reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_READ        reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_PRINT       reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    ID              reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_DEF         reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_IF          reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_SWITCH      reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_WHILE       reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_FOR         reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_START       reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_FUNC        reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    $end            reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_END         reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    E_END           reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_ELSE        reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_CASE        reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    COL             reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    COMMA           reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RCURLY          reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_INT         reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_FLOAT       reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_DOUBLE      reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_BOOLEAN     reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_STRING      reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_LIST        reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RES_ARRAY       reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)
    RBRACKET        reduce using rule 142 (cons -> seen_float_cons exp_cons_float .)


state 117

    (140) cons -> seen_id_cons exp_1 .

    TIMES           reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    DIVIDE          reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    PLUS            reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    MINUS           reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    MIN             reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    MIN_EQ          reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    MAY             reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    MAY_EQ          reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    DIF             reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    EQ_EQ           reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RPAREN          reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_READ        reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_PRINT       reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    ID              reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_DEF         reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_IF          reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_SWITCH      reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_WHILE       reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_FOR         reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_START       reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_FUNC        reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    $end            reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_END         reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    E_END           reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_ELSE        reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_CASE        reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    COL             reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    COMMA           reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RCURLY          reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_INT         reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_FLOAT       reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_DOUBLE      reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_BOOLEAN     reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_STRING      reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_LIST        reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RES_ARRAY       reduce using rule 140 (cons -> seen_id_cons exp_1 .)
    RBRACKET        reduce using rule 140 (cons -> seen_id_cons exp_1 .)


state 118

    (143) cons -> seen_double_cons exp_cons_double .

    TIMES           reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    DIVIDE          reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    PLUS            reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    MINUS           reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    MIN             reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    MIN_EQ          reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    MAY             reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    MAY_EQ          reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    DIF             reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    EQ_EQ           reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RPAREN          reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_READ        reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_PRINT       reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    ID              reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_DEF         reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_IF          reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_SWITCH      reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_WHILE       reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_FOR         reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_START       reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_FUNC        reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    $end            reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_END         reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    E_END           reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_ELSE        reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_CASE        reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    COL             reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    COMMA           reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RCURLY          reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_INT         reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_FLOAT       reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_DOUBLE      reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_BOOLEAN     reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_STRING      reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_LIST        reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RES_ARRAY       reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)
    RBRACKET        reduce using rule 143 (cons -> seen_double_cons exp_cons_double .)


state 119

    (163) conslist -> ID EQUALS . LCURLY conslist1 RCURLY

    LCURLY          shift and go to state 141


state 120

    (162) consarray -> ID LBRACKET . CTE_INT RBRACKET EQUALS cons

    CTE_INT         shift and go to state 142


state 121

    (141) cons -> seen_int_cons exp_cons_int .

    TIMES           reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    DIVIDE          reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    PLUS            reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    MINUS           reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    MIN             reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    MIN_EQ          reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    MAY             reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    MAY_EQ          reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    DIF             reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    EQ_EQ           reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RPAREN          reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_READ        reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_PRINT       reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    ID              reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_DEF         reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_IF          reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_SWITCH      reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_WHILE       reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_FOR         reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_START       reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_FUNC        reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    $end            reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_END         reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    E_END           reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_ELSE        reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_CASE        reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    COL             reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    COMMA           reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RCURLY          reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_INT         reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_FLOAT       reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_DOUBLE      reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_BOOLEAN     reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_STRING      reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_LIST        reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RES_ARRAY       reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)
    RBRACKET        reduce using rule 141 (cons -> seen_int_cons exp_cons_int .)


state 122

    (35) vars3 -> COMMA ID vars3 .

    RES_INT         reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_FLOAT       reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_DOUBLE      reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_BOOLEAN     reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_STRING      reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_LIST        reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_ARRAY       reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_DEF         reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_START       reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_FUNC        reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_READ        reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_PRINT       reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    ID              reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_IF          reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_SWITCH      reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_WHILE       reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_FOR         reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    $end            reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_END         reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    E_END           reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_ELSE        reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_CASE        reduce using rule 35 (vars3 -> COMMA ID vars3 .)


state 123

    (43) array -> RES_ARRAY dato ID LBRACKET CTE_INT . RBRACKET array1

    RBRACKET        shift and go to state 143


state 124

    (17) prototipos_2 -> COMMA prototipos_1 .

    RPAREN          reduce using rule 17 (prototipos_2 -> COMMA prototipos_1 .)


state 125

    (87) for -> RES_FOR LPAREN . forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (89) forexp -> . asignacion cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 COL entra_update asignacion
    (69) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (72) seen_id_asignacion -> . ID

    ID              shift and go to state 145

    asignacion                     shift and go to state 144
    seen_id_asignacion             shift and go to state 96
    forexp                         shift and go to state 146

state 126

    (95) if -> RES_IF LPAREN . expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (109) expresion -> . exp expresion_1 cuadruplo_exp_9
    (120) exp -> . termino cuadruplo_exp_4 exp1
    (126) termino -> . factor cuadruplo_exp_5 termino1
    (134) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (135) factor -> . cons
    (136) factor -> . PLUS cons
    (137) factor -> . MINUS cons
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 148
    PLUS            shift and go to state 152
    MINUS           shift and go to state 150
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    cons                           shift and go to state 147
    seen_double_cons               shift and go to state 73
    termino                        shift and go to state 149
    seen_bool                      shift and go to state 67
    seen_string_cons               shift and go to state 68
    seen_float_cons                shift and go to state 69
    factor                         shift and go to state 151
    seen_int_cons                  shift and go to state 77
    seen_id_cons                   shift and go to state 70
    expresion                      shift and go to state 153
    conslist                       shift and go to state 78
    consarray                      shift and go to state 79
    exp                            shift and go to state 154

state 127

    (53) estatutos -> ciclo E_END .

    RES_READ        reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_PRINT       reduce using rule 53 (estatutos -> ciclo E_END .)
    ID              reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_DEF         reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_IF          reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_SWITCH      reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_WHILE       reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_FOR         reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_END         reduce using rule 53 (estatutos -> ciclo E_END .)
    E_END           reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_START       reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_FUNC        reduce using rule 53 (estatutos -> ciclo E_END .)
    $end            reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_ELSE        reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_CASE        reduce using rule 53 (estatutos -> ciclo E_END .)


state 128

    (69) asignacion -> seen_id_asignacion EQUALS . cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (70) cuadruplo_exp_8_asignacion -> .

    LCURLY          reduce using rule 70 (cuadruplo_exp_8_asignacion -> .)
    LBRACKET        reduce using rule 70 (cuadruplo_exp_8_asignacion -> .)
    LPAREN          reduce using rule 70 (cuadruplo_exp_8_asignacion -> .)
    PLUS            reduce using rule 70 (cuadruplo_exp_8_asignacion -> .)
    MINUS           reduce using rule 70 (cuadruplo_exp_8_asignacion -> .)
    ID              reduce using rule 70 (cuadruplo_exp_8_asignacion -> .)
    CTE_INT         reduce using rule 70 (cuadruplo_exp_8_asignacion -> .)
    CTE_FLOAT       reduce using rule 70 (cuadruplo_exp_8_asignacion -> .)
    CTE_DOUBLE      reduce using rule 70 (cuadruplo_exp_8_asignacion -> .)
    CTE_STRING      reduce using rule 70 (cuadruplo_exp_8_asignacion -> .)
    RES_TRUE        reduce using rule 70 (cuadruplo_exp_8_asignacion -> .)
    RES_FALSE       reduce using rule 70 (cuadruplo_exp_8_asignacion -> .)

    cuadruplo_exp_8_asignacion     shift and go to state 155

state 129

    (52) estatutos -> condicion E_END .

    RES_READ        reduce using rule 52 (estatutos -> condicion E_END .)
    RES_PRINT       reduce using rule 52 (estatutos -> condicion E_END .)
    ID              reduce using rule 52 (estatutos -> condicion E_END .)
    RES_DEF         reduce using rule 52 (estatutos -> condicion E_END .)
    RES_IF          reduce using rule 52 (estatutos -> condicion E_END .)
    RES_SWITCH      reduce using rule 52 (estatutos -> condicion E_END .)
    RES_WHILE       reduce using rule 52 (estatutos -> condicion E_END .)
    RES_FOR         reduce using rule 52 (estatutos -> condicion E_END .)
    RES_END         reduce using rule 52 (estatutos -> condicion E_END .)
    E_END           reduce using rule 52 (estatutos -> condicion E_END .)
    RES_START       reduce using rule 52 (estatutos -> condicion E_END .)
    RES_FUNC        reduce using rule 52 (estatutos -> condicion E_END .)
    $end            reduce using rule 52 (estatutos -> condicion E_END .)
    RES_ELSE        reduce using rule 52 (estatutos -> condicion E_END .)
    RES_CASE        reduce using rule 52 (estatutos -> condicion E_END .)


state 130

    (67) escritura -> RES_PRINT LPAREN . cons RPAREN cuadruplo_est_prnt
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    seen_int_cons                  shift and go to state 77
    seen_double_cons               shift and go to state 73
    cons                           shift and go to state 156
    seen_string_cons               shift and go to state 68
    seen_bool                      shift and go to state 67
    seen_float_cons                shift and go to state 69
    conslist                       shift and go to state 78
    seen_id_cons                   shift and go to state 70
    consarray                      shift and go to state 79

state 131

    (50) bloque -> estatutos bloque .

    RES_ELSE        reduce using rule 50 (bloque -> estatutos bloque .)
    E_END           reduce using rule 50 (bloque -> estatutos bloque .)
    RES_START       reduce using rule 50 (bloque -> estatutos bloque .)
    RES_FUNC        reduce using rule 50 (bloque -> estatutos bloque .)
    $end            reduce using rule 50 (bloque -> estatutos bloque .)
    RES_END         reduce using rule 50 (bloque -> estatutos bloque .)
    RES_CASE        reduce using rule 50 (bloque -> estatutos bloque .)


state 132

    (83) while -> RES_WHILE cuadruplo_est_while_1 . LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3

    LPAREN          shift and go to state 157


state 133

    (63) llamada -> ID LPAREN . llamada1 RPAREN
    (64) llamada1 -> . expresion
    (65) llamada1 -> . empty
    (109) expresion -> . exp expresion_1 cuadruplo_exp_9
    (166) empty -> .
    (120) exp -> . termino cuadruplo_exp_4 exp1
    (126) termino -> . factor cuadruplo_exp_5 termino1
    (134) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (135) factor -> . cons
    (136) factor -> . PLUS cons
    (137) factor -> . MINUS cons
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          shift and go to state 148
    PLUS            shift and go to state 152
    MINUS           shift and go to state 150
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    cons                           shift and go to state 147
    seen_double_cons               shift and go to state 73
    termino                        shift and go to state 149
    llamada1                       shift and go to state 158
    seen_bool                      shift and go to state 67
    seen_string_cons               shift and go to state 68
    seen_float_cons                shift and go to state 69
    factor                         shift and go to state 151
    empty                          shift and go to state 159
    seen_int_cons                  shift and go to state 77
    seen_id_cons                   shift and go to state 70
    expresion                      shift and go to state 160
    conslist                       shift and go to state 78
    consarray                      shift and go to state 79
    exp                            shift and go to state 154

state 134

    (66) lectura -> RES_READ LPAREN . tipo RPAREN
    (24) tipo -> . dato
    (25) tipo -> . estructura
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (26) estructura -> . list
    (27) estructura -> . array
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    tipo                           shift and go to state 161
    list                           shift and go to state 34
    estructura                     shift and go to state 47
    dato                           shift and go to state 48
    array                          shift and go to state 29

state 135

    (102) switch -> RES_SWITCH LPAREN . seen_exp_switch RPAREN COL switch2
    (103) seen_exp_switch -> . exp
    (120) exp -> . termino cuadruplo_exp_4 exp1
    (126) termino -> . factor cuadruplo_exp_5 termino1
    (134) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (135) factor -> . cons
    (136) factor -> . PLUS cons
    (137) factor -> . MINUS cons
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 148
    PLUS            shift and go to state 152
    MINUS           shift and go to state 150
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    cons                           shift and go to state 147
    termino                        shift and go to state 149
    seen_bool                      shift and go to state 67
    seen_string_cons               shift and go to state 68
    seen_float_cons                shift and go to state 69
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 73
    seen_id_cons                   shift and go to state 70
    seen_int_cons                  shift and go to state 77
    conslist                       shift and go to state 78
    consarray                      shift and go to state 79
    seen_exp_switch                shift and go to state 162
    exp                            shift and go to state 163

state 136

    (160) main -> RES_START comienza_main COL bloque RES_END .

    RES_FUNC        reduce using rule 160 (main -> RES_START comienza_main COL bloque RES_END .)
    $end            reduce using rule 160 (main -> RES_START comienza_main COL bloque RES_END .)


state 137

    (41) cons_loop_1 -> COMMA . cons_loop
    (40) cons_loop -> . cons cons_loop_1
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    seen_int_cons                  shift and go to state 77
    seen_double_cons               shift and go to state 73
    cons                           shift and go to state 113
    seen_string_cons               shift and go to state 68
    seen_bool                      shift and go to state 67
    seen_float_cons                shift and go to state 69
    consarray                      shift and go to state 79
    conslist                       shift and go to state 78
    cons_loop                      shift and go to state 164
    seen_id_cons                   shift and go to state 70

state 138

    (42) cons_loop_1 -> empty .

    RCURLY          reduce using rule 42 (cons_loop_1 -> empty .)


state 139

    (40) cons_loop -> cons cons_loop_1 .

    RCURLY          reduce using rule 40 (cons_loop -> cons cons_loop_1 .)


state 140

    (38) list1 -> LCURLY cons_loop RCURLY .

    RES_INT         reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_FLOAT       reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_DOUBLE      reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_BOOLEAN     reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_STRING      reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_LIST        reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_ARRAY       reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    ID              reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RPAREN          reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)


state 141

    (163) conslist -> ID EQUALS LCURLY . conslist1 RCURLY
    (164) conslist1 -> . cons
    (165) conslist1 -> . cons COMMA conslist1
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    seen_int_cons                  shift and go to state 77
    seen_double_cons               shift and go to state 73
    cons                           shift and go to state 165
    seen_string_cons               shift and go to state 68
    seen_bool                      shift and go to state 67
    seen_float_cons                shift and go to state 69
    consarray                      shift and go to state 79
    conslist                       shift and go to state 78
    conslist1                      shift and go to state 166
    seen_id_cons                   shift and go to state 70

state 142

    (162) consarray -> ID LBRACKET CTE_INT . RBRACKET EQUALS cons

    RBRACKET        shift and go to state 167


state 143

    (43) array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET . array1
    (44) array1 -> . COL LBRACKET array2 RBRACKET
    (45) array1 -> . empty
    (166) empty -> .

    COL             shift and go to state 169
    RES_INT         reduce using rule 166 (empty -> .)
    RES_FLOAT       reduce using rule 166 (empty -> .)
    RES_DOUBLE      reduce using rule 166 (empty -> .)
    RES_BOOLEAN     reduce using rule 166 (empty -> .)
    RES_STRING      reduce using rule 166 (empty -> .)
    RES_LIST        reduce using rule 166 (empty -> .)
    RES_ARRAY       reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)

    array1                         shift and go to state 168
    empty                          shift and go to state 170

state 144

    (89) forexp -> asignacion . cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 COL entra_update asignacion
    (91) cuadruplo_est_for_1 -> .

    COL             reduce using rule 91 (cuadruplo_est_for_1 -> .)

    cuadruplo_est_for_1            shift and go to state 171

state 145

    (72) seen_id_asignacion -> ID .

    EQUALS          reduce using rule 72 (seen_id_asignacion -> ID .)


state 146

    (87) for -> RES_FOR LPAREN forexp . RPAREN sale_update COL bloque cuadruplo_est_for_3

    RPAREN          shift and go to state 172


state 147

    (135) factor -> cons .

    TIMES           reduce using rule 135 (factor -> cons .)
    DIVIDE          reduce using rule 135 (factor -> cons .)
    PLUS            reduce using rule 135 (factor -> cons .)
    MINUS           reduce using rule 135 (factor -> cons .)
    MIN             reduce using rule 135 (factor -> cons .)
    MIN_EQ          reduce using rule 135 (factor -> cons .)
    MAY             reduce using rule 135 (factor -> cons .)
    MAY_EQ          reduce using rule 135 (factor -> cons .)
    DIF             reduce using rule 135 (factor -> cons .)
    EQ_EQ           reduce using rule 135 (factor -> cons .)
    RPAREN          reduce using rule 135 (factor -> cons .)
    COL             reduce using rule 135 (factor -> cons .)
    RES_READ        reduce using rule 135 (factor -> cons .)
    RES_PRINT       reduce using rule 135 (factor -> cons .)
    ID              reduce using rule 135 (factor -> cons .)
    RES_DEF         reduce using rule 135 (factor -> cons .)
    RES_IF          reduce using rule 135 (factor -> cons .)
    RES_SWITCH      reduce using rule 135 (factor -> cons .)
    RES_WHILE       reduce using rule 135 (factor -> cons .)
    RES_FOR         reduce using rule 135 (factor -> cons .)
    RES_START       reduce using rule 135 (factor -> cons .)
    RES_FUNC        reduce using rule 135 (factor -> cons .)
    $end            reduce using rule 135 (factor -> cons .)
    RES_END         reduce using rule 135 (factor -> cons .)
    E_END           reduce using rule 135 (factor -> cons .)
    RES_ELSE        reduce using rule 135 (factor -> cons .)
    RES_CASE        reduce using rule 135 (factor -> cons .)


state 148

    (134) factor -> LPAREN . cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (138) cuadruplo_exp_6 -> .

    LPAREN          reduce using rule 138 (cuadruplo_exp_6 -> .)
    PLUS            reduce using rule 138 (cuadruplo_exp_6 -> .)
    MINUS           reduce using rule 138 (cuadruplo_exp_6 -> .)
    ID              reduce using rule 138 (cuadruplo_exp_6 -> .)
    CTE_INT         reduce using rule 138 (cuadruplo_exp_6 -> .)
    CTE_FLOAT       reduce using rule 138 (cuadruplo_exp_6 -> .)
    CTE_DOUBLE      reduce using rule 138 (cuadruplo_exp_6 -> .)
    CTE_STRING      reduce using rule 138 (cuadruplo_exp_6 -> .)
    RES_TRUE        reduce using rule 138 (cuadruplo_exp_6 -> .)
    RES_FALSE       reduce using rule 138 (cuadruplo_exp_6 -> .)

    cuadruplo_exp_6                shift and go to state 173

state 149

    (120) exp -> termino . cuadruplo_exp_4 exp1
    (132) cuadruplo_exp_4 -> .

    PLUS            reduce using rule 132 (cuadruplo_exp_4 -> .)
    MINUS           reduce using rule 132 (cuadruplo_exp_4 -> .)
    MIN             reduce using rule 132 (cuadruplo_exp_4 -> .)
    MIN_EQ          reduce using rule 132 (cuadruplo_exp_4 -> .)
    MAY             reduce using rule 132 (cuadruplo_exp_4 -> .)
    MAY_EQ          reduce using rule 132 (cuadruplo_exp_4 -> .)
    DIF             reduce using rule 132 (cuadruplo_exp_4 -> .)
    EQ_EQ           reduce using rule 132 (cuadruplo_exp_4 -> .)
    RPAREN          reduce using rule 132 (cuadruplo_exp_4 -> .)
    RES_READ        reduce using rule 132 (cuadruplo_exp_4 -> .)
    RES_PRINT       reduce using rule 132 (cuadruplo_exp_4 -> .)
    ID              reduce using rule 132 (cuadruplo_exp_4 -> .)
    RES_DEF         reduce using rule 132 (cuadruplo_exp_4 -> .)
    RES_IF          reduce using rule 132 (cuadruplo_exp_4 -> .)
    RES_SWITCH      reduce using rule 132 (cuadruplo_exp_4 -> .)
    RES_WHILE       reduce using rule 132 (cuadruplo_exp_4 -> .)
    RES_FOR         reduce using rule 132 (cuadruplo_exp_4 -> .)
    RES_START       reduce using rule 132 (cuadruplo_exp_4 -> .)
    RES_FUNC        reduce using rule 132 (cuadruplo_exp_4 -> .)
    $end            reduce using rule 132 (cuadruplo_exp_4 -> .)
    RES_END         reduce using rule 132 (cuadruplo_exp_4 -> .)
    E_END           reduce using rule 132 (cuadruplo_exp_4 -> .)
    RES_ELSE        reduce using rule 132 (cuadruplo_exp_4 -> .)
    RES_CASE        reduce using rule 132 (cuadruplo_exp_4 -> .)
    COL             reduce using rule 132 (cuadruplo_exp_4 -> .)

    cuadruplo_exp_4                shift and go to state 174

state 150

    (137) factor -> MINUS . cons
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    seen_int_cons                  shift and go to state 77
    seen_double_cons               shift and go to state 73
    cons                           shift and go to state 175
    seen_string_cons               shift and go to state 68
    seen_bool                      shift and go to state 67
    seen_float_cons                shift and go to state 69
    consarray                      shift and go to state 79
    conslist                       shift and go to state 78
    seen_id_cons                   shift and go to state 70

state 151

    (126) termino -> factor . cuadruplo_exp_5 termino1
    (133) cuadruplo_exp_5 -> .

    TIMES           reduce using rule 133 (cuadruplo_exp_5 -> .)
    DIVIDE          reduce using rule 133 (cuadruplo_exp_5 -> .)
    PLUS            reduce using rule 133 (cuadruplo_exp_5 -> .)
    MINUS           reduce using rule 133 (cuadruplo_exp_5 -> .)
    MIN             reduce using rule 133 (cuadruplo_exp_5 -> .)
    MIN_EQ          reduce using rule 133 (cuadruplo_exp_5 -> .)
    MAY             reduce using rule 133 (cuadruplo_exp_5 -> .)
    MAY_EQ          reduce using rule 133 (cuadruplo_exp_5 -> .)
    DIF             reduce using rule 133 (cuadruplo_exp_5 -> .)
    EQ_EQ           reduce using rule 133 (cuadruplo_exp_5 -> .)
    RPAREN          reduce using rule 133 (cuadruplo_exp_5 -> .)
    RES_READ        reduce using rule 133 (cuadruplo_exp_5 -> .)
    RES_PRINT       reduce using rule 133 (cuadruplo_exp_5 -> .)
    ID              reduce using rule 133 (cuadruplo_exp_5 -> .)
    RES_DEF         reduce using rule 133 (cuadruplo_exp_5 -> .)
    RES_IF          reduce using rule 133 (cuadruplo_exp_5 -> .)
    RES_SWITCH      reduce using rule 133 (cuadruplo_exp_5 -> .)
    RES_WHILE       reduce using rule 133 (cuadruplo_exp_5 -> .)
    RES_FOR         reduce using rule 133 (cuadruplo_exp_5 -> .)
    RES_START       reduce using rule 133 (cuadruplo_exp_5 -> .)
    RES_FUNC        reduce using rule 133 (cuadruplo_exp_5 -> .)
    $end            reduce using rule 133 (cuadruplo_exp_5 -> .)
    RES_END         reduce using rule 133 (cuadruplo_exp_5 -> .)
    E_END           reduce using rule 133 (cuadruplo_exp_5 -> .)
    RES_ELSE        reduce using rule 133 (cuadruplo_exp_5 -> .)
    RES_CASE        reduce using rule 133 (cuadruplo_exp_5 -> .)
    COL             reduce using rule 133 (cuadruplo_exp_5 -> .)

    cuadruplo_exp_5                shift and go to state 176

state 152

    (136) factor -> PLUS . cons
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    seen_int_cons                  shift and go to state 77
    seen_double_cons               shift and go to state 73
    cons                           shift and go to state 177
    seen_string_cons               shift and go to state 68
    seen_bool                      shift and go to state 67
    seen_float_cons                shift and go to state 69
    consarray                      shift and go to state 79
    conslist                       shift and go to state 78
    seen_id_cons                   shift and go to state 70

state 153

    (95) if -> RES_IF LPAREN expresion . RPAREN cuadruplo_est_if_1 COL bloque ifelse

    RPAREN          shift and go to state 178


state 154

    (109) expresion -> exp . expresion_1 cuadruplo_exp_9
    (110) expresion_1 -> . see_rel cuadruplo_exp_8 exp
    (111) expresion_1 -> . empty
    (112) see_rel -> . MIN
    (113) see_rel -> . MIN_EQ
    (114) see_rel -> . MAY
    (115) see_rel -> . MAY_EQ
    (116) see_rel -> . DIF
    (117) see_rel -> . EQ_EQ
    (166) empty -> .

    MIN             shift and go to state 180
    MIN_EQ          shift and go to state 179
    MAY             shift and go to state 181
    MAY_EQ          shift and go to state 182
    DIF             shift and go to state 186
    EQ_EQ           shift and go to state 183
    RPAREN          reduce using rule 166 (empty -> .)
    COL             reduce using rule 166 (empty -> .)

    see_rel                        shift and go to state 184
    expresion_1                    shift and go to state 185
    empty                          shift and go to state 187

state 155

    (69) asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion . asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (74) asignacion1 -> . exp
    (75) asignacion1 -> . asignlist
    (76) asignacion1 -> . asignarray
    (120) exp -> . termino cuadruplo_exp_4 exp1
    (77) asignlist -> . LCURLY asignlist1 RCURLY
    (80) asignarray -> . LBRACKET asignarray1 RBRACKET
    (126) termino -> . factor cuadruplo_exp_5 termino1
    (134) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (135) factor -> . cons
    (136) factor -> . PLUS cons
    (137) factor -> . MINUS cons
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LCURLY          shift and go to state 189
    LBRACKET        shift and go to state 188
    LPAREN          shift and go to state 148
    PLUS            shift and go to state 152
    MINUS           shift and go to state 150
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    cons                           shift and go to state 147
    asignlist                      shift and go to state 191
    termino                        shift and go to state 149
    seen_bool                      shift and go to state 67
    seen_string_cons               shift and go to state 68
    asignarray                     shift and go to state 190
    seen_float_cons                shift and go to state 69
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 73
    seen_id_cons                   shift and go to state 70
    seen_int_cons                  shift and go to state 77
    conslist                       shift and go to state 78
    consarray                      shift and go to state 79
    exp                            shift and go to state 192
    asignacion1                    shift and go to state 193

state 156

    (67) escritura -> RES_PRINT LPAREN cons . RPAREN cuadruplo_est_prnt

    RPAREN          shift and go to state 194


state 157

    (83) while -> RES_WHILE cuadruplo_est_while_1 LPAREN . expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (109) expresion -> . exp expresion_1 cuadruplo_exp_9
    (120) exp -> . termino cuadruplo_exp_4 exp1
    (126) termino -> . factor cuadruplo_exp_5 termino1
    (134) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (135) factor -> . cons
    (136) factor -> . PLUS cons
    (137) factor -> . MINUS cons
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 148
    PLUS            shift and go to state 152
    MINUS           shift and go to state 150
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    cons                           shift and go to state 147
    seen_double_cons               shift and go to state 73
    termino                        shift and go to state 149
    seen_bool                      shift and go to state 67
    seen_float_cons                shift and go to state 69
    factor                         shift and go to state 151
    seen_int_cons                  shift and go to state 77
    seen_id_cons                   shift and go to state 70
    seen_string_cons               shift and go to state 68
    expresion                      shift and go to state 195
    conslist                       shift and go to state 78
    consarray                      shift and go to state 79
    exp                            shift and go to state 154

state 158

    (63) llamada -> ID LPAREN llamada1 . RPAREN

    RPAREN          shift and go to state 196


state 159

    (65) llamada1 -> empty .

    RPAREN          reduce using rule 65 (llamada1 -> empty .)


state 160

    (64) llamada1 -> expresion .

    RPAREN          reduce using rule 64 (llamada1 -> expresion .)


state 161

    (66) lectura -> RES_READ LPAREN tipo . RPAREN

    RPAREN          shift and go to state 197


state 162

    (102) switch -> RES_SWITCH LPAREN seen_exp_switch . RPAREN COL switch2

    RPAREN          shift and go to state 198


state 163

    (103) seen_exp_switch -> exp .

    RPAREN          reduce using rule 103 (seen_exp_switch -> exp .)


state 164

    (41) cons_loop_1 -> COMMA cons_loop .

    RCURLY          reduce using rule 41 (cons_loop_1 -> COMMA cons_loop .)


state 165

    (164) conslist1 -> cons .
    (165) conslist1 -> cons . COMMA conslist1

    RCURLY          reduce using rule 164 (conslist1 -> cons .)
    COMMA           shift and go to state 199


state 166

    (163) conslist -> ID EQUALS LCURLY conslist1 . RCURLY

    RCURLY          shift and go to state 200


state 167

    (162) consarray -> ID LBRACKET CTE_INT RBRACKET . EQUALS cons

    EQUALS          shift and go to state 201


state 168

    (43) array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .

    RES_INT         reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_FLOAT       reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_DOUBLE      reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_BOOLEAN     reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_STRING      reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_LIST        reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_ARRAY       reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    ID              reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RPAREN          reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)


state 169

    (44) array1 -> COL . LBRACKET array2 RBRACKET

    LBRACKET        shift and go to state 202


state 170

    (45) array1 -> empty .

    RES_INT         reduce using rule 45 (array1 -> empty .)
    RES_FLOAT       reduce using rule 45 (array1 -> empty .)
    RES_DOUBLE      reduce using rule 45 (array1 -> empty .)
    RES_BOOLEAN     reduce using rule 45 (array1 -> empty .)
    RES_STRING      reduce using rule 45 (array1 -> empty .)
    RES_LIST        reduce using rule 45 (array1 -> empty .)
    RES_ARRAY       reduce using rule 45 (array1 -> empty .)
    ID              reduce using rule 45 (array1 -> empty .)
    RPAREN          reduce using rule 45 (array1 -> empty .)


state 171

    (89) forexp -> asignacion cuadruplo_est_for_1 . COL expresion cuadruplo_est_for_2 COL entra_update asignacion

    COL             shift and go to state 203


state 172

    (87) for -> RES_FOR LPAREN forexp RPAREN . sale_update COL bloque cuadruplo_est_for_3
    (88) sale_update -> .

    COL             reduce using rule 88 (sale_update -> .)

    sale_update                    shift and go to state 204

state 173

    (134) factor -> LPAREN cuadruplo_exp_6 . exp RPAREN cuadruplo_exp_7
    (120) exp -> . termino cuadruplo_exp_4 exp1
    (126) termino -> . factor cuadruplo_exp_5 termino1
    (134) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (135) factor -> . cons
    (136) factor -> . PLUS cons
    (137) factor -> . MINUS cons
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 148
    PLUS            shift and go to state 152
    MINUS           shift and go to state 150
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    cons                           shift and go to state 147
    termino                        shift and go to state 149
    seen_bool                      shift and go to state 67
    seen_string_cons               shift and go to state 68
    seen_float_cons                shift and go to state 69
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 73
    seen_id_cons                   shift and go to state 70
    seen_int_cons                  shift and go to state 77
    conslist                       shift and go to state 78
    consarray                      shift and go to state 79
    exp                            shift and go to state 205

state 174

    (120) exp -> termino cuadruplo_exp_4 . exp1
    (121) exp1 -> . see_operador_e cuadruplos_exp_2 exp
    (122) exp1 -> . empty
    (123) see_operador_e -> . PLUS
    (124) see_operador_e -> . MINUS
    (166) empty -> .

    PLUS            shift and go to state 207
    MINUS           shift and go to state 209
    MIN             reduce using rule 166 (empty -> .)
    MIN_EQ          reduce using rule 166 (empty -> .)
    MAY             reduce using rule 166 (empty -> .)
    MAY_EQ          reduce using rule 166 (empty -> .)
    DIF             reduce using rule 166 (empty -> .)
    EQ_EQ           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    RES_READ        reduce using rule 166 (empty -> .)
    RES_PRINT       reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    RES_DEF         reduce using rule 166 (empty -> .)
    RES_IF          reduce using rule 166 (empty -> .)
    RES_SWITCH      reduce using rule 166 (empty -> .)
    RES_WHILE       reduce using rule 166 (empty -> .)
    RES_FOR         reduce using rule 166 (empty -> .)
    RES_START       reduce using rule 166 (empty -> .)
    RES_FUNC        reduce using rule 166 (empty -> .)
    $end            reduce using rule 166 (empty -> .)
    RES_END         reduce using rule 166 (empty -> .)
    E_END           reduce using rule 166 (empty -> .)
    RES_ELSE        reduce using rule 166 (empty -> .)
    RES_CASE        reduce using rule 166 (empty -> .)
    COL             reduce using rule 166 (empty -> .)

    exp1                           shift and go to state 206
    see_operador_e                 shift and go to state 208
    empty                          shift and go to state 210

state 175

    (137) factor -> MINUS cons .

    TIMES           reduce using rule 137 (factor -> MINUS cons .)
    DIVIDE          reduce using rule 137 (factor -> MINUS cons .)
    PLUS            reduce using rule 137 (factor -> MINUS cons .)
    MINUS           reduce using rule 137 (factor -> MINUS cons .)
    MIN             reduce using rule 137 (factor -> MINUS cons .)
    MIN_EQ          reduce using rule 137 (factor -> MINUS cons .)
    MAY             reduce using rule 137 (factor -> MINUS cons .)
    MAY_EQ          reduce using rule 137 (factor -> MINUS cons .)
    DIF             reduce using rule 137 (factor -> MINUS cons .)
    EQ_EQ           reduce using rule 137 (factor -> MINUS cons .)
    RPAREN          reduce using rule 137 (factor -> MINUS cons .)
    COL             reduce using rule 137 (factor -> MINUS cons .)
    RES_READ        reduce using rule 137 (factor -> MINUS cons .)
    RES_PRINT       reduce using rule 137 (factor -> MINUS cons .)
    ID              reduce using rule 137 (factor -> MINUS cons .)
    RES_DEF         reduce using rule 137 (factor -> MINUS cons .)
    RES_IF          reduce using rule 137 (factor -> MINUS cons .)
    RES_SWITCH      reduce using rule 137 (factor -> MINUS cons .)
    RES_WHILE       reduce using rule 137 (factor -> MINUS cons .)
    RES_FOR         reduce using rule 137 (factor -> MINUS cons .)
    RES_START       reduce using rule 137 (factor -> MINUS cons .)
    RES_FUNC        reduce using rule 137 (factor -> MINUS cons .)
    $end            reduce using rule 137 (factor -> MINUS cons .)
    RES_END         reduce using rule 137 (factor -> MINUS cons .)
    E_END           reduce using rule 137 (factor -> MINUS cons .)
    RES_ELSE        reduce using rule 137 (factor -> MINUS cons .)
    RES_CASE        reduce using rule 137 (factor -> MINUS cons .)


state 176

    (126) termino -> factor cuadruplo_exp_5 . termino1
    (127) termino1 -> . see_operador_f cuadruplos_exp_3 termino
    (128) termino1 -> . empty
    (129) see_operador_f -> . TIMES
    (130) see_operador_f -> . DIVIDE
    (166) empty -> .

    TIMES           shift and go to state 214
    DIVIDE          shift and go to state 211
    PLUS            reduce using rule 166 (empty -> .)
    MINUS           reduce using rule 166 (empty -> .)
    MIN             reduce using rule 166 (empty -> .)
    MIN_EQ          reduce using rule 166 (empty -> .)
    MAY             reduce using rule 166 (empty -> .)
    MAY_EQ          reduce using rule 166 (empty -> .)
    DIF             reduce using rule 166 (empty -> .)
    EQ_EQ           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    RES_READ        reduce using rule 166 (empty -> .)
    RES_PRINT       reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    RES_DEF         reduce using rule 166 (empty -> .)
    RES_IF          reduce using rule 166 (empty -> .)
    RES_SWITCH      reduce using rule 166 (empty -> .)
    RES_WHILE       reduce using rule 166 (empty -> .)
    RES_FOR         reduce using rule 166 (empty -> .)
    RES_START       reduce using rule 166 (empty -> .)
    RES_FUNC        reduce using rule 166 (empty -> .)
    $end            reduce using rule 166 (empty -> .)
    RES_END         reduce using rule 166 (empty -> .)
    E_END           reduce using rule 166 (empty -> .)
    RES_ELSE        reduce using rule 166 (empty -> .)
    RES_CASE        reduce using rule 166 (empty -> .)
    COL             reduce using rule 166 (empty -> .)

    termino1                       shift and go to state 212
    see_operador_f                 shift and go to state 213
    empty                          shift and go to state 215

state 177

    (136) factor -> PLUS cons .

    TIMES           reduce using rule 136 (factor -> PLUS cons .)
    DIVIDE          reduce using rule 136 (factor -> PLUS cons .)
    PLUS            reduce using rule 136 (factor -> PLUS cons .)
    MINUS           reduce using rule 136 (factor -> PLUS cons .)
    MIN             reduce using rule 136 (factor -> PLUS cons .)
    MIN_EQ          reduce using rule 136 (factor -> PLUS cons .)
    MAY             reduce using rule 136 (factor -> PLUS cons .)
    MAY_EQ          reduce using rule 136 (factor -> PLUS cons .)
    DIF             reduce using rule 136 (factor -> PLUS cons .)
    EQ_EQ           reduce using rule 136 (factor -> PLUS cons .)
    RPAREN          reduce using rule 136 (factor -> PLUS cons .)
    COL             reduce using rule 136 (factor -> PLUS cons .)
    RES_READ        reduce using rule 136 (factor -> PLUS cons .)
    RES_PRINT       reduce using rule 136 (factor -> PLUS cons .)
    ID              reduce using rule 136 (factor -> PLUS cons .)
    RES_DEF         reduce using rule 136 (factor -> PLUS cons .)
    RES_IF          reduce using rule 136 (factor -> PLUS cons .)
    RES_SWITCH      reduce using rule 136 (factor -> PLUS cons .)
    RES_WHILE       reduce using rule 136 (factor -> PLUS cons .)
    RES_FOR         reduce using rule 136 (factor -> PLUS cons .)
    RES_START       reduce using rule 136 (factor -> PLUS cons .)
    RES_FUNC        reduce using rule 136 (factor -> PLUS cons .)
    $end            reduce using rule 136 (factor -> PLUS cons .)
    RES_END         reduce using rule 136 (factor -> PLUS cons .)
    E_END           reduce using rule 136 (factor -> PLUS cons .)
    RES_ELSE        reduce using rule 136 (factor -> PLUS cons .)
    RES_CASE        reduce using rule 136 (factor -> PLUS cons .)


state 178

    (95) if -> RES_IF LPAREN expresion RPAREN . cuadruplo_est_if_1 COL bloque ifelse
    (96) cuadruplo_est_if_1 -> .

    COL             reduce using rule 96 (cuadruplo_est_if_1 -> .)

    cuadruplo_est_if_1             shift and go to state 216

state 179

    (113) see_rel -> MIN_EQ .

    LPAREN          reduce using rule 113 (see_rel -> MIN_EQ .)
    PLUS            reduce using rule 113 (see_rel -> MIN_EQ .)
    MINUS           reduce using rule 113 (see_rel -> MIN_EQ .)
    ID              reduce using rule 113 (see_rel -> MIN_EQ .)
    CTE_INT         reduce using rule 113 (see_rel -> MIN_EQ .)
    CTE_FLOAT       reduce using rule 113 (see_rel -> MIN_EQ .)
    CTE_DOUBLE      reduce using rule 113 (see_rel -> MIN_EQ .)
    CTE_STRING      reduce using rule 113 (see_rel -> MIN_EQ .)
    RES_TRUE        reduce using rule 113 (see_rel -> MIN_EQ .)
    RES_FALSE       reduce using rule 113 (see_rel -> MIN_EQ .)


state 180

    (112) see_rel -> MIN .

    LPAREN          reduce using rule 112 (see_rel -> MIN .)
    PLUS            reduce using rule 112 (see_rel -> MIN .)
    MINUS           reduce using rule 112 (see_rel -> MIN .)
    ID              reduce using rule 112 (see_rel -> MIN .)
    CTE_INT         reduce using rule 112 (see_rel -> MIN .)
    CTE_FLOAT       reduce using rule 112 (see_rel -> MIN .)
    CTE_DOUBLE      reduce using rule 112 (see_rel -> MIN .)
    CTE_STRING      reduce using rule 112 (see_rel -> MIN .)
    RES_TRUE        reduce using rule 112 (see_rel -> MIN .)
    RES_FALSE       reduce using rule 112 (see_rel -> MIN .)


state 181

    (114) see_rel -> MAY .

    LPAREN          reduce using rule 114 (see_rel -> MAY .)
    PLUS            reduce using rule 114 (see_rel -> MAY .)
    MINUS           reduce using rule 114 (see_rel -> MAY .)
    ID              reduce using rule 114 (see_rel -> MAY .)
    CTE_INT         reduce using rule 114 (see_rel -> MAY .)
    CTE_FLOAT       reduce using rule 114 (see_rel -> MAY .)
    CTE_DOUBLE      reduce using rule 114 (see_rel -> MAY .)
    CTE_STRING      reduce using rule 114 (see_rel -> MAY .)
    RES_TRUE        reduce using rule 114 (see_rel -> MAY .)
    RES_FALSE       reduce using rule 114 (see_rel -> MAY .)


state 182

    (115) see_rel -> MAY_EQ .

    LPAREN          reduce using rule 115 (see_rel -> MAY_EQ .)
    PLUS            reduce using rule 115 (see_rel -> MAY_EQ .)
    MINUS           reduce using rule 115 (see_rel -> MAY_EQ .)
    ID              reduce using rule 115 (see_rel -> MAY_EQ .)
    CTE_INT         reduce using rule 115 (see_rel -> MAY_EQ .)
    CTE_FLOAT       reduce using rule 115 (see_rel -> MAY_EQ .)
    CTE_DOUBLE      reduce using rule 115 (see_rel -> MAY_EQ .)
    CTE_STRING      reduce using rule 115 (see_rel -> MAY_EQ .)
    RES_TRUE        reduce using rule 115 (see_rel -> MAY_EQ .)
    RES_FALSE       reduce using rule 115 (see_rel -> MAY_EQ .)


state 183

    (117) see_rel -> EQ_EQ .

    LPAREN          reduce using rule 117 (see_rel -> EQ_EQ .)
    PLUS            reduce using rule 117 (see_rel -> EQ_EQ .)
    MINUS           reduce using rule 117 (see_rel -> EQ_EQ .)
    ID              reduce using rule 117 (see_rel -> EQ_EQ .)
    CTE_INT         reduce using rule 117 (see_rel -> EQ_EQ .)
    CTE_FLOAT       reduce using rule 117 (see_rel -> EQ_EQ .)
    CTE_DOUBLE      reduce using rule 117 (see_rel -> EQ_EQ .)
    CTE_STRING      reduce using rule 117 (see_rel -> EQ_EQ .)
    RES_TRUE        reduce using rule 117 (see_rel -> EQ_EQ .)
    RES_FALSE       reduce using rule 117 (see_rel -> EQ_EQ .)


state 184

    (110) expresion_1 -> see_rel . cuadruplo_exp_8 exp
    (118) cuadruplo_exp_8 -> .

    LPAREN          reduce using rule 118 (cuadruplo_exp_8 -> .)
    PLUS            reduce using rule 118 (cuadruplo_exp_8 -> .)
    MINUS           reduce using rule 118 (cuadruplo_exp_8 -> .)
    ID              reduce using rule 118 (cuadruplo_exp_8 -> .)
    CTE_INT         reduce using rule 118 (cuadruplo_exp_8 -> .)
    CTE_FLOAT       reduce using rule 118 (cuadruplo_exp_8 -> .)
    CTE_DOUBLE      reduce using rule 118 (cuadruplo_exp_8 -> .)
    CTE_STRING      reduce using rule 118 (cuadruplo_exp_8 -> .)
    RES_TRUE        reduce using rule 118 (cuadruplo_exp_8 -> .)
    RES_FALSE       reduce using rule 118 (cuadruplo_exp_8 -> .)

    cuadruplo_exp_8                shift and go to state 217

state 185

    (109) expresion -> exp expresion_1 . cuadruplo_exp_9
    (119) cuadruplo_exp_9 -> .

    RPAREN          reduce using rule 119 (cuadruplo_exp_9 -> .)
    COL             reduce using rule 119 (cuadruplo_exp_9 -> .)

    cuadruplo_exp_9                shift and go to state 218

state 186

    (116) see_rel -> DIF .

    LPAREN          reduce using rule 116 (see_rel -> DIF .)
    PLUS            reduce using rule 116 (see_rel -> DIF .)
    MINUS           reduce using rule 116 (see_rel -> DIF .)
    ID              reduce using rule 116 (see_rel -> DIF .)
    CTE_INT         reduce using rule 116 (see_rel -> DIF .)
    CTE_FLOAT       reduce using rule 116 (see_rel -> DIF .)
    CTE_DOUBLE      reduce using rule 116 (see_rel -> DIF .)
    CTE_STRING      reduce using rule 116 (see_rel -> DIF .)
    RES_TRUE        reduce using rule 116 (see_rel -> DIF .)
    RES_FALSE       reduce using rule 116 (see_rel -> DIF .)


state 187

    (111) expresion_1 -> empty .

    RPAREN          reduce using rule 111 (expresion_1 -> empty .)
    COL             reduce using rule 111 (expresion_1 -> empty .)


state 188

    (80) asignarray -> LBRACKET . asignarray1 RBRACKET
    (81) asignarray1 -> . cons
    (82) asignarray1 -> . cons COMMA asignarray1
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    seen_int_cons                  shift and go to state 77
    seen_double_cons               shift and go to state 73
    cons                           shift and go to state 219
    seen_string_cons               shift and go to state 68
    seen_bool                      shift and go to state 67
    seen_float_cons                shift and go to state 69
    consarray                      shift and go to state 79
    seen_id_cons                   shift and go to state 70
    conslist                       shift and go to state 78
    asignarray1                    shift and go to state 220

state 189

    (77) asignlist -> LCURLY . asignlist1 RCURLY
    (78) asignlist1 -> . cons
    (79) asignlist1 -> . cons COMMA asignlist1
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    seen_int_cons                  shift and go to state 77
    asignlist1                     shift and go to state 221
    cons                           shift and go to state 222
    seen_string_cons               shift and go to state 68
    seen_double_cons               shift and go to state 73
    seen_float_cons                shift and go to state 69
    consarray                      shift and go to state 79
    seen_bool                      shift and go to state 67
    conslist                       shift and go to state 78
    seen_id_cons                   shift and go to state 70

state 190

    (76) asignacion1 -> asignarray .

    RES_READ        reduce using rule 76 (asignacion1 -> asignarray .)
    RES_PRINT       reduce using rule 76 (asignacion1 -> asignarray .)
    ID              reduce using rule 76 (asignacion1 -> asignarray .)
    RES_DEF         reduce using rule 76 (asignacion1 -> asignarray .)
    RES_IF          reduce using rule 76 (asignacion1 -> asignarray .)
    RES_SWITCH      reduce using rule 76 (asignacion1 -> asignarray .)
    RES_WHILE       reduce using rule 76 (asignacion1 -> asignarray .)
    RES_FOR         reduce using rule 76 (asignacion1 -> asignarray .)
    RES_START       reduce using rule 76 (asignacion1 -> asignarray .)
    RES_FUNC        reduce using rule 76 (asignacion1 -> asignarray .)
    $end            reduce using rule 76 (asignacion1 -> asignarray .)
    RES_END         reduce using rule 76 (asignacion1 -> asignarray .)
    E_END           reduce using rule 76 (asignacion1 -> asignarray .)
    RES_ELSE        reduce using rule 76 (asignacion1 -> asignarray .)
    RES_CASE        reduce using rule 76 (asignacion1 -> asignarray .)
    COL             reduce using rule 76 (asignacion1 -> asignarray .)
    RPAREN          reduce using rule 76 (asignacion1 -> asignarray .)


state 191

    (75) asignacion1 -> asignlist .

    RES_READ        reduce using rule 75 (asignacion1 -> asignlist .)
    RES_PRINT       reduce using rule 75 (asignacion1 -> asignlist .)
    ID              reduce using rule 75 (asignacion1 -> asignlist .)
    RES_DEF         reduce using rule 75 (asignacion1 -> asignlist .)
    RES_IF          reduce using rule 75 (asignacion1 -> asignlist .)
    RES_SWITCH      reduce using rule 75 (asignacion1 -> asignlist .)
    RES_WHILE       reduce using rule 75 (asignacion1 -> asignlist .)
    RES_FOR         reduce using rule 75 (asignacion1 -> asignlist .)
    RES_START       reduce using rule 75 (asignacion1 -> asignlist .)
    RES_FUNC        reduce using rule 75 (asignacion1 -> asignlist .)
    $end            reduce using rule 75 (asignacion1 -> asignlist .)
    RES_END         reduce using rule 75 (asignacion1 -> asignlist .)
    E_END           reduce using rule 75 (asignacion1 -> asignlist .)
    RES_ELSE        reduce using rule 75 (asignacion1 -> asignlist .)
    RES_CASE        reduce using rule 75 (asignacion1 -> asignlist .)
    COL             reduce using rule 75 (asignacion1 -> asignlist .)
    RPAREN          reduce using rule 75 (asignacion1 -> asignlist .)


state 192

    (74) asignacion1 -> exp .

    RES_READ        reduce using rule 74 (asignacion1 -> exp .)
    RES_PRINT       reduce using rule 74 (asignacion1 -> exp .)
    ID              reduce using rule 74 (asignacion1 -> exp .)
    RES_DEF         reduce using rule 74 (asignacion1 -> exp .)
    RES_IF          reduce using rule 74 (asignacion1 -> exp .)
    RES_SWITCH      reduce using rule 74 (asignacion1 -> exp .)
    RES_WHILE       reduce using rule 74 (asignacion1 -> exp .)
    RES_FOR         reduce using rule 74 (asignacion1 -> exp .)
    RES_START       reduce using rule 74 (asignacion1 -> exp .)
    RES_FUNC        reduce using rule 74 (asignacion1 -> exp .)
    $end            reduce using rule 74 (asignacion1 -> exp .)
    RES_END         reduce using rule 74 (asignacion1 -> exp .)
    E_END           reduce using rule 74 (asignacion1 -> exp .)
    RES_ELSE        reduce using rule 74 (asignacion1 -> exp .)
    RES_CASE        reduce using rule 74 (asignacion1 -> exp .)
    COL             reduce using rule 74 (asignacion1 -> exp .)
    RPAREN          reduce using rule 74 (asignacion1 -> exp .)


state 193

    (69) asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 . insert_asignacion cuadruplo_exp_9_asignacion
    (73) insert_asignacion -> .

    RES_READ        reduce using rule 73 (insert_asignacion -> .)
    RES_PRINT       reduce using rule 73 (insert_asignacion -> .)
    ID              reduce using rule 73 (insert_asignacion -> .)
    RES_DEF         reduce using rule 73 (insert_asignacion -> .)
    RES_IF          reduce using rule 73 (insert_asignacion -> .)
    RES_SWITCH      reduce using rule 73 (insert_asignacion -> .)
    RES_WHILE       reduce using rule 73 (insert_asignacion -> .)
    RES_FOR         reduce using rule 73 (insert_asignacion -> .)
    RES_START       reduce using rule 73 (insert_asignacion -> .)
    RES_FUNC        reduce using rule 73 (insert_asignacion -> .)
    $end            reduce using rule 73 (insert_asignacion -> .)
    RES_END         reduce using rule 73 (insert_asignacion -> .)
    E_END           reduce using rule 73 (insert_asignacion -> .)
    RES_ELSE        reduce using rule 73 (insert_asignacion -> .)
    RES_CASE        reduce using rule 73 (insert_asignacion -> .)
    COL             reduce using rule 73 (insert_asignacion -> .)
    RPAREN          reduce using rule 73 (insert_asignacion -> .)

    insert_asignacion              shift and go to state 223

state 194

    (67) escritura -> RES_PRINT LPAREN cons RPAREN . cuadruplo_est_prnt
    (68) cuadruplo_est_prnt -> .

    RES_READ        reduce using rule 68 (cuadruplo_est_prnt -> .)
    RES_PRINT       reduce using rule 68 (cuadruplo_est_prnt -> .)
    ID              reduce using rule 68 (cuadruplo_est_prnt -> .)
    RES_DEF         reduce using rule 68 (cuadruplo_est_prnt -> .)
    RES_IF          reduce using rule 68 (cuadruplo_est_prnt -> .)
    RES_SWITCH      reduce using rule 68 (cuadruplo_est_prnt -> .)
    RES_WHILE       reduce using rule 68 (cuadruplo_est_prnt -> .)
    RES_FOR         reduce using rule 68 (cuadruplo_est_prnt -> .)
    RES_START       reduce using rule 68 (cuadruplo_est_prnt -> .)
    RES_FUNC        reduce using rule 68 (cuadruplo_est_prnt -> .)
    $end            reduce using rule 68 (cuadruplo_est_prnt -> .)
    RES_END         reduce using rule 68 (cuadruplo_est_prnt -> .)
    E_END           reduce using rule 68 (cuadruplo_est_prnt -> .)
    RES_ELSE        reduce using rule 68 (cuadruplo_est_prnt -> .)
    RES_CASE        reduce using rule 68 (cuadruplo_est_prnt -> .)

    cuadruplo_est_prnt             shift and go to state 224

state 195

    (83) while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion . RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3

    RPAREN          shift and go to state 225


state 196

    (63) llamada -> ID LPAREN llamada1 RPAREN .

    RES_READ        reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_PRINT       reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    ID              reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_DEF         reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_IF          reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_SWITCH      reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_WHILE       reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_FOR         reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_END         reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_CASE        reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    E_END           reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_START       reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_FUNC        reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    $end            reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_ELSE        reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)


state 197

    (66) lectura -> RES_READ LPAREN tipo RPAREN .

    RES_READ        reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_PRINT       reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    ID              reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_DEF         reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_IF          reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_SWITCH      reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_WHILE       reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_FOR         reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    E_END           reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_START       reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_FUNC        reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    $end            reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_END         reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_ELSE        reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_CASE        reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)


state 198

    (102) switch -> RES_SWITCH LPAREN seen_exp_switch RPAREN . COL switch2

    COL             shift and go to state 226


state 199

    (165) conslist1 -> cons COMMA . conslist1
    (164) conslist1 -> . cons
    (165) conslist1 -> . cons COMMA conslist1
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    seen_int_cons                  shift and go to state 77
    seen_double_cons               shift and go to state 73
    cons                           shift and go to state 165
    seen_string_cons               shift and go to state 68
    seen_bool                      shift and go to state 67
    seen_float_cons                shift and go to state 69
    consarray                      shift and go to state 79
    conslist                       shift and go to state 78
    conslist1                      shift and go to state 227
    seen_id_cons                   shift and go to state 70

state 200

    (163) conslist -> ID EQUALS LCURLY conslist1 RCURLY .

    TIMES           reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    DIVIDE          reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    PLUS            reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MINUS           reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MIN             reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MIN_EQ          reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MAY             reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MAY_EQ          reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    DIF             reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    EQ_EQ           reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RPAREN          reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_READ        reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_PRINT       reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    ID              reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_DEF         reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_IF          reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_SWITCH      reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_WHILE       reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FOR         reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_START       reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FUNC        reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    $end            reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_END         reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    E_END           reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_ELSE        reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_CASE        reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    COL             reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    COMMA           reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RCURLY          reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_INT         reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FLOAT       reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_DOUBLE      reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_BOOLEAN     reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_STRING      reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_LIST        reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_ARRAY       reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RBRACKET        reduce using rule 163 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)


state 201

    (162) consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS . cons
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    seen_int_cons                  shift and go to state 77
    seen_double_cons               shift and go to state 73
    cons                           shift and go to state 228
    seen_string_cons               shift and go to state 68
    seen_bool                      shift and go to state 67
    seen_float_cons                shift and go to state 69
    consarray                      shift and go to state 79
    conslist                       shift and go to state 78
    seen_id_cons                   shift and go to state 70

state 202

    (44) array1 -> COL LBRACKET . array2 RBRACKET
    (46) array2 -> . cons
    (47) array2 -> . cons COMMA array2
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    seen_int_cons                  shift and go to state 77
    seen_double_cons               shift and go to state 73
    cons                           shift and go to state 229
    seen_string_cons               shift and go to state 68
    seen_bool                      shift and go to state 67
    array2                         shift and go to state 230
    consarray                      shift and go to state 79
    conslist                       shift and go to state 78
    seen_float_cons                shift and go to state 69
    seen_id_cons                   shift and go to state 70

state 203

    (89) forexp -> asignacion cuadruplo_est_for_1 COL . expresion cuadruplo_est_for_2 COL entra_update asignacion
    (109) expresion -> . exp expresion_1 cuadruplo_exp_9
    (120) exp -> . termino cuadruplo_exp_4 exp1
    (126) termino -> . factor cuadruplo_exp_5 termino1
    (134) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (135) factor -> . cons
    (136) factor -> . PLUS cons
    (137) factor -> . MINUS cons
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 148
    PLUS            shift and go to state 152
    MINUS           shift and go to state 150
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    cons                           shift and go to state 147
    seen_double_cons               shift and go to state 73
    termino                        shift and go to state 149
    seen_bool                      shift and go to state 67
    seen_string_cons               shift and go to state 68
    seen_float_cons                shift and go to state 69
    factor                         shift and go to state 151
    seen_int_cons                  shift and go to state 77
    seen_id_cons                   shift and go to state 70
    expresion                      shift and go to state 231
    conslist                       shift and go to state 78
    consarray                      shift and go to state 79
    exp                            shift and go to state 154

state 204

    (87) for -> RES_FOR LPAREN forexp RPAREN sale_update . COL bloque cuadruplo_est_for_3

    COL             shift and go to state 232


state 205

    (134) factor -> LPAREN cuadruplo_exp_6 exp . RPAREN cuadruplo_exp_7

    RPAREN          shift and go to state 233


state 206

    (120) exp -> termino cuadruplo_exp_4 exp1 .

    MIN             reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    MIN_EQ          reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    MAY             reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    MAY_EQ          reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    DIF             reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    EQ_EQ           reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    RPAREN          reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    COL             reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_READ        reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_PRINT       reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    ID              reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_DEF         reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_IF          reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_SWITCH      reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_WHILE       reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_FOR         reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_START       reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_FUNC        reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    $end            reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_END         reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    E_END           reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_ELSE        reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)
    RES_CASE        reduce using rule 120 (exp -> termino cuadruplo_exp_4 exp1 .)


state 207

    (123) see_operador_e -> PLUS .

    LPAREN          reduce using rule 123 (see_operador_e -> PLUS .)
    PLUS            reduce using rule 123 (see_operador_e -> PLUS .)
    MINUS           reduce using rule 123 (see_operador_e -> PLUS .)
    ID              reduce using rule 123 (see_operador_e -> PLUS .)
    CTE_INT         reduce using rule 123 (see_operador_e -> PLUS .)
    CTE_FLOAT       reduce using rule 123 (see_operador_e -> PLUS .)
    CTE_DOUBLE      reduce using rule 123 (see_operador_e -> PLUS .)
    CTE_STRING      reduce using rule 123 (see_operador_e -> PLUS .)
    RES_TRUE        reduce using rule 123 (see_operador_e -> PLUS .)
    RES_FALSE       reduce using rule 123 (see_operador_e -> PLUS .)


state 208

    (121) exp1 -> see_operador_e . cuadruplos_exp_2 exp
    (125) cuadruplos_exp_2 -> .

    LPAREN          reduce using rule 125 (cuadruplos_exp_2 -> .)
    PLUS            reduce using rule 125 (cuadruplos_exp_2 -> .)
    MINUS           reduce using rule 125 (cuadruplos_exp_2 -> .)
    ID              reduce using rule 125 (cuadruplos_exp_2 -> .)
    CTE_INT         reduce using rule 125 (cuadruplos_exp_2 -> .)
    CTE_FLOAT       reduce using rule 125 (cuadruplos_exp_2 -> .)
    CTE_DOUBLE      reduce using rule 125 (cuadruplos_exp_2 -> .)
    CTE_STRING      reduce using rule 125 (cuadruplos_exp_2 -> .)
    RES_TRUE        reduce using rule 125 (cuadruplos_exp_2 -> .)
    RES_FALSE       reduce using rule 125 (cuadruplos_exp_2 -> .)

    cuadruplos_exp_2               shift and go to state 234

state 209

    (124) see_operador_e -> MINUS .

    LPAREN          reduce using rule 124 (see_operador_e -> MINUS .)
    PLUS            reduce using rule 124 (see_operador_e -> MINUS .)
    MINUS           reduce using rule 124 (see_operador_e -> MINUS .)
    ID              reduce using rule 124 (see_operador_e -> MINUS .)
    CTE_INT         reduce using rule 124 (see_operador_e -> MINUS .)
    CTE_FLOAT       reduce using rule 124 (see_operador_e -> MINUS .)
    CTE_DOUBLE      reduce using rule 124 (see_operador_e -> MINUS .)
    CTE_STRING      reduce using rule 124 (see_operador_e -> MINUS .)
    RES_TRUE        reduce using rule 124 (see_operador_e -> MINUS .)
    RES_FALSE       reduce using rule 124 (see_operador_e -> MINUS .)


state 210

    (122) exp1 -> empty .

    MIN             reduce using rule 122 (exp1 -> empty .)
    MIN_EQ          reduce using rule 122 (exp1 -> empty .)
    MAY             reduce using rule 122 (exp1 -> empty .)
    MAY_EQ          reduce using rule 122 (exp1 -> empty .)
    DIF             reduce using rule 122 (exp1 -> empty .)
    EQ_EQ           reduce using rule 122 (exp1 -> empty .)
    RPAREN          reduce using rule 122 (exp1 -> empty .)
    RES_READ        reduce using rule 122 (exp1 -> empty .)
    RES_PRINT       reduce using rule 122 (exp1 -> empty .)
    ID              reduce using rule 122 (exp1 -> empty .)
    RES_DEF         reduce using rule 122 (exp1 -> empty .)
    RES_IF          reduce using rule 122 (exp1 -> empty .)
    RES_SWITCH      reduce using rule 122 (exp1 -> empty .)
    RES_WHILE       reduce using rule 122 (exp1 -> empty .)
    RES_FOR         reduce using rule 122 (exp1 -> empty .)
    RES_START       reduce using rule 122 (exp1 -> empty .)
    RES_FUNC        reduce using rule 122 (exp1 -> empty .)
    $end            reduce using rule 122 (exp1 -> empty .)
    RES_END         reduce using rule 122 (exp1 -> empty .)
    E_END           reduce using rule 122 (exp1 -> empty .)
    RES_ELSE        reduce using rule 122 (exp1 -> empty .)
    RES_CASE        reduce using rule 122 (exp1 -> empty .)
    COL             reduce using rule 122 (exp1 -> empty .)


state 211

    (130) see_operador_f -> DIVIDE .

    LPAREN          reduce using rule 130 (see_operador_f -> DIVIDE .)
    PLUS            reduce using rule 130 (see_operador_f -> DIVIDE .)
    MINUS           reduce using rule 130 (see_operador_f -> DIVIDE .)
    ID              reduce using rule 130 (see_operador_f -> DIVIDE .)
    CTE_INT         reduce using rule 130 (see_operador_f -> DIVIDE .)
    CTE_FLOAT       reduce using rule 130 (see_operador_f -> DIVIDE .)
    CTE_DOUBLE      reduce using rule 130 (see_operador_f -> DIVIDE .)
    CTE_STRING      reduce using rule 130 (see_operador_f -> DIVIDE .)
    RES_TRUE        reduce using rule 130 (see_operador_f -> DIVIDE .)
    RES_FALSE       reduce using rule 130 (see_operador_f -> DIVIDE .)


state 212

    (126) termino -> factor cuadruplo_exp_5 termino1 .

    PLUS            reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    MINUS           reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    RPAREN          reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    MIN             reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    MIN_EQ          reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    MAY             reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    MAY_EQ          reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    DIF             reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    EQ_EQ           reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    COL             reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_READ        reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_PRINT       reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    ID              reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_DEF         reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_IF          reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_SWITCH      reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_WHILE       reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_FOR         reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_START       reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_FUNC        reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    $end            reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_END         reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    E_END           reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_ELSE        reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)
    RES_CASE        reduce using rule 126 (termino -> factor cuadruplo_exp_5 termino1 .)


state 213

    (127) termino1 -> see_operador_f . cuadruplos_exp_3 termino
    (131) cuadruplos_exp_3 -> .

    LPAREN          reduce using rule 131 (cuadruplos_exp_3 -> .)
    PLUS            reduce using rule 131 (cuadruplos_exp_3 -> .)
    MINUS           reduce using rule 131 (cuadruplos_exp_3 -> .)
    ID              reduce using rule 131 (cuadruplos_exp_3 -> .)
    CTE_INT         reduce using rule 131 (cuadruplos_exp_3 -> .)
    CTE_FLOAT       reduce using rule 131 (cuadruplos_exp_3 -> .)
    CTE_DOUBLE      reduce using rule 131 (cuadruplos_exp_3 -> .)
    CTE_STRING      reduce using rule 131 (cuadruplos_exp_3 -> .)
    RES_TRUE        reduce using rule 131 (cuadruplos_exp_3 -> .)
    RES_FALSE       reduce using rule 131 (cuadruplos_exp_3 -> .)

    cuadruplos_exp_3               shift and go to state 235

state 214

    (129) see_operador_f -> TIMES .

    LPAREN          reduce using rule 129 (see_operador_f -> TIMES .)
    PLUS            reduce using rule 129 (see_operador_f -> TIMES .)
    MINUS           reduce using rule 129 (see_operador_f -> TIMES .)
    ID              reduce using rule 129 (see_operador_f -> TIMES .)
    CTE_INT         reduce using rule 129 (see_operador_f -> TIMES .)
    CTE_FLOAT       reduce using rule 129 (see_operador_f -> TIMES .)
    CTE_DOUBLE      reduce using rule 129 (see_operador_f -> TIMES .)
    CTE_STRING      reduce using rule 129 (see_operador_f -> TIMES .)
    RES_TRUE        reduce using rule 129 (see_operador_f -> TIMES .)
    RES_FALSE       reduce using rule 129 (see_operador_f -> TIMES .)


state 215

    (128) termino1 -> empty .

    PLUS            reduce using rule 128 (termino1 -> empty .)
    MINUS           reduce using rule 128 (termino1 -> empty .)
    MIN             reduce using rule 128 (termino1 -> empty .)
    MIN_EQ          reduce using rule 128 (termino1 -> empty .)
    MAY             reduce using rule 128 (termino1 -> empty .)
    MAY_EQ          reduce using rule 128 (termino1 -> empty .)
    DIF             reduce using rule 128 (termino1 -> empty .)
    EQ_EQ           reduce using rule 128 (termino1 -> empty .)
    RPAREN          reduce using rule 128 (termino1 -> empty .)
    RES_READ        reduce using rule 128 (termino1 -> empty .)
    RES_PRINT       reduce using rule 128 (termino1 -> empty .)
    ID              reduce using rule 128 (termino1 -> empty .)
    RES_DEF         reduce using rule 128 (termino1 -> empty .)
    RES_IF          reduce using rule 128 (termino1 -> empty .)
    RES_SWITCH      reduce using rule 128 (termino1 -> empty .)
    RES_WHILE       reduce using rule 128 (termino1 -> empty .)
    RES_FOR         reduce using rule 128 (termino1 -> empty .)
    RES_START       reduce using rule 128 (termino1 -> empty .)
    RES_FUNC        reduce using rule 128 (termino1 -> empty .)
    $end            reduce using rule 128 (termino1 -> empty .)
    RES_END         reduce using rule 128 (termino1 -> empty .)
    E_END           reduce using rule 128 (termino1 -> empty .)
    RES_ELSE        reduce using rule 128 (termino1 -> empty .)
    RES_CASE        reduce using rule 128 (termino1 -> empty .)
    COL             reduce using rule 128 (termino1 -> empty .)


state 216

    (95) if -> RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 . COL bloque ifelse

    COL             shift and go to state 236


state 217

    (110) expresion_1 -> see_rel cuadruplo_exp_8 . exp
    (120) exp -> . termino cuadruplo_exp_4 exp1
    (126) termino -> . factor cuadruplo_exp_5 termino1
    (134) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (135) factor -> . cons
    (136) factor -> . PLUS cons
    (137) factor -> . MINUS cons
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 148
    PLUS            shift and go to state 152
    MINUS           shift and go to state 150
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    cons                           shift and go to state 147
    termino                        shift and go to state 149
    seen_bool                      shift and go to state 67
    seen_string_cons               shift and go to state 68
    seen_float_cons                shift and go to state 69
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 73
    seen_id_cons                   shift and go to state 70
    seen_int_cons                  shift and go to state 77
    conslist                       shift and go to state 78
    consarray                      shift and go to state 79
    exp                            shift and go to state 237

state 218

    (109) expresion -> exp expresion_1 cuadruplo_exp_9 .

    RPAREN          reduce using rule 109 (expresion -> exp expresion_1 cuadruplo_exp_9 .)
    COL             reduce using rule 109 (expresion -> exp expresion_1 cuadruplo_exp_9 .)


state 219

    (81) asignarray1 -> cons .
    (82) asignarray1 -> cons . COMMA asignarray1

    RBRACKET        reduce using rule 81 (asignarray1 -> cons .)
    COMMA           shift and go to state 238


state 220

    (80) asignarray -> LBRACKET asignarray1 . RBRACKET

    RBRACKET        shift and go to state 239


state 221

    (77) asignlist -> LCURLY asignlist1 . RCURLY

    RCURLY          shift and go to state 240


state 222

    (78) asignlist1 -> cons .
    (79) asignlist1 -> cons . COMMA asignlist1

    RCURLY          reduce using rule 78 (asignlist1 -> cons .)
    COMMA           shift and go to state 241


state 223

    (69) asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion . cuadruplo_exp_9_asignacion
    (71) cuadruplo_exp_9_asignacion -> .

    RES_READ        reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    RES_PRINT       reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    ID              reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    RES_DEF         reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    RES_IF          reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    RES_SWITCH      reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    RES_WHILE       reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    RES_FOR         reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    RES_START       reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    RES_FUNC        reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    $end            reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    RES_END         reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    E_END           reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    RES_ELSE        reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    RES_CASE        reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    COL             reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)
    RPAREN          reduce using rule 71 (cuadruplo_exp_9_asignacion -> .)

    cuadruplo_exp_9_asignacion     shift and go to state 242

state 224

    (67) escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .

    RES_READ        reduce using rule 67 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_PRINT       reduce using rule 67 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    ID              reduce using rule 67 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_DEF         reduce using rule 67 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_IF          reduce using rule 67 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_SWITCH      reduce using rule 67 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_WHILE       reduce using rule 67 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_FOR         reduce using rule 67 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    E_END           reduce using rule 67 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_START       reduce using rule 67 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_FUNC        reduce using rule 67 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    $end            reduce using rule 67 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_END         reduce using rule 67 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_ELSE        reduce using rule 67 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)
    RES_CASE        reduce using rule 67 (escritura -> RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt .)


state 225

    (83) while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN . cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (85) cuadruplo_est_while_2 -> .

    COL             reduce using rule 85 (cuadruplo_est_while_2 -> .)

    cuadruplo_est_while_2          shift and go to state 243

state 226

    (102) switch -> RES_SWITCH LPAREN seen_exp_switch RPAREN COL . switch2
    (104) switch2 -> . RES_CASE seen_exp_case COL seen_case_3 bloque seen_case_4 switch2
    (105) switch2 -> . empty
    (166) empty -> .

    RES_CASE        shift and go to state 245
    E_END           reduce using rule 166 (empty -> .)

    switch2                        shift and go to state 244
    empty                          shift and go to state 246

state 227

    (165) conslist1 -> cons COMMA conslist1 .

    RCURLY          reduce using rule 165 (conslist1 -> cons COMMA conslist1 .)


state 228

    (162) consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .

    COMMA           reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RCURLY          reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RPAREN          reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    TIMES           reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    DIVIDE          reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    PLUS            reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MINUS           reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MIN             reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MIN_EQ          reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MAY             reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MAY_EQ          reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    DIF             reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    EQ_EQ           reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    COL             reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_READ        reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_PRINT       reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    ID              reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_DEF         reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_IF          reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_SWITCH      reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_WHILE       reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_FOR         reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_START       reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_FUNC        reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    $end            reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_END         reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    E_END           reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_ELSE        reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_CASE        reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RBRACKET        reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_INT         reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_FLOAT       reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_DOUBLE      reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_BOOLEAN     reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_STRING      reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_LIST        reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_ARRAY       reduce using rule 162 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)


state 229

    (46) array2 -> cons .
    (47) array2 -> cons . COMMA array2

    RBRACKET        reduce using rule 46 (array2 -> cons .)
    COMMA           shift and go to state 247


state 230

    (44) array1 -> COL LBRACKET array2 . RBRACKET

    RBRACKET        shift and go to state 248


state 231

    (89) forexp -> asignacion cuadruplo_est_for_1 COL expresion . cuadruplo_est_for_2 COL entra_update asignacion
    (92) cuadruplo_est_for_2 -> .

    COL             reduce using rule 92 (cuadruplo_est_for_2 -> .)

    cuadruplo_est_for_2            shift and go to state 249

state 232

    (87) for -> RES_FOR LPAREN forexp RPAREN sale_update COL . bloque cuadruplo_est_for_3
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (166) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (69) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (95) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (102) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (83) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (87) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (72) seen_id_asignacion -> . ID

    E_END           reduce using rule 166 (empty -> .)
    RES_READ        shift and go to state 107
    RES_PRINT       shift and go to state 101
    ID              shift and go to state 106
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 93
    RES_SWITCH      shift and go to state 109
    RES_WHILE       shift and go to state 105
    RES_FOR         shift and go to state 91

    vars                           shift and go to state 90
    bloque                         shift and go to state 250
    if                             shift and go to state 94
    ciclo                          shift and go to state 95
    seen_id_asignacion             shift and go to state 96
    switch                         shift and go to state 97
    llamada                        shift and go to state 99
    condicion                      shift and go to state 100
    lectura                        shift and go to state 102
    empty                          shift and go to state 103
    estatutos                      shift and go to state 104
    for                            shift and go to state 98
    asignacion                     shift and go to state 108
    while                          shift and go to state 110
    escritura                      shift and go to state 111

state 233

    (134) factor -> LPAREN cuadruplo_exp_6 exp RPAREN . cuadruplo_exp_7
    (139) cuadruplo_exp_7 -> .

    TIMES           reduce using rule 139 (cuadruplo_exp_7 -> .)
    DIVIDE          reduce using rule 139 (cuadruplo_exp_7 -> .)
    PLUS            reduce using rule 139 (cuadruplo_exp_7 -> .)
    MINUS           reduce using rule 139 (cuadruplo_exp_7 -> .)
    MIN             reduce using rule 139 (cuadruplo_exp_7 -> .)
    MIN_EQ          reduce using rule 139 (cuadruplo_exp_7 -> .)
    MAY             reduce using rule 139 (cuadruplo_exp_7 -> .)
    MAY_EQ          reduce using rule 139 (cuadruplo_exp_7 -> .)
    DIF             reduce using rule 139 (cuadruplo_exp_7 -> .)
    EQ_EQ           reduce using rule 139 (cuadruplo_exp_7 -> .)
    RPAREN          reduce using rule 139 (cuadruplo_exp_7 -> .)
    RES_READ        reduce using rule 139 (cuadruplo_exp_7 -> .)
    RES_PRINT       reduce using rule 139 (cuadruplo_exp_7 -> .)
    ID              reduce using rule 139 (cuadruplo_exp_7 -> .)
    RES_DEF         reduce using rule 139 (cuadruplo_exp_7 -> .)
    RES_IF          reduce using rule 139 (cuadruplo_exp_7 -> .)
    RES_SWITCH      reduce using rule 139 (cuadruplo_exp_7 -> .)
    RES_WHILE       reduce using rule 139 (cuadruplo_exp_7 -> .)
    RES_FOR         reduce using rule 139 (cuadruplo_exp_7 -> .)
    RES_START       reduce using rule 139 (cuadruplo_exp_7 -> .)
    RES_FUNC        reduce using rule 139 (cuadruplo_exp_7 -> .)
    $end            reduce using rule 139 (cuadruplo_exp_7 -> .)
    RES_END         reduce using rule 139 (cuadruplo_exp_7 -> .)
    E_END           reduce using rule 139 (cuadruplo_exp_7 -> .)
    RES_ELSE        reduce using rule 139 (cuadruplo_exp_7 -> .)
    RES_CASE        reduce using rule 139 (cuadruplo_exp_7 -> .)
    COL             reduce using rule 139 (cuadruplo_exp_7 -> .)

    cuadruplo_exp_7                shift and go to state 251

state 234

    (121) exp1 -> see_operador_e cuadruplos_exp_2 . exp
    (120) exp -> . termino cuadruplo_exp_4 exp1
    (126) termino -> . factor cuadruplo_exp_5 termino1
    (134) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (135) factor -> . cons
    (136) factor -> . PLUS cons
    (137) factor -> . MINUS cons
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 148
    PLUS            shift and go to state 152
    MINUS           shift and go to state 150
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    cons                           shift and go to state 147
    termino                        shift and go to state 149
    seen_bool                      shift and go to state 67
    seen_string_cons               shift and go to state 68
    seen_float_cons                shift and go to state 69
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 73
    seen_id_cons                   shift and go to state 70
    seen_int_cons                  shift and go to state 77
    conslist                       shift and go to state 78
    consarray                      shift and go to state 79
    exp                            shift and go to state 252

state 235

    (127) termino1 -> see_operador_f cuadruplos_exp_3 . termino
    (126) termino -> . factor cuadruplo_exp_5 termino1
    (134) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (135) factor -> . cons
    (136) factor -> . PLUS cons
    (137) factor -> . MINUS cons
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 148
    PLUS            shift and go to state 152
    MINUS           shift and go to state 150
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    cons                           shift and go to state 147
    termino                        shift and go to state 253
    seen_bool                      shift and go to state 67
    seen_string_cons               shift and go to state 68
    seen_float_cons                shift and go to state 69
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 73
    seen_id_cons                   shift and go to state 70
    seen_int_cons                  shift and go to state 77
    conslist                       shift and go to state 78
    consarray                      shift and go to state 79

state 236

    (95) if -> RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL . bloque ifelse
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (166) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (69) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (95) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (102) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (83) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (87) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (72) seen_id_asignacion -> . ID

    RES_ELSE        reduce using rule 166 (empty -> .)
    E_END           reduce using rule 166 (empty -> .)
    RES_READ        shift and go to state 107
    RES_PRINT       shift and go to state 101
    ID              shift and go to state 106
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 93
    RES_SWITCH      shift and go to state 109
    RES_WHILE       shift and go to state 105
    RES_FOR         shift and go to state 91

    vars                           shift and go to state 90
    bloque                         shift and go to state 254
    if                             shift and go to state 94
    ciclo                          shift and go to state 95
    seen_id_asignacion             shift and go to state 96
    switch                         shift and go to state 97
    for                            shift and go to state 98
    llamada                        shift and go to state 99
    condicion                      shift and go to state 100
    lectura                        shift and go to state 102
    empty                          shift and go to state 103
    estatutos                      shift and go to state 104
    asignacion                     shift and go to state 108
    while                          shift and go to state 110
    escritura                      shift and go to state 111

state 237

    (110) expresion_1 -> see_rel cuadruplo_exp_8 exp .

    RPAREN          reduce using rule 110 (expresion_1 -> see_rel cuadruplo_exp_8 exp .)
    COL             reduce using rule 110 (expresion_1 -> see_rel cuadruplo_exp_8 exp .)


state 238

    (82) asignarray1 -> cons COMMA . asignarray1
    (81) asignarray1 -> . cons
    (82) asignarray1 -> . cons COMMA asignarray1
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    seen_int_cons                  shift and go to state 77
    seen_double_cons               shift and go to state 73
    cons                           shift and go to state 219
    seen_string_cons               shift and go to state 68
    seen_bool                      shift and go to state 67
    seen_float_cons                shift and go to state 69
    consarray                      shift and go to state 79
    seen_id_cons                   shift and go to state 70
    conslist                       shift and go to state 78
    asignarray1                    shift and go to state 255

state 239

    (80) asignarray -> LBRACKET asignarray1 RBRACKET .

    RES_READ        reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_PRINT       reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    ID              reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_DEF         reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_IF          reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_SWITCH      reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_WHILE       reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_FOR         reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_START       reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_FUNC        reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    $end            reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_END         reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    E_END           reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_ELSE        reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_CASE        reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    COL             reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RPAREN          reduce using rule 80 (asignarray -> LBRACKET asignarray1 RBRACKET .)


state 240

    (77) asignlist -> LCURLY asignlist1 RCURLY .

    RES_READ        reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_PRINT       reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    ID              reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_DEF         reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_IF          reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_SWITCH      reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_WHILE       reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_FOR         reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_START       reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_FUNC        reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    $end            reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_END         reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    E_END           reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_ELSE        reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_CASE        reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    COL             reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)
    RPAREN          reduce using rule 77 (asignlist -> LCURLY asignlist1 RCURLY .)


state 241

    (79) asignlist1 -> cons COMMA . asignlist1
    (78) asignlist1 -> . cons
    (79) asignlist1 -> . cons COMMA asignlist1
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    seen_int_cons                  shift and go to state 77
    asignlist1                     shift and go to state 256
    cons                           shift and go to state 222
    seen_string_cons               shift and go to state 68
    seen_double_cons               shift and go to state 73
    seen_float_cons                shift and go to state 69
    consarray                      shift and go to state 79
    seen_bool                      shift and go to state 67
    conslist                       shift and go to state 78
    seen_id_cons                   shift and go to state 70

state 242

    (69) asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .

    RES_READ        reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_PRINT       reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    ID              reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_DEF         reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_IF          reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_SWITCH      reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_WHILE       reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_FOR         reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    E_END           reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_CASE        reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    COL             reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_ELSE        reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_START       reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_FUNC        reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    $end            reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RES_END         reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)
    RPAREN          reduce using rule 69 (asignacion -> seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion .)


state 243

    (83) while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 . COL bloque cuadruplo_est_while_3

    COL             shift and go to state 257


state 244

    (102) switch -> RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2 .

    E_END           reduce using rule 102 (switch -> RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2 .)


state 245

    (104) switch2 -> RES_CASE . seen_exp_case COL seen_case_3 bloque seen_case_4 switch2
    (108) seen_exp_case -> . exp
    (120) exp -> . termino cuadruplo_exp_4 exp1
    (126) termino -> . factor cuadruplo_exp_5 termino1
    (134) factor -> . LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
    (135) factor -> . cons
    (136) factor -> . PLUS cons
    (137) factor -> . MINUS cons
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 148
    PLUS            shift and go to state 152
    MINUS           shift and go to state 150
    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    cons                           shift and go to state 147
    termino                        shift and go to state 149
    seen_bool                      shift and go to state 67
    seen_string_cons               shift and go to state 68
    factor                         shift and go to state 151
    seen_double_cons               shift and go to state 73
    seen_id_cons                   shift and go to state 70
    seen_int_cons                  shift and go to state 77
    seen_exp_case                  shift and go to state 258
    conslist                       shift and go to state 78
    consarray                      shift and go to state 79
    exp                            shift and go to state 259
    seen_float_cons                shift and go to state 69

state 246

    (105) switch2 -> empty .

    E_END           reduce using rule 105 (switch2 -> empty .)


state 247

    (47) array2 -> cons COMMA . array2
    (46) array2 -> . cons
    (47) array2 -> . cons COMMA array2
    (140) cons -> . seen_id_cons exp_1
    (141) cons -> . seen_int_cons exp_cons_int
    (142) cons -> . seen_float_cons exp_cons_float
    (143) cons -> . seen_double_cons exp_cons_double
    (144) cons -> . seen_string_cons exp_cons_string
    (145) cons -> . seen_bool
    (146) cons -> . consarray
    (147) cons -> . conslist
    (150) seen_id_cons -> . ID
    (154) seen_int_cons -> . CTE_INT
    (151) seen_float_cons -> . CTE_FLOAT
    (152) seen_double_cons -> . CTE_DOUBLE
    (153) seen_string_cons -> . CTE_STRING
    (148) seen_bool -> . RES_TRUE
    (149) seen_bool -> . RES_FALSE
    (162) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (163) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    ID              shift and go to state 76
    CTE_INT         shift and go to state 75
    CTE_FLOAT       shift and go to state 80
    CTE_DOUBLE      shift and go to state 74
    CTE_STRING      shift and go to state 72
    RES_TRUE        shift and go to state 71
    RES_FALSE       shift and go to state 81

    seen_int_cons                  shift and go to state 77
    seen_double_cons               shift and go to state 73
    cons                           shift and go to state 229
    seen_string_cons               shift and go to state 68
    seen_bool                      shift and go to state 67
    array2                         shift and go to state 260
    consarray                      shift and go to state 79
    conslist                       shift and go to state 78
    seen_float_cons                shift and go to state 69
    seen_id_cons                   shift and go to state 70

state 248

    (44) array1 -> COL LBRACKET array2 RBRACKET .

    RES_INT         reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_FLOAT       reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_DOUBLE      reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_BOOLEAN     reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_STRING      reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_LIST        reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_ARRAY       reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    ID              reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RPAREN          reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)


state 249

    (89) forexp -> asignacion cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 . COL entra_update asignacion

    COL             shift and go to state 261


state 250

    (87) for -> RES_FOR LPAREN forexp RPAREN sale_update COL bloque . cuadruplo_est_for_3
    (93) cuadruplo_est_for_3 -> .

    E_END           reduce using rule 93 (cuadruplo_est_for_3 -> .)

    cuadruplo_est_for_3            shift and go to state 262

state 251

    (134) factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .

    TIMES           reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    DIVIDE          reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    PLUS            reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    MINUS           reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    MIN             reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    MIN_EQ          reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    MAY             reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    MAY_EQ          reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    DIF             reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    EQ_EQ           reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RPAREN          reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    COL             reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_READ        reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_PRINT       reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    ID              reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_DEF         reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_IF          reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_SWITCH      reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_WHILE       reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_FOR         reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_START       reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_FUNC        reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    $end            reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_END         reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    E_END           reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_ELSE        reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)
    RES_CASE        reduce using rule 134 (factor -> LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7 .)


state 252

    (121) exp1 -> see_operador_e cuadruplos_exp_2 exp .

    MIN             reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    MIN_EQ          reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    MAY             reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    MAY_EQ          reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    DIF             reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    EQ_EQ           reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RPAREN          reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_READ        reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_PRINT       reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    ID              reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_DEF         reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_IF          reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_SWITCH      reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_WHILE       reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_FOR         reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_START       reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_FUNC        reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    $end            reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_END         reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    E_END           reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_ELSE        reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    RES_CASE        reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)
    COL             reduce using rule 121 (exp1 -> see_operador_e cuadruplos_exp_2 exp .)


state 253

    (127) termino1 -> see_operador_f cuadruplos_exp_3 termino .

    PLUS            reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    MINUS           reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    MIN             reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    MIN_EQ          reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    MAY             reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    MAY_EQ          reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    DIF             reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    EQ_EQ           reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RPAREN          reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_READ        reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_PRINT       reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    ID              reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_DEF         reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_IF          reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_SWITCH      reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_WHILE       reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_FOR         reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_START       reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_FUNC        reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    $end            reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_END         reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    E_END           reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_ELSE        reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    RES_CASE        reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)
    COL             reduce using rule 127 (termino1 -> see_operador_f cuadruplos_exp_3 termino .)


state 254

    (95) if -> RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque . ifelse
    (97) ifelse -> . cuadruplo_est_if_else_2 RES_ELSE COL bloque cuadruplo_est_if_else_3
    (98) ifelse -> . empty cuadruplo_est_if_2
    (100) cuadruplo_est_if_else_2 -> .
    (166) empty -> .

    RES_ELSE        reduce using rule 100 (cuadruplo_est_if_else_2 -> .)
    E_END           reduce using rule 166 (empty -> .)

    ifelse                         shift and go to state 263
    cuadruplo_est_if_else_2        shift and go to state 265
    empty                          shift and go to state 264

state 255

    (82) asignarray1 -> cons COMMA asignarray1 .

    RBRACKET        reduce using rule 82 (asignarray1 -> cons COMMA asignarray1 .)


state 256

    (79) asignlist1 -> cons COMMA asignlist1 .

    RCURLY          reduce using rule 79 (asignlist1 -> cons COMMA asignlist1 .)


state 257

    (83) while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL . bloque cuadruplo_est_while_3
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (166) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (69) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (95) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (102) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (83) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (87) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (72) seen_id_asignacion -> . ID

    E_END           reduce using rule 166 (empty -> .)
    RES_READ        shift and go to state 107
    RES_PRINT       shift and go to state 101
    ID              shift and go to state 106
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 93
    RES_SWITCH      shift and go to state 109
    RES_WHILE       shift and go to state 105
    RES_FOR         shift and go to state 91

    vars                           shift and go to state 90
    bloque                         shift and go to state 266
    if                             shift and go to state 94
    seen_id_asignacion             shift and go to state 96
    switch                         shift and go to state 97
    for                            shift and go to state 98
    llamada                        shift and go to state 99
    condicion                      shift and go to state 100
    lectura                        shift and go to state 102
    empty                          shift and go to state 103
    estatutos                      shift and go to state 104
    ciclo                          shift and go to state 95
    asignacion                     shift and go to state 108
    while                          shift and go to state 110
    escritura                      shift and go to state 111

state 258

    (104) switch2 -> RES_CASE seen_exp_case . COL seen_case_3 bloque seen_case_4 switch2

    COL             shift and go to state 267


state 259

    (108) seen_exp_case -> exp .

    COL             reduce using rule 108 (seen_exp_case -> exp .)


state 260

    (47) array2 -> cons COMMA array2 .

    RBRACKET        reduce using rule 47 (array2 -> cons COMMA array2 .)


state 261

    (89) forexp -> asignacion cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 COL . entra_update asignacion
    (90) entra_update -> .

    ID              reduce using rule 90 (entra_update -> .)

    entra_update                   shift and go to state 268

state 262

    (87) for -> RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3 .

    E_END           reduce using rule 87 (for -> RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3 .)


state 263

    (95) if -> RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse .

    E_END           reduce using rule 95 (if -> RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse .)


state 264

    (98) ifelse -> empty . cuadruplo_est_if_2
    (99) cuadruplo_est_if_2 -> .

    E_END           reduce using rule 99 (cuadruplo_est_if_2 -> .)

    cuadruplo_est_if_2             shift and go to state 269

state 265

    (97) ifelse -> cuadruplo_est_if_else_2 . RES_ELSE COL bloque cuadruplo_est_if_else_3

    RES_ELSE        shift and go to state 270


state 266

    (83) while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque . cuadruplo_est_while_3
    (86) cuadruplo_est_while_3 -> .

    E_END           reduce using rule 86 (cuadruplo_est_while_3 -> .)

    cuadruplo_est_while_3          shift and go to state 271

state 267

    (104) switch2 -> RES_CASE seen_exp_case COL . seen_case_3 bloque seen_case_4 switch2
    (106) seen_case_3 -> .

    RES_READ        reduce using rule 106 (seen_case_3 -> .)
    RES_PRINT       reduce using rule 106 (seen_case_3 -> .)
    ID              reduce using rule 106 (seen_case_3 -> .)
    RES_DEF         reduce using rule 106 (seen_case_3 -> .)
    RES_IF          reduce using rule 106 (seen_case_3 -> .)
    RES_SWITCH      reduce using rule 106 (seen_case_3 -> .)
    RES_WHILE       reduce using rule 106 (seen_case_3 -> .)
    RES_FOR         reduce using rule 106 (seen_case_3 -> .)
    RES_CASE        reduce using rule 106 (seen_case_3 -> .)
    E_END           reduce using rule 106 (seen_case_3 -> .)

    seen_case_3                    shift and go to state 272

state 268

    (89) forexp -> asignacion cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 COL entra_update . asignacion
    (69) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (72) seen_id_asignacion -> . ID

    ID              shift and go to state 145

    asignacion                     shift and go to state 273
    seen_id_asignacion             shift and go to state 96

state 269

    (98) ifelse -> empty cuadruplo_est_if_2 .

    E_END           reduce using rule 98 (ifelse -> empty cuadruplo_est_if_2 .)


state 270

    (97) ifelse -> cuadruplo_est_if_else_2 RES_ELSE . COL bloque cuadruplo_est_if_else_3

    COL             shift and go to state 274


state 271

    (83) while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3 .

    E_END           reduce using rule 83 (while -> RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3 .)


state 272

    (104) switch2 -> RES_CASE seen_exp_case COL seen_case_3 . bloque seen_case_4 switch2
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (166) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (69) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (95) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (102) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (83) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (87) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (72) seen_id_asignacion -> . ID

    RES_CASE        reduce using rule 166 (empty -> .)
    E_END           reduce using rule 166 (empty -> .)
    RES_READ        shift and go to state 107
    RES_PRINT       shift and go to state 101
    ID              shift and go to state 106
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 93
    RES_SWITCH      shift and go to state 109
    RES_WHILE       shift and go to state 105
    RES_FOR         shift and go to state 91

    vars                           shift and go to state 90
    bloque                         shift and go to state 275
    if                             shift and go to state 94
    ciclo                          shift and go to state 95
    seen_id_asignacion             shift and go to state 96
    switch                         shift and go to state 97
    llamada                        shift and go to state 99
    condicion                      shift and go to state 100
    lectura                        shift and go to state 102
    empty                          shift and go to state 103
    estatutos                      shift and go to state 104
    for                            shift and go to state 98
    asignacion                     shift and go to state 108
    while                          shift and go to state 110
    escritura                      shift and go to state 111

state 273

    (89) forexp -> asignacion cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 COL entra_update asignacion .

    RPAREN          reduce using rule 89 (forexp -> asignacion cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 COL entra_update asignacion .)


state 274

    (97) ifelse -> cuadruplo_est_if_else_2 RES_ELSE COL . bloque cuadruplo_est_if_else_3
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (166) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
    (69) asignacion -> . seen_id_asignacion EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (95) if -> . RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL bloque ifelse
    (102) switch -> . RES_SWITCH LPAREN seen_exp_switch RPAREN COL switch2
    (83) while -> . RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL bloque cuadruplo_est_while_3
    (87) for -> . RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3
    (72) seen_id_asignacion -> . ID

    E_END           reduce using rule 166 (empty -> .)
    RES_READ        shift and go to state 107
    RES_PRINT       shift and go to state 101
    ID              shift and go to state 106
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 93
    RES_SWITCH      shift and go to state 109
    RES_WHILE       shift and go to state 105
    RES_FOR         shift and go to state 91

    vars                           shift and go to state 90
    bloque                         shift and go to state 276
    if                             shift and go to state 94
    ciclo                          shift and go to state 95
    seen_id_asignacion             shift and go to state 96
    switch                         shift and go to state 97
    llamada                        shift and go to state 99
    condicion                      shift and go to state 100
    lectura                        shift and go to state 102
    empty                          shift and go to state 103
    estatutos                      shift and go to state 104
    for                            shift and go to state 98
    asignacion                     shift and go to state 108
    while                          shift and go to state 110
    escritura                      shift and go to state 111

state 275

    (104) switch2 -> RES_CASE seen_exp_case COL seen_case_3 bloque . seen_case_4 switch2
    (107) seen_case_4 -> .

    RES_CASE        reduce using rule 107 (seen_case_4 -> .)
    E_END           reduce using rule 107 (seen_case_4 -> .)

    seen_case_4                    shift and go to state 277

state 276

    (97) ifelse -> cuadruplo_est_if_else_2 RES_ELSE COL bloque . cuadruplo_est_if_else_3
    (101) cuadruplo_est_if_else_3 -> .

    E_END           reduce using rule 101 (cuadruplo_est_if_else_3 -> .)

    cuadruplo_est_if_else_3        shift and go to state 278

state 277

    (104) switch2 -> RES_CASE seen_exp_case COL seen_case_3 bloque seen_case_4 . switch2
    (104) switch2 -> . RES_CASE seen_exp_case COL seen_case_3 bloque seen_case_4 switch2
    (105) switch2 -> . empty
    (166) empty -> .

    RES_CASE        shift and go to state 245
    E_END           reduce using rule 166 (empty -> .)

    switch2                        shift and go to state 279
    empty                          shift and go to state 246

state 278

    (97) ifelse -> cuadruplo_est_if_else_2 RES_ELSE COL bloque cuadruplo_est_if_else_3 .

    E_END           reduce using rule 97 (ifelse -> cuadruplo_est_if_else_2 RES_ELSE COL bloque cuadruplo_est_if_else_3 .)


state 279

    (104) switch2 -> RES_CASE seen_exp_case COL seen_case_3 bloque seen_case_4 switch2 .

    E_END           reduce using rule 104 (switch2 -> RES_CASE seen_exp_case COL seen_case_3 bloque seen_case_4 switch2 .)

