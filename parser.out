Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RES_SET
    ENDI
    TAB
    RES_ELIF
    NEW_LINE
    VAR
    AND
    OR

Grammar

Rule 0     S' -> programa
Rule 1     programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 main programa3
Rule 2     programa -> empty
Rule 3     prueba -> <empty>
Rule 4     generaglo -> <empty>
Rule 5     programa1 -> RES_PROTO prototipos seen_prototipo programa1
Rule 6     programa1 -> empty
Rule 7     seen_prototipo -> <empty>
Rule 8     programa2 -> vars programa2
Rule 9     programa2 -> empty
Rule 10    valida_entra_global -> <empty>
Rule 11    valida_salir_gobal -> <empty>
Rule 12    programa3 -> programa3 modulos
Rule 13    programa3 -> empty
Rule 14    prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN
Rule 15    seen_dato -> <empty>
Rule 16    prototipos_1 -> tipo ID prototipos_2
Rule 17    prototipos_2 -> COMMA prototipos_1
Rule 18    prototipos_2 -> empty
Rule 19    dato -> RES_INT
Rule 20    dato -> RES_FLOAT
Rule 21    dato -> RES_DOUBLE
Rule 22    dato -> RES_BOOLEAN
Rule 23    dato -> RES_STRING
Rule 24    tipo -> dato
Rule 25    tipo -> estructura
Rule 26    estructura -> list
Rule 27    estructura -> array
Rule 28    vars -> RES_DEF COL vars1
Rule 29    vars1 -> estructura vars1
Rule 30    vars1 -> dato ID vars2 vars1_1
Rule 31    vars1_1 -> vars1
Rule 32    vars1_1 -> empty
Rule 33    vars2 -> EQUALS cons
Rule 34    vars2 -> vars3
Rule 35    vars3 -> COMMA ID vars3
Rule 36    vars3 -> empty
Rule 37    list -> RES_LIST dato ID list1
Rule 38    list1 -> LCURLY cons_loop RCURLY
Rule 39    list1 -> empty
Rule 40    cons_loop -> cons cons_loop_1
Rule 41    cons_loop_1 -> COMMA cons_loop
Rule 42    cons_loop_1 -> empty
Rule 43    array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1
Rule 44    array1 -> COL LBRACKET array2 RBRACKET
Rule 45    array1 -> empty
Rule 46    array2 -> cons
Rule 47    array2 -> cons COMMA array2
Rule 48    modulos -> prototipos se_uso COL bloque
Rule 49    se_uso -> <empty>
Rule 50    bloque -> estatutos bloque
Rule 51    bloque -> empty
Rule 52    estatutos -> condicion E_END
Rule 53    estatutos -> ciclo E_END
Rule 54    estatutos -> lectura
Rule 55    estatutos -> escritura
Rule 56    estatutos -> asignacion
Rule 57    estatutos -> llamada
Rule 58    estatutos -> vars
Rule 59    ciclo -> while
Rule 60    ciclo -> for
Rule 61    condicion -> if
Rule 62    condicion -> switch
Rule 63    llamada -> ID LPAREN llamada1 RPAREN
Rule 64    llamada1 -> expresion
Rule 65    llamada1 -> empty
Rule 66    lectura -> RES_READ LPAREN tipo RPAREN
Rule 67    escritura -> RES_PRINT LPAREN escritura1 RPAREN
Rule 68    escritura1 -> expresion
Rule 69    escritura1 -> CTE_STRING
Rule 70    asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion
Rule 71    seen_id_asignacion -> ID
Rule 72    insert_asignacion -> <empty>
Rule 73    asignacion1 -> exp
Rule 74    asignacion1 -> asignlist
Rule 75    asignacion1 -> asignarray
Rule 76    asignlist -> LCURLY asignlist1 RCURLY
Rule 77    asignlist1 -> cons
Rule 78    asignlist1 -> cons COMMA asignlist1
Rule 79    asignarray -> LBRACKET asignarray1 RBRACKET
Rule 80    asignarray1 -> cons
Rule 81    asignarray1 -> cons COMMA asignarray1
Rule 82    while -> RES_WHILE LPAREN expresion RPAREN COL bloque
Rule 83    for -> RES_FOR LPAREN forexp RPAREN COL bloque
Rule 84    forexp -> ID EQUALS cons COL expresion COL ID EQUALS expresion
Rule 85    if -> RES_IF LPAREN expresion RPAREN COL bloque ifelse
Rule 86    ifelse -> RES_ELSE COL bloque
Rule 87    ifelse -> empty
Rule 88    switch -> RES_SWITCH COL switch2
Rule 89    switch2 -> RES_CASE expresion COL bloque switch2
Rule 90    switch2 -> empty
Rule 91    expresion -> exp expresion_1
Rule 92    expresion_1 -> MIN exp
Rule 93    expresion_1 -> MIN_EQ exp
Rule 94    expresion_1 -> MAY exp
Rule 95    expresion_1 -> MAY_EQ exp
Rule 96    expresion_1 -> DIF exp
Rule 97    expresion_1 -> EQ_EQ exp
Rule 98    expresion_1 -> empty
Rule 99    exp -> termino exp1
Rule 100   exp1 -> PLUS exp
Rule 101   exp1 -> MINUS exp
Rule 102   exp1 -> empty
Rule 103   termino -> factor termino1
Rule 104   termino1 -> TIMES termino
Rule 105   termino1 -> DIVIDE termino
Rule 106   termino1 -> empty
Rule 107   factor -> LPAREN exp RPAREN
Rule 108   factor -> cons
Rule 109   factor -> PLUS cons
Rule 110   factor -> MINUS cons
Rule 111   cons -> seen_id_cons exp_1
Rule 112   cons -> seen_int_cons exp_cons_int
Rule 113   cons -> seen_float_cons exp_cons_float
Rule 114   cons -> CTE_DOUBLE
Rule 115   cons -> CTE_STRING
Rule 116   cons -> RES_TRUE
Rule 117   cons -> RES_FALSE
Rule 118   cons -> consarray
Rule 119   cons -> conslist
Rule 120   seen_id_cons -> ID
Rule 121   seen_float_cons -> CTE_FLOAT
Rule 122   seen_int_cons -> CTE_INT
Rule 123   exp_1 -> <empty>
Rule 124   exp_cons_int -> <empty>
Rule 125   exp_cons_float -> <empty>
Rule 126   main -> RES_START comienza_main COL bloque RES_END
Rule 127   comienza_main -> <empty>
Rule 128   consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons
Rule 129   conslist -> ID EQUALS LCURLY conslist1 RCURLY
Rule 130   conslist1 -> cons
Rule 131   conslist1 -> cons COMMA conslist1
Rule 132   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
COL                  : 28 44 48 82 83 84 84 85 86 88 89 126
COMMA                : 17 35 41 47 78 81 131
CTE_DOUBLE           : 114
CTE_FLOAT            : 121
CTE_INT              : 43 122 128
CTE_STRING           : 69 115
DIF                  : 96
DIVIDE               : 105
ENDI                 : 
EQUALS               : 33 70 84 84 128 129
EQ_EQ                : 97
E_END                : 52 53
ID                   : 14 16 30 35 37 43 63 71 84 84 120 128 129
LBRACKET             : 43 44 79 128
LCURLY               : 38 76 129
LPAREN               : 14 63 66 67 82 83 85 107
MAY                  : 94
MAY_EQ               : 95
MIN                  : 92
MINUS                : 101 110
MIN_EQ               : 93
NEW_LINE             : 
OR                   : 
PLUS                 : 100 109
RBRACKET             : 43 44 79 128
RCURLY               : 38 76 129
RES_ARRAY            : 43
RES_BOOLEAN          : 22
RES_CASE             : 89
RES_DEF              : 28
RES_DOUBLE           : 21
RES_ELIF             : 
RES_ELSE             : 86
RES_END              : 126
RES_FALSE            : 117
RES_FLOAT            : 20
RES_FOR              : 83
RES_FUNC             : 14
RES_IF               : 85
RES_INT              : 19
RES_LIST             : 37
RES_PRINT            : 67
RES_PROTO            : 5
RES_READ             : 66
RES_SET              : 
RES_START            : 126
RES_STRING           : 23
RES_SWITCH           : 88
RES_TRUE             : 116
RES_WHILE            : 82
RPAREN               : 14 63 66 67 82 83 85 107
TAB                  : 
TIMES                : 104
VAR                  : 
error                : 

Nonterminals, with rules where they appear

array                : 27
array1               : 43
array2               : 44 47
asignacion           : 56
asignacion1          : 70
asignarray           : 75
asignarray1          : 79 81
asignlist            : 74
asignlist1           : 76 78
bloque               : 48 50 82 83 85 86 89 126
ciclo                : 53
comienza_main        : 126
condicion            : 52
cons                 : 33 40 46 47 77 78 80 81 84 108 109 110 128 130 131
cons_loop            : 38 41
cons_loop_1          : 40
consarray            : 118
conslist             : 119
conslist1            : 129 131
dato                 : 14 24 30 37 43
empty                : 2 6 9 13 18 32 36 39 42 45 51 65 87 90 98 102 106
escritura            : 55
escritura1           : 67
estatutos            : 50
estructura           : 25 29
exp                  : 73 91 92 93 94 95 96 97 100 101 107
exp1                 : 99
exp_1                : 111
exp_cons_float       : 113
exp_cons_int         : 112
expresion            : 64 68 82 84 84 85 89
expresion_1          : 91
factor               : 103
for                  : 60
forexp               : 83
generaglo            : 1
if                   : 61
ifelse               : 85
insert_asignacion    : 70
lectura              : 54
list                 : 26
list1                : 37
llamada              : 57
llamada1             : 63
main                 : 1
modulos              : 12
programa             : 0
programa1            : 1 5
programa2            : 1 8
programa3            : 1 1 12
prototipos           : 5 48
prototipos_1         : 14 17
prototipos_2         : 16
prueba               : 
se_uso               : 48
seen_dato            : 14
seen_float_cons      : 113
seen_id_asignacion   : 70
seen_id_cons         : 111
seen_int_cons        : 112
seen_prototipo       : 5
switch               : 62
switch2              : 88 89
termino              : 99 104 105
termino1             : 103
tipo                 : 16 66
valida_entra_global  : 1
valida_salir_gobal   : 1
vars                 : 8 58
vars1                : 28 29 31
vars1_1              : 30
vars2                : 30
vars3                : 34 35
while                : 59

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 main programa3
    (2) programa -> . empty
    (5) programa1 -> . RES_PROTO prototipos seen_prototipo programa1
    (6) programa1 -> . empty
    (132) empty -> .

    RES_PROTO       shift and go to state 3
    $end            reduce using rule 132 (empty -> .)
    RES_DEF         reduce using rule 132 (empty -> .)
    RES_START       reduce using rule 132 (empty -> .)
    RES_FUNC        reduce using rule 132 (empty -> .)

    programa1                      shift and go to state 1
    programa                       shift and go to state 2
    empty                          shift and go to state 4

state 1

    (1) programa -> programa1 . valida_entra_global generaglo programa2 valida_salir_gobal programa3 main programa3
    (10) valida_entra_global -> .

    RES_DEF         reduce using rule 10 (valida_entra_global -> .)
    RES_START       reduce using rule 10 (valida_entra_global -> .)
    RES_FUNC        reduce using rule 10 (valida_entra_global -> .)

    valida_entra_global            shift and go to state 5

state 2

    (0) S' -> programa .



state 3

    (5) programa1 -> RES_PROTO . prototipos seen_prototipo programa1
    (14) prototipos -> . RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN

    RES_FUNC        shift and go to state 7

    prototipos                     shift and go to state 6

state 4

    (2) programa -> empty .
    (6) programa1 -> empty .

    $end            reduce using rule 2 (programa -> empty .)
    RES_DEF         reduce using rule 6 (programa1 -> empty .)
    RES_START       reduce using rule 6 (programa1 -> empty .)
    RES_FUNC        reduce using rule 6 (programa1 -> empty .)


state 5

    (1) programa -> programa1 valida_entra_global . generaglo programa2 valida_salir_gobal programa3 main programa3
    (4) generaglo -> .

    RES_DEF         reduce using rule 4 (generaglo -> .)
    RES_START       reduce using rule 4 (generaglo -> .)
    RES_FUNC        reduce using rule 4 (generaglo -> .)

    generaglo                      shift and go to state 8

state 6

    (5) programa1 -> RES_PROTO prototipos . seen_prototipo programa1
    (7) seen_prototipo -> .

    RES_PROTO       reduce using rule 7 (seen_prototipo -> .)
    RES_DEF         reduce using rule 7 (seen_prototipo -> .)
    RES_START       reduce using rule 7 (seen_prototipo -> .)
    RES_FUNC        reduce using rule 7 (seen_prototipo -> .)

    seen_prototipo                 shift and go to state 9

state 7

    (14) prototipos -> RES_FUNC . dato seen_dato ID LPAREN prototipos_1 RPAREN
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12

    dato                           shift and go to state 14

state 8

    (1) programa -> programa1 valida_entra_global generaglo . programa2 valida_salir_gobal programa3 main programa3
    (8) programa2 -> . vars programa2
    (9) programa2 -> . empty
    (28) vars -> . RES_DEF COL vars1
    (132) empty -> .

    RES_DEF         shift and go to state 18
    RES_START       reduce using rule 132 (empty -> .)
    RES_FUNC        reduce using rule 132 (empty -> .)

    vars                           shift and go to state 16
    programa2                      shift and go to state 17
    empty                          shift and go to state 19

state 9

    (5) programa1 -> RES_PROTO prototipos seen_prototipo . programa1
    (5) programa1 -> . RES_PROTO prototipos seen_prototipo programa1
    (6) programa1 -> . empty
    (132) empty -> .

    RES_PROTO       shift and go to state 3
    RES_DEF         reduce using rule 132 (empty -> .)
    RES_START       reduce using rule 132 (empty -> .)
    RES_FUNC        reduce using rule 132 (empty -> .)

    empty                          shift and go to state 20
    programa1                      shift and go to state 21

state 10

    (22) dato -> RES_BOOLEAN .

    ID              reduce using rule 22 (dato -> RES_BOOLEAN .)
    RPAREN          reduce using rule 22 (dato -> RES_BOOLEAN .)


state 11

    (19) dato -> RES_INT .

    ID              reduce using rule 19 (dato -> RES_INT .)
    RPAREN          reduce using rule 19 (dato -> RES_INT .)


state 12

    (23) dato -> RES_STRING .

    ID              reduce using rule 23 (dato -> RES_STRING .)
    RPAREN          reduce using rule 23 (dato -> RES_STRING .)


state 13

    (21) dato -> RES_DOUBLE .

    ID              reduce using rule 21 (dato -> RES_DOUBLE .)
    RPAREN          reduce using rule 21 (dato -> RES_DOUBLE .)


state 14

    (14) prototipos -> RES_FUNC dato . seen_dato ID LPAREN prototipos_1 RPAREN
    (15) seen_dato -> .

    ID              reduce using rule 15 (seen_dato -> .)

    seen_dato                      shift and go to state 22

state 15

    (20) dato -> RES_FLOAT .

    ID              reduce using rule 20 (dato -> RES_FLOAT .)
    RPAREN          reduce using rule 20 (dato -> RES_FLOAT .)


state 16

    (8) programa2 -> vars . programa2
    (8) programa2 -> . vars programa2
    (9) programa2 -> . empty
    (28) vars -> . RES_DEF COL vars1
    (132) empty -> .

    RES_DEF         shift and go to state 18
    RES_START       reduce using rule 132 (empty -> .)
    RES_FUNC        reduce using rule 132 (empty -> .)

    programa2                      shift and go to state 23
    empty                          shift and go to state 19
    vars                           shift and go to state 16

state 17

    (1) programa -> programa1 valida_entra_global generaglo programa2 . valida_salir_gobal programa3 main programa3
    (11) valida_salir_gobal -> .

    RES_START       reduce using rule 11 (valida_salir_gobal -> .)
    RES_FUNC        reduce using rule 11 (valida_salir_gobal -> .)

    valida_salir_gobal             shift and go to state 24

state 18

    (28) vars -> RES_DEF . COL vars1

    COL             shift and go to state 25


state 19

    (9) programa2 -> empty .

    RES_START       reduce using rule 9 (programa2 -> empty .)
    RES_FUNC        reduce using rule 9 (programa2 -> empty .)


state 20

    (6) programa1 -> empty .

    RES_DEF         reduce using rule 6 (programa1 -> empty .)
    RES_START       reduce using rule 6 (programa1 -> empty .)
    RES_FUNC        reduce using rule 6 (programa1 -> empty .)


state 21

    (5) programa1 -> RES_PROTO prototipos seen_prototipo programa1 .

    RES_DEF         reduce using rule 5 (programa1 -> RES_PROTO prototipos seen_prototipo programa1 .)
    RES_START       reduce using rule 5 (programa1 -> RES_PROTO prototipos seen_prototipo programa1 .)
    RES_FUNC        reduce using rule 5 (programa1 -> RES_PROTO prototipos seen_prototipo programa1 .)


state 22

    (14) prototipos -> RES_FUNC dato seen_dato . ID LPAREN prototipos_1 RPAREN

    ID              shift and go to state 26


state 23

    (8) programa2 -> vars programa2 .

    RES_START       reduce using rule 8 (programa2 -> vars programa2 .)
    RES_FUNC        reduce using rule 8 (programa2 -> vars programa2 .)


state 24

    (1) programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal . programa3 main programa3
    (12) programa3 -> . programa3 modulos
    (13) programa3 -> . empty
    (132) empty -> .

    RES_START       reduce using rule 132 (empty -> .)
    RES_FUNC        reduce using rule 132 (empty -> .)

    programa3                      shift and go to state 27
    empty                          shift and go to state 28

state 25

    (28) vars -> RES_DEF COL . vars1
    (29) vars1 -> . estructura vars1
    (30) vars1 -> . dato ID vars2 vars1_1
    (26) estructura -> . list
    (27) estructura -> . array
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    estructura                     shift and go to state 31
    list                           shift and go to state 34
    vars1                          shift and go to state 30
    dato                           shift and go to state 33
    array                          shift and go to state 29

state 26

    (14) prototipos -> RES_FUNC dato seen_dato ID . LPAREN prototipos_1 RPAREN

    LPAREN          shift and go to state 36


state 27

    (1) programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 . main programa3
    (12) programa3 -> programa3 . modulos
    (126) main -> . RES_START comienza_main COL bloque RES_END
    (48) modulos -> . prototipos se_uso COL bloque
    (14) prototipos -> . RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN

    RES_START       shift and go to state 38
    RES_FUNC        shift and go to state 7

    prototipos                     shift and go to state 37
    modulos                        shift and go to state 40
    main                           shift and go to state 39

state 28

    (13) programa3 -> empty .

    RES_FUNC        reduce using rule 13 (programa3 -> empty .)
    $end            reduce using rule 13 (programa3 -> empty .)
    RES_START       reduce using rule 13 (programa3 -> empty .)


state 29

    (27) estructura -> array .

    RPAREN          reduce using rule 27 (estructura -> array .)
    ID              reduce using rule 27 (estructura -> array .)
    RES_INT         reduce using rule 27 (estructura -> array .)
    RES_FLOAT       reduce using rule 27 (estructura -> array .)
    RES_DOUBLE      reduce using rule 27 (estructura -> array .)
    RES_BOOLEAN     reduce using rule 27 (estructura -> array .)
    RES_STRING      reduce using rule 27 (estructura -> array .)
    RES_LIST        reduce using rule 27 (estructura -> array .)
    RES_ARRAY       reduce using rule 27 (estructura -> array .)


state 30

    (28) vars -> RES_DEF COL vars1 .

    RES_READ        reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_PRINT       reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    ID              reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_DEF         reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_IF          reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_SWITCH      reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_WHILE       reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_FOR         reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_END         reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_START       reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_FUNC        reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    $end            reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    E_END           reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_CASE        reduce using rule 28 (vars -> RES_DEF COL vars1 .)
    RES_ELSE        reduce using rule 28 (vars -> RES_DEF COL vars1 .)


state 31

    (29) vars1 -> estructura . vars1
    (29) vars1 -> . estructura vars1
    (30) vars1 -> . dato ID vars2 vars1_1
    (26) estructura -> . list
    (27) estructura -> . array
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    list                           shift and go to state 34
    estructura                     shift and go to state 31
    dato                           shift and go to state 33
    vars1                          shift and go to state 41
    array                          shift and go to state 29

state 32

    (37) list -> RES_LIST . dato ID list1
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12

    dato                           shift and go to state 42

state 33

    (30) vars1 -> dato . ID vars2 vars1_1

    ID              shift and go to state 43


state 34

    (26) estructura -> list .

    RPAREN          reduce using rule 26 (estructura -> list .)
    ID              reduce using rule 26 (estructura -> list .)
    RES_INT         reduce using rule 26 (estructura -> list .)
    RES_FLOAT       reduce using rule 26 (estructura -> list .)
    RES_DOUBLE      reduce using rule 26 (estructura -> list .)
    RES_BOOLEAN     reduce using rule 26 (estructura -> list .)
    RES_STRING      reduce using rule 26 (estructura -> list .)
    RES_LIST        reduce using rule 26 (estructura -> list .)
    RES_ARRAY       reduce using rule 26 (estructura -> list .)


state 35

    (43) array -> RES_ARRAY . dato ID LBRACKET CTE_INT RBRACKET array1
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12

    dato                           shift and go to state 44

state 36

    (14) prototipos -> RES_FUNC dato seen_dato ID LPAREN . prototipos_1 RPAREN
    (16) prototipos_1 -> . tipo ID prototipos_2
    (24) tipo -> . dato
    (25) tipo -> . estructura
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (26) estructura -> . list
    (27) estructura -> . array
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    tipo                           shift and go to state 46
    prototipos_1                   shift and go to state 45
    list                           shift and go to state 34
    estructura                     shift and go to state 47
    dato                           shift and go to state 48
    array                          shift and go to state 29

state 37

    (48) modulos -> prototipos . se_uso COL bloque
    (49) se_uso -> .

    COL             reduce using rule 49 (se_uso -> .)

    se_uso                         shift and go to state 49

state 38

    (126) main -> RES_START . comienza_main COL bloque RES_END
    (127) comienza_main -> .

    COL             reduce using rule 127 (comienza_main -> .)

    comienza_main                  shift and go to state 50

state 39

    (1) programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 main . programa3
    (12) programa3 -> . programa3 modulos
    (13) programa3 -> . empty
    (132) empty -> .

    RES_FUNC        reduce using rule 132 (empty -> .)
    $end            reduce using rule 132 (empty -> .)

    programa3                      shift and go to state 51
    empty                          shift and go to state 28

state 40

    (12) programa3 -> programa3 modulos .

    RES_FUNC        reduce using rule 12 (programa3 -> programa3 modulos .)
    $end            reduce using rule 12 (programa3 -> programa3 modulos .)
    RES_START       reduce using rule 12 (programa3 -> programa3 modulos .)


state 41

    (29) vars1 -> estructura vars1 .

    RES_DEF         reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_START       reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_FUNC        reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_READ        reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_PRINT       reduce using rule 29 (vars1 -> estructura vars1 .)
    ID              reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_IF          reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_SWITCH      reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_WHILE       reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_FOR         reduce using rule 29 (vars1 -> estructura vars1 .)
    $end            reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_END         reduce using rule 29 (vars1 -> estructura vars1 .)
    E_END           reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_ELSE        reduce using rule 29 (vars1 -> estructura vars1 .)
    RES_CASE        reduce using rule 29 (vars1 -> estructura vars1 .)


state 42

    (37) list -> RES_LIST dato . ID list1

    ID              shift and go to state 52


state 43

    (30) vars1 -> dato ID . vars2 vars1_1
    (33) vars2 -> . EQUALS cons
    (34) vars2 -> . vars3
    (35) vars3 -> . COMMA ID vars3
    (36) vars3 -> . empty
    (132) empty -> .

    EQUALS          shift and go to state 53
    COMMA           shift and go to state 56
    RES_INT         reduce using rule 132 (empty -> .)
    RES_FLOAT       reduce using rule 132 (empty -> .)
    RES_DOUBLE      reduce using rule 132 (empty -> .)
    RES_BOOLEAN     reduce using rule 132 (empty -> .)
    RES_STRING      reduce using rule 132 (empty -> .)
    RES_LIST        reduce using rule 132 (empty -> .)
    RES_ARRAY       reduce using rule 132 (empty -> .)
    RES_DEF         reduce using rule 132 (empty -> .)
    RES_START       reduce using rule 132 (empty -> .)
    RES_FUNC        reduce using rule 132 (empty -> .)
    RES_READ        reduce using rule 132 (empty -> .)
    RES_PRINT       reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    RES_IF          reduce using rule 132 (empty -> .)
    RES_SWITCH      reduce using rule 132 (empty -> .)
    RES_WHILE       reduce using rule 132 (empty -> .)
    RES_FOR         reduce using rule 132 (empty -> .)
    $end            reduce using rule 132 (empty -> .)
    RES_END         reduce using rule 132 (empty -> .)
    E_END           reduce using rule 132 (empty -> .)
    RES_ELSE        reduce using rule 132 (empty -> .)
    RES_CASE        reduce using rule 132 (empty -> .)

    vars3                          shift and go to state 54
    vars2                          shift and go to state 55
    empty                          shift and go to state 57

state 44

    (43) array -> RES_ARRAY dato . ID LBRACKET CTE_INT RBRACKET array1

    ID              shift and go to state 58


state 45

    (14) prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 . RPAREN

    RPAREN          shift and go to state 59


state 46

    (16) prototipos_1 -> tipo . ID prototipos_2

    ID              shift and go to state 60


state 47

    (25) tipo -> estructura .

    ID              reduce using rule 25 (tipo -> estructura .)
    RPAREN          reduce using rule 25 (tipo -> estructura .)


state 48

    (24) tipo -> dato .

    ID              reduce using rule 24 (tipo -> dato .)
    RPAREN          reduce using rule 24 (tipo -> dato .)


state 49

    (48) modulos -> prototipos se_uso . COL bloque

    COL             shift and go to state 61


state 50

    (126) main -> RES_START comienza_main . COL bloque RES_END

    COL             shift and go to state 62


state 51

    (1) programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 main programa3 .
    (12) programa3 -> programa3 . modulos
    (48) modulos -> . prototipos se_uso COL bloque
    (14) prototipos -> . RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN

    $end            reduce using rule 1 (programa -> programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 main programa3 .)
    RES_FUNC        shift and go to state 7

    prototipos                     shift and go to state 37
    modulos                        shift and go to state 40

state 52

    (37) list -> RES_LIST dato ID . list1
    (38) list1 -> . LCURLY cons_loop RCURLY
    (39) list1 -> . empty
    (132) empty -> .

    LCURLY          shift and go to state 64
    RES_INT         reduce using rule 132 (empty -> .)
    RES_FLOAT       reduce using rule 132 (empty -> .)
    RES_DOUBLE      reduce using rule 132 (empty -> .)
    RES_BOOLEAN     reduce using rule 132 (empty -> .)
    RES_STRING      reduce using rule 132 (empty -> .)
    RES_LIST        reduce using rule 132 (empty -> .)
    RES_ARRAY       reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    RPAREN          reduce using rule 132 (empty -> .)

    list1                          shift and go to state 63
    empty                          shift and go to state 65

state 53

    (33) vars2 -> EQUALS . cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 66
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_id_cons                   shift and go to state 68

state 54

    (34) vars2 -> vars3 .

    RES_INT         reduce using rule 34 (vars2 -> vars3 .)
    RES_FLOAT       reduce using rule 34 (vars2 -> vars3 .)
    RES_DOUBLE      reduce using rule 34 (vars2 -> vars3 .)
    RES_BOOLEAN     reduce using rule 34 (vars2 -> vars3 .)
    RES_STRING      reduce using rule 34 (vars2 -> vars3 .)
    RES_LIST        reduce using rule 34 (vars2 -> vars3 .)
    RES_ARRAY       reduce using rule 34 (vars2 -> vars3 .)
    RES_DEF         reduce using rule 34 (vars2 -> vars3 .)
    RES_START       reduce using rule 34 (vars2 -> vars3 .)
    RES_FUNC        reduce using rule 34 (vars2 -> vars3 .)
    RES_READ        reduce using rule 34 (vars2 -> vars3 .)
    RES_PRINT       reduce using rule 34 (vars2 -> vars3 .)
    ID              reduce using rule 34 (vars2 -> vars3 .)
    RES_IF          reduce using rule 34 (vars2 -> vars3 .)
    RES_SWITCH      reduce using rule 34 (vars2 -> vars3 .)
    RES_WHILE       reduce using rule 34 (vars2 -> vars3 .)
    RES_FOR         reduce using rule 34 (vars2 -> vars3 .)
    $end            reduce using rule 34 (vars2 -> vars3 .)
    RES_END         reduce using rule 34 (vars2 -> vars3 .)
    E_END           reduce using rule 34 (vars2 -> vars3 .)
    RES_ELSE        reduce using rule 34 (vars2 -> vars3 .)
    RES_CASE        reduce using rule 34 (vars2 -> vars3 .)


state 55

    (30) vars1 -> dato ID vars2 . vars1_1
    (31) vars1_1 -> . vars1
    (32) vars1_1 -> . empty
    (29) vars1 -> . estructura vars1
    (30) vars1 -> . dato ID vars2 vars1_1
    (132) empty -> .
    (26) estructura -> . list
    (27) estructura -> . array
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_DEF         reduce using rule 132 (empty -> .)
    RES_START       reduce using rule 132 (empty -> .)
    RES_FUNC        reduce using rule 132 (empty -> .)
    RES_READ        reduce using rule 132 (empty -> .)
    RES_PRINT       reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    RES_IF          reduce using rule 132 (empty -> .)
    RES_SWITCH      reduce using rule 132 (empty -> .)
    RES_WHILE       reduce using rule 132 (empty -> .)
    RES_FOR         reduce using rule 132 (empty -> .)
    $end            reduce using rule 132 (empty -> .)
    RES_END         reduce using rule 132 (empty -> .)
    E_END           reduce using rule 132 (empty -> .)
    RES_ELSE        reduce using rule 132 (empty -> .)
    RES_CASE        reduce using rule 132 (empty -> .)
    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    list                           shift and go to state 34
    estructura                     shift and go to state 31
    dato                           shift and go to state 33
    vars1                          shift and go to state 79
    vars1_1                        shift and go to state 80
    array                          shift and go to state 29
    empty                          shift and go to state 81

state 56

    (35) vars3 -> COMMA . ID vars3

    ID              shift and go to state 82


state 57

    (36) vars3 -> empty .

    RES_INT         reduce using rule 36 (vars3 -> empty .)
    RES_FLOAT       reduce using rule 36 (vars3 -> empty .)
    RES_DOUBLE      reduce using rule 36 (vars3 -> empty .)
    RES_BOOLEAN     reduce using rule 36 (vars3 -> empty .)
    RES_STRING      reduce using rule 36 (vars3 -> empty .)
    RES_LIST        reduce using rule 36 (vars3 -> empty .)
    RES_ARRAY       reduce using rule 36 (vars3 -> empty .)
    RES_DEF         reduce using rule 36 (vars3 -> empty .)
    RES_START       reduce using rule 36 (vars3 -> empty .)
    RES_FUNC        reduce using rule 36 (vars3 -> empty .)
    RES_READ        reduce using rule 36 (vars3 -> empty .)
    RES_PRINT       reduce using rule 36 (vars3 -> empty .)
    ID              reduce using rule 36 (vars3 -> empty .)
    RES_IF          reduce using rule 36 (vars3 -> empty .)
    RES_SWITCH      reduce using rule 36 (vars3 -> empty .)
    RES_WHILE       reduce using rule 36 (vars3 -> empty .)
    RES_FOR         reduce using rule 36 (vars3 -> empty .)
    $end            reduce using rule 36 (vars3 -> empty .)
    RES_END         reduce using rule 36 (vars3 -> empty .)
    E_END           reduce using rule 36 (vars3 -> empty .)
    RES_ELSE        reduce using rule 36 (vars3 -> empty .)
    RES_CASE        reduce using rule 36 (vars3 -> empty .)


state 58

    (43) array -> RES_ARRAY dato ID . LBRACKET CTE_INT RBRACKET array1

    LBRACKET        shift and go to state 83


state 59

    (14) prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .

    COL             reduce using rule 14 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_PROTO       reduce using rule 14 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_DEF         reduce using rule 14 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_START       reduce using rule 14 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)
    RES_FUNC        reduce using rule 14 (prototipos -> RES_FUNC dato seen_dato ID LPAREN prototipos_1 RPAREN .)


state 60

    (16) prototipos_1 -> tipo ID . prototipos_2
    (17) prototipos_2 -> . COMMA prototipos_1
    (18) prototipos_2 -> . empty
    (132) empty -> .

    COMMA           shift and go to state 85
    RPAREN          reduce using rule 132 (empty -> .)

    prototipos_2                   shift and go to state 84
    empty                          shift and go to state 86

state 61

    (48) modulos -> prototipos se_uso COL . bloque
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (132) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS asignacion1 insert_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (85) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (88) switch -> . RES_SWITCH COL switch2
    (82) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (83) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (71) seen_id_asignacion -> . ID

    RES_START       reduce using rule 132 (empty -> .)
    RES_FUNC        reduce using rule 132 (empty -> .)
    $end            reduce using rule 132 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 89
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 62

    (126) main -> RES_START comienza_main COL . bloque RES_END
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (132) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS asignacion1 insert_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (85) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (88) switch -> . RES_SWITCH COL switch2
    (82) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (83) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (71) seen_id_asignacion -> . ID

    RES_END         reduce using rule 132 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 109
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 63

    (37) list -> RES_LIST dato ID list1 .

    ID              reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_INT         reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_FLOAT       reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_DOUBLE      reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_BOOLEAN     reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_STRING      reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_LIST        reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RES_ARRAY       reduce using rule 37 (list -> RES_LIST dato ID list1 .)
    RPAREN          reduce using rule 37 (list -> RES_LIST dato ID list1 .)


state 64

    (38) list1 -> LCURLY . cons_loop RCURLY
    (40) cons_loop -> . cons cons_loop_1
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 110
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    cons_loop                      shift and go to state 111
    seen_id_cons                   shift and go to state 68

state 65

    (39) list1 -> empty .

    RES_INT         reduce using rule 39 (list1 -> empty .)
    RES_FLOAT       reduce using rule 39 (list1 -> empty .)
    RES_DOUBLE      reduce using rule 39 (list1 -> empty .)
    RES_BOOLEAN     reduce using rule 39 (list1 -> empty .)
    RES_STRING      reduce using rule 39 (list1 -> empty .)
    RES_LIST        reduce using rule 39 (list1 -> empty .)
    RES_ARRAY       reduce using rule 39 (list1 -> empty .)
    ID              reduce using rule 39 (list1 -> empty .)
    RPAREN          reduce using rule 39 (list1 -> empty .)


state 66

    (33) vars2 -> EQUALS cons .

    RES_INT         reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_FLOAT       reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_DOUBLE      reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_BOOLEAN     reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_STRING      reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_LIST        reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_ARRAY       reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_DEF         reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_START       reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_FUNC        reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_READ        reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_PRINT       reduce using rule 33 (vars2 -> EQUALS cons .)
    ID              reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_IF          reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_SWITCH      reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_WHILE       reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_FOR         reduce using rule 33 (vars2 -> EQUALS cons .)
    $end            reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_END         reduce using rule 33 (vars2 -> EQUALS cons .)
    E_END           reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_ELSE        reduce using rule 33 (vars2 -> EQUALS cons .)
    RES_CASE        reduce using rule 33 (vars2 -> EQUALS cons .)


state 67

    (113) cons -> seen_float_cons . exp_cons_float
    (125) exp_cons_float -> .

    RES_INT         reduce using rule 125 (exp_cons_float -> .)
    RES_FLOAT       reduce using rule 125 (exp_cons_float -> .)
    RES_DOUBLE      reduce using rule 125 (exp_cons_float -> .)
    RES_BOOLEAN     reduce using rule 125 (exp_cons_float -> .)
    RES_STRING      reduce using rule 125 (exp_cons_float -> .)
    RES_LIST        reduce using rule 125 (exp_cons_float -> .)
    RES_ARRAY       reduce using rule 125 (exp_cons_float -> .)
    RES_DEF         reduce using rule 125 (exp_cons_float -> .)
    RES_START       reduce using rule 125 (exp_cons_float -> .)
    RES_FUNC        reduce using rule 125 (exp_cons_float -> .)
    RES_READ        reduce using rule 125 (exp_cons_float -> .)
    RES_PRINT       reduce using rule 125 (exp_cons_float -> .)
    ID              reduce using rule 125 (exp_cons_float -> .)
    RES_IF          reduce using rule 125 (exp_cons_float -> .)
    RES_SWITCH      reduce using rule 125 (exp_cons_float -> .)
    RES_WHILE       reduce using rule 125 (exp_cons_float -> .)
    RES_FOR         reduce using rule 125 (exp_cons_float -> .)
    $end            reduce using rule 125 (exp_cons_float -> .)
    RES_END         reduce using rule 125 (exp_cons_float -> .)
    E_END           reduce using rule 125 (exp_cons_float -> .)
    RES_ELSE        reduce using rule 125 (exp_cons_float -> .)
    RES_CASE        reduce using rule 125 (exp_cons_float -> .)
    COMMA           reduce using rule 125 (exp_cons_float -> .)
    RCURLY          reduce using rule 125 (exp_cons_float -> .)
    TIMES           reduce using rule 125 (exp_cons_float -> .)
    DIVIDE          reduce using rule 125 (exp_cons_float -> .)
    PLUS            reduce using rule 125 (exp_cons_float -> .)
    MINUS           reduce using rule 125 (exp_cons_float -> .)
    MIN             reduce using rule 125 (exp_cons_float -> .)
    MIN_EQ          reduce using rule 125 (exp_cons_float -> .)
    MAY             reduce using rule 125 (exp_cons_float -> .)
    MAY_EQ          reduce using rule 125 (exp_cons_float -> .)
    DIF             reduce using rule 125 (exp_cons_float -> .)
    EQ_EQ           reduce using rule 125 (exp_cons_float -> .)
    RPAREN          reduce using rule 125 (exp_cons_float -> .)
    COL             reduce using rule 125 (exp_cons_float -> .)
    RBRACKET        reduce using rule 125 (exp_cons_float -> .)

    exp_cons_float                 shift and go to state 112

state 68

    (111) cons -> seen_id_cons . exp_1
    (123) exp_1 -> .

    RES_INT         reduce using rule 123 (exp_1 -> .)
    RES_FLOAT       reduce using rule 123 (exp_1 -> .)
    RES_DOUBLE      reduce using rule 123 (exp_1 -> .)
    RES_BOOLEAN     reduce using rule 123 (exp_1 -> .)
    RES_STRING      reduce using rule 123 (exp_1 -> .)
    RES_LIST        reduce using rule 123 (exp_1 -> .)
    RES_ARRAY       reduce using rule 123 (exp_1 -> .)
    RES_DEF         reduce using rule 123 (exp_1 -> .)
    RES_START       reduce using rule 123 (exp_1 -> .)
    RES_FUNC        reduce using rule 123 (exp_1 -> .)
    RES_READ        reduce using rule 123 (exp_1 -> .)
    RES_PRINT       reduce using rule 123 (exp_1 -> .)
    ID              reduce using rule 123 (exp_1 -> .)
    RES_IF          reduce using rule 123 (exp_1 -> .)
    RES_SWITCH      reduce using rule 123 (exp_1 -> .)
    RES_WHILE       reduce using rule 123 (exp_1 -> .)
    RES_FOR         reduce using rule 123 (exp_1 -> .)
    $end            reduce using rule 123 (exp_1 -> .)
    RES_END         reduce using rule 123 (exp_1 -> .)
    E_END           reduce using rule 123 (exp_1 -> .)
    RES_ELSE        reduce using rule 123 (exp_1 -> .)
    RES_CASE        reduce using rule 123 (exp_1 -> .)
    COMMA           reduce using rule 123 (exp_1 -> .)
    RCURLY          reduce using rule 123 (exp_1 -> .)
    TIMES           reduce using rule 123 (exp_1 -> .)
    DIVIDE          reduce using rule 123 (exp_1 -> .)
    PLUS            reduce using rule 123 (exp_1 -> .)
    MINUS           reduce using rule 123 (exp_1 -> .)
    MIN             reduce using rule 123 (exp_1 -> .)
    MIN_EQ          reduce using rule 123 (exp_1 -> .)
    MAY             reduce using rule 123 (exp_1 -> .)
    MAY_EQ          reduce using rule 123 (exp_1 -> .)
    DIF             reduce using rule 123 (exp_1 -> .)
    EQ_EQ           reduce using rule 123 (exp_1 -> .)
    RPAREN          reduce using rule 123 (exp_1 -> .)
    COL             reduce using rule 123 (exp_1 -> .)
    RBRACKET        reduce using rule 123 (exp_1 -> .)

    exp_1                          shift and go to state 113

state 69

    (116) cons -> RES_TRUE .

    TIMES           reduce using rule 116 (cons -> RES_TRUE .)
    DIVIDE          reduce using rule 116 (cons -> RES_TRUE .)
    PLUS            reduce using rule 116 (cons -> RES_TRUE .)
    MINUS           reduce using rule 116 (cons -> RES_TRUE .)
    RPAREN          reduce using rule 116 (cons -> RES_TRUE .)
    COL             reduce using rule 116 (cons -> RES_TRUE .)
    COMMA           reduce using rule 116 (cons -> RES_TRUE .)
    RBRACKET        reduce using rule 116 (cons -> RES_TRUE .)
    RCURLY          reduce using rule 116 (cons -> RES_TRUE .)
    MIN             reduce using rule 116 (cons -> RES_TRUE .)
    MIN_EQ          reduce using rule 116 (cons -> RES_TRUE .)
    MAY             reduce using rule 116 (cons -> RES_TRUE .)
    MAY_EQ          reduce using rule 116 (cons -> RES_TRUE .)
    DIF             reduce using rule 116 (cons -> RES_TRUE .)
    EQ_EQ           reduce using rule 116 (cons -> RES_TRUE .)
    RES_INT         reduce using rule 116 (cons -> RES_TRUE .)
    RES_FLOAT       reduce using rule 116 (cons -> RES_TRUE .)
    RES_DOUBLE      reduce using rule 116 (cons -> RES_TRUE .)
    RES_BOOLEAN     reduce using rule 116 (cons -> RES_TRUE .)
    RES_STRING      reduce using rule 116 (cons -> RES_TRUE .)
    RES_LIST        reduce using rule 116 (cons -> RES_TRUE .)
    RES_ARRAY       reduce using rule 116 (cons -> RES_TRUE .)
    RES_DEF         reduce using rule 116 (cons -> RES_TRUE .)
    RES_START       reduce using rule 116 (cons -> RES_TRUE .)
    RES_FUNC        reduce using rule 116 (cons -> RES_TRUE .)
    RES_READ        reduce using rule 116 (cons -> RES_TRUE .)
    RES_PRINT       reduce using rule 116 (cons -> RES_TRUE .)
    ID              reduce using rule 116 (cons -> RES_TRUE .)
    RES_IF          reduce using rule 116 (cons -> RES_TRUE .)
    RES_SWITCH      reduce using rule 116 (cons -> RES_TRUE .)
    RES_WHILE       reduce using rule 116 (cons -> RES_TRUE .)
    RES_FOR         reduce using rule 116 (cons -> RES_TRUE .)
    $end            reduce using rule 116 (cons -> RES_TRUE .)
    RES_END         reduce using rule 116 (cons -> RES_TRUE .)
    E_END           reduce using rule 116 (cons -> RES_TRUE .)
    RES_ELSE        reduce using rule 116 (cons -> RES_TRUE .)
    RES_CASE        reduce using rule 116 (cons -> RES_TRUE .)


state 70

    (115) cons -> CTE_STRING .

    TIMES           reduce using rule 115 (cons -> CTE_STRING .)
    DIVIDE          reduce using rule 115 (cons -> CTE_STRING .)
    PLUS            reduce using rule 115 (cons -> CTE_STRING .)
    MINUS           reduce using rule 115 (cons -> CTE_STRING .)
    RPAREN          reduce using rule 115 (cons -> CTE_STRING .)
    COL             reduce using rule 115 (cons -> CTE_STRING .)
    COMMA           reduce using rule 115 (cons -> CTE_STRING .)
    RBRACKET        reduce using rule 115 (cons -> CTE_STRING .)
    RCURLY          reduce using rule 115 (cons -> CTE_STRING .)
    RES_INT         reduce using rule 115 (cons -> CTE_STRING .)
    RES_FLOAT       reduce using rule 115 (cons -> CTE_STRING .)
    RES_DOUBLE      reduce using rule 115 (cons -> CTE_STRING .)
    RES_BOOLEAN     reduce using rule 115 (cons -> CTE_STRING .)
    RES_STRING      reduce using rule 115 (cons -> CTE_STRING .)
    RES_LIST        reduce using rule 115 (cons -> CTE_STRING .)
    RES_ARRAY       reduce using rule 115 (cons -> CTE_STRING .)
    RES_DEF         reduce using rule 115 (cons -> CTE_STRING .)
    RES_START       reduce using rule 115 (cons -> CTE_STRING .)
    RES_FUNC        reduce using rule 115 (cons -> CTE_STRING .)
    RES_READ        reduce using rule 115 (cons -> CTE_STRING .)
    RES_PRINT       reduce using rule 115 (cons -> CTE_STRING .)
    ID              reduce using rule 115 (cons -> CTE_STRING .)
    RES_IF          reduce using rule 115 (cons -> CTE_STRING .)
    RES_SWITCH      reduce using rule 115 (cons -> CTE_STRING .)
    RES_WHILE       reduce using rule 115 (cons -> CTE_STRING .)
    RES_FOR         reduce using rule 115 (cons -> CTE_STRING .)
    $end            reduce using rule 115 (cons -> CTE_STRING .)
    RES_END         reduce using rule 115 (cons -> CTE_STRING .)
    E_END           reduce using rule 115 (cons -> CTE_STRING .)
    RES_ELSE        reduce using rule 115 (cons -> CTE_STRING .)
    RES_CASE        reduce using rule 115 (cons -> CTE_STRING .)
    MIN             reduce using rule 115 (cons -> CTE_STRING .)
    MIN_EQ          reduce using rule 115 (cons -> CTE_STRING .)
    MAY             reduce using rule 115 (cons -> CTE_STRING .)
    MAY_EQ          reduce using rule 115 (cons -> CTE_STRING .)
    DIF             reduce using rule 115 (cons -> CTE_STRING .)
    EQ_EQ           reduce using rule 115 (cons -> CTE_STRING .)


state 71

    (114) cons -> CTE_DOUBLE .

    TIMES           reduce using rule 114 (cons -> CTE_DOUBLE .)
    DIVIDE          reduce using rule 114 (cons -> CTE_DOUBLE .)
    PLUS            reduce using rule 114 (cons -> CTE_DOUBLE .)
    MINUS           reduce using rule 114 (cons -> CTE_DOUBLE .)
    RPAREN          reduce using rule 114 (cons -> CTE_DOUBLE .)
    COL             reduce using rule 114 (cons -> CTE_DOUBLE .)
    COMMA           reduce using rule 114 (cons -> CTE_DOUBLE .)
    RBRACKET        reduce using rule 114 (cons -> CTE_DOUBLE .)
    RCURLY          reduce using rule 114 (cons -> CTE_DOUBLE .)
    MIN             reduce using rule 114 (cons -> CTE_DOUBLE .)
    MIN_EQ          reduce using rule 114 (cons -> CTE_DOUBLE .)
    MAY             reduce using rule 114 (cons -> CTE_DOUBLE .)
    MAY_EQ          reduce using rule 114 (cons -> CTE_DOUBLE .)
    DIF             reduce using rule 114 (cons -> CTE_DOUBLE .)
    EQ_EQ           reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_INT         reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_FLOAT       reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_DOUBLE      reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_BOOLEAN     reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_STRING      reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_LIST        reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_ARRAY       reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_DEF         reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_START       reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_FUNC        reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_READ        reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_PRINT       reduce using rule 114 (cons -> CTE_DOUBLE .)
    ID              reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_IF          reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_SWITCH      reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_WHILE       reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_FOR         reduce using rule 114 (cons -> CTE_DOUBLE .)
    $end            reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_END         reduce using rule 114 (cons -> CTE_DOUBLE .)
    E_END           reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_ELSE        reduce using rule 114 (cons -> CTE_DOUBLE .)
    RES_CASE        reduce using rule 114 (cons -> CTE_DOUBLE .)


state 72

    (122) seen_int_cons -> CTE_INT .

    COMMA           reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RCURLY          reduce using rule 122 (seen_int_cons -> CTE_INT .)
    TIMES           reduce using rule 122 (seen_int_cons -> CTE_INT .)
    DIVIDE          reduce using rule 122 (seen_int_cons -> CTE_INT .)
    PLUS            reduce using rule 122 (seen_int_cons -> CTE_INT .)
    MINUS           reduce using rule 122 (seen_int_cons -> CTE_INT .)
    MIN             reduce using rule 122 (seen_int_cons -> CTE_INT .)
    MIN_EQ          reduce using rule 122 (seen_int_cons -> CTE_INT .)
    MAY             reduce using rule 122 (seen_int_cons -> CTE_INT .)
    MAY_EQ          reduce using rule 122 (seen_int_cons -> CTE_INT .)
    DIF             reduce using rule 122 (seen_int_cons -> CTE_INT .)
    EQ_EQ           reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RPAREN          reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_READ        reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_PRINT       reduce using rule 122 (seen_int_cons -> CTE_INT .)
    ID              reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_DEF         reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_IF          reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_SWITCH      reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_WHILE       reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_FOR         reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_START       reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_FUNC        reduce using rule 122 (seen_int_cons -> CTE_INT .)
    $end            reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_END         reduce using rule 122 (seen_int_cons -> CTE_INT .)
    E_END           reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_ELSE        reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_CASE        reduce using rule 122 (seen_int_cons -> CTE_INT .)
    COL             reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_INT         reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_FLOAT       reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_DOUBLE      reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_BOOLEAN     reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_STRING      reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_LIST        reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RES_ARRAY       reduce using rule 122 (seen_int_cons -> CTE_INT .)
    RBRACKET        reduce using rule 122 (seen_int_cons -> CTE_INT .)


state 73

    (120) seen_id_cons -> ID .
    (128) consarray -> ID . LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> ID . EQUALS LCURLY conslist1 RCURLY

    TIMES           reduce using rule 120 (seen_id_cons -> ID .)
    DIVIDE          reduce using rule 120 (seen_id_cons -> ID .)
    PLUS            reduce using rule 120 (seen_id_cons -> ID .)
    MINUS           reduce using rule 120 (seen_id_cons -> ID .)
    RPAREN          reduce using rule 120 (seen_id_cons -> ID .)
    COL             reduce using rule 120 (seen_id_cons -> ID .)
    RES_INT         reduce using rule 120 (seen_id_cons -> ID .)
    RES_FLOAT       reduce using rule 120 (seen_id_cons -> ID .)
    RES_DOUBLE      reduce using rule 120 (seen_id_cons -> ID .)
    RES_BOOLEAN     reduce using rule 120 (seen_id_cons -> ID .)
    RES_STRING      reduce using rule 120 (seen_id_cons -> ID .)
    RES_LIST        reduce using rule 120 (seen_id_cons -> ID .)
    RES_ARRAY       reduce using rule 120 (seen_id_cons -> ID .)
    RES_DEF         reduce using rule 120 (seen_id_cons -> ID .)
    RES_START       reduce using rule 120 (seen_id_cons -> ID .)
    RES_FUNC        reduce using rule 120 (seen_id_cons -> ID .)
    RES_READ        reduce using rule 120 (seen_id_cons -> ID .)
    RES_PRINT       reduce using rule 120 (seen_id_cons -> ID .)
    ID              reduce using rule 120 (seen_id_cons -> ID .)
    RES_IF          reduce using rule 120 (seen_id_cons -> ID .)
    RES_SWITCH      reduce using rule 120 (seen_id_cons -> ID .)
    RES_WHILE       reduce using rule 120 (seen_id_cons -> ID .)
    RES_FOR         reduce using rule 120 (seen_id_cons -> ID .)
    $end            reduce using rule 120 (seen_id_cons -> ID .)
    RES_END         reduce using rule 120 (seen_id_cons -> ID .)
    E_END           reduce using rule 120 (seen_id_cons -> ID .)
    RES_ELSE        reduce using rule 120 (seen_id_cons -> ID .)
    RES_CASE        reduce using rule 120 (seen_id_cons -> ID .)
    COMMA           reduce using rule 120 (seen_id_cons -> ID .)
    RCURLY          reduce using rule 120 (seen_id_cons -> ID .)
    MIN             reduce using rule 120 (seen_id_cons -> ID .)
    MIN_EQ          reduce using rule 120 (seen_id_cons -> ID .)
    MAY             reduce using rule 120 (seen_id_cons -> ID .)
    MAY_EQ          reduce using rule 120 (seen_id_cons -> ID .)
    DIF             reduce using rule 120 (seen_id_cons -> ID .)
    EQ_EQ           reduce using rule 120 (seen_id_cons -> ID .)
    RBRACKET        reduce using rule 120 (seen_id_cons -> ID .)
    LBRACKET        shift and go to state 115
    EQUALS          shift and go to state 114


state 74

    (112) cons -> seen_int_cons . exp_cons_int
    (124) exp_cons_int -> .

    RES_INT         reduce using rule 124 (exp_cons_int -> .)
    RES_FLOAT       reduce using rule 124 (exp_cons_int -> .)
    RES_DOUBLE      reduce using rule 124 (exp_cons_int -> .)
    RES_BOOLEAN     reduce using rule 124 (exp_cons_int -> .)
    RES_STRING      reduce using rule 124 (exp_cons_int -> .)
    RES_LIST        reduce using rule 124 (exp_cons_int -> .)
    RES_ARRAY       reduce using rule 124 (exp_cons_int -> .)
    RES_DEF         reduce using rule 124 (exp_cons_int -> .)
    RES_START       reduce using rule 124 (exp_cons_int -> .)
    RES_FUNC        reduce using rule 124 (exp_cons_int -> .)
    RES_READ        reduce using rule 124 (exp_cons_int -> .)
    RES_PRINT       reduce using rule 124 (exp_cons_int -> .)
    ID              reduce using rule 124 (exp_cons_int -> .)
    RES_IF          reduce using rule 124 (exp_cons_int -> .)
    RES_SWITCH      reduce using rule 124 (exp_cons_int -> .)
    RES_WHILE       reduce using rule 124 (exp_cons_int -> .)
    RES_FOR         reduce using rule 124 (exp_cons_int -> .)
    $end            reduce using rule 124 (exp_cons_int -> .)
    RES_END         reduce using rule 124 (exp_cons_int -> .)
    E_END           reduce using rule 124 (exp_cons_int -> .)
    RES_ELSE        reduce using rule 124 (exp_cons_int -> .)
    RES_CASE        reduce using rule 124 (exp_cons_int -> .)
    COMMA           reduce using rule 124 (exp_cons_int -> .)
    RCURLY          reduce using rule 124 (exp_cons_int -> .)
    TIMES           reduce using rule 124 (exp_cons_int -> .)
    DIVIDE          reduce using rule 124 (exp_cons_int -> .)
    PLUS            reduce using rule 124 (exp_cons_int -> .)
    MINUS           reduce using rule 124 (exp_cons_int -> .)
    MIN             reduce using rule 124 (exp_cons_int -> .)
    MIN_EQ          reduce using rule 124 (exp_cons_int -> .)
    MAY             reduce using rule 124 (exp_cons_int -> .)
    MAY_EQ          reduce using rule 124 (exp_cons_int -> .)
    DIF             reduce using rule 124 (exp_cons_int -> .)
    EQ_EQ           reduce using rule 124 (exp_cons_int -> .)
    RPAREN          reduce using rule 124 (exp_cons_int -> .)
    COL             reduce using rule 124 (exp_cons_int -> .)
    RBRACKET        reduce using rule 124 (exp_cons_int -> .)

    exp_cons_int                   shift and go to state 116

state 75

    (119) cons -> conslist .

    TIMES           reduce using rule 119 (cons -> conslist .)
    DIVIDE          reduce using rule 119 (cons -> conslist .)
    PLUS            reduce using rule 119 (cons -> conslist .)
    MINUS           reduce using rule 119 (cons -> conslist .)
    RPAREN          reduce using rule 119 (cons -> conslist .)
    COL             reduce using rule 119 (cons -> conslist .)
    COMMA           reduce using rule 119 (cons -> conslist .)
    RBRACKET        reduce using rule 119 (cons -> conslist .)
    RCURLY          reduce using rule 119 (cons -> conslist .)
    MIN             reduce using rule 119 (cons -> conslist .)
    MIN_EQ          reduce using rule 119 (cons -> conslist .)
    MAY             reduce using rule 119 (cons -> conslist .)
    MAY_EQ          reduce using rule 119 (cons -> conslist .)
    DIF             reduce using rule 119 (cons -> conslist .)
    EQ_EQ           reduce using rule 119 (cons -> conslist .)
    RES_INT         reduce using rule 119 (cons -> conslist .)
    RES_FLOAT       reduce using rule 119 (cons -> conslist .)
    RES_DOUBLE      reduce using rule 119 (cons -> conslist .)
    RES_BOOLEAN     reduce using rule 119 (cons -> conslist .)
    RES_STRING      reduce using rule 119 (cons -> conslist .)
    RES_LIST        reduce using rule 119 (cons -> conslist .)
    RES_ARRAY       reduce using rule 119 (cons -> conslist .)
    RES_DEF         reduce using rule 119 (cons -> conslist .)
    RES_START       reduce using rule 119 (cons -> conslist .)
    RES_FUNC        reduce using rule 119 (cons -> conslist .)
    RES_READ        reduce using rule 119 (cons -> conslist .)
    RES_PRINT       reduce using rule 119 (cons -> conslist .)
    ID              reduce using rule 119 (cons -> conslist .)
    RES_IF          reduce using rule 119 (cons -> conslist .)
    RES_SWITCH      reduce using rule 119 (cons -> conslist .)
    RES_WHILE       reduce using rule 119 (cons -> conslist .)
    RES_FOR         reduce using rule 119 (cons -> conslist .)
    $end            reduce using rule 119 (cons -> conslist .)
    RES_END         reduce using rule 119 (cons -> conslist .)
    E_END           reduce using rule 119 (cons -> conslist .)
    RES_ELSE        reduce using rule 119 (cons -> conslist .)
    RES_CASE        reduce using rule 119 (cons -> conslist .)


state 76

    (118) cons -> consarray .

    TIMES           reduce using rule 118 (cons -> consarray .)
    DIVIDE          reduce using rule 118 (cons -> consarray .)
    PLUS            reduce using rule 118 (cons -> consarray .)
    MINUS           reduce using rule 118 (cons -> consarray .)
    RPAREN          reduce using rule 118 (cons -> consarray .)
    COL             reduce using rule 118 (cons -> consarray .)
    COMMA           reduce using rule 118 (cons -> consarray .)
    RBRACKET        reduce using rule 118 (cons -> consarray .)
    RCURLY          reduce using rule 118 (cons -> consarray .)
    MIN             reduce using rule 118 (cons -> consarray .)
    MIN_EQ          reduce using rule 118 (cons -> consarray .)
    MAY             reduce using rule 118 (cons -> consarray .)
    MAY_EQ          reduce using rule 118 (cons -> consarray .)
    DIF             reduce using rule 118 (cons -> consarray .)
    EQ_EQ           reduce using rule 118 (cons -> consarray .)
    RES_INT         reduce using rule 118 (cons -> consarray .)
    RES_FLOAT       reduce using rule 118 (cons -> consarray .)
    RES_DOUBLE      reduce using rule 118 (cons -> consarray .)
    RES_BOOLEAN     reduce using rule 118 (cons -> consarray .)
    RES_STRING      reduce using rule 118 (cons -> consarray .)
    RES_LIST        reduce using rule 118 (cons -> consarray .)
    RES_ARRAY       reduce using rule 118 (cons -> consarray .)
    RES_DEF         reduce using rule 118 (cons -> consarray .)
    RES_START       reduce using rule 118 (cons -> consarray .)
    RES_FUNC        reduce using rule 118 (cons -> consarray .)
    RES_READ        reduce using rule 118 (cons -> consarray .)
    RES_PRINT       reduce using rule 118 (cons -> consarray .)
    ID              reduce using rule 118 (cons -> consarray .)
    RES_IF          reduce using rule 118 (cons -> consarray .)
    RES_SWITCH      reduce using rule 118 (cons -> consarray .)
    RES_WHILE       reduce using rule 118 (cons -> consarray .)
    RES_FOR         reduce using rule 118 (cons -> consarray .)
    $end            reduce using rule 118 (cons -> consarray .)
    RES_END         reduce using rule 118 (cons -> consarray .)
    E_END           reduce using rule 118 (cons -> consarray .)
    RES_ELSE        reduce using rule 118 (cons -> consarray .)
    RES_CASE        reduce using rule 118 (cons -> consarray .)


state 77

    (121) seen_float_cons -> CTE_FLOAT .

    TIMES           reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    DIVIDE          reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    PLUS            reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    MINUS           reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    MIN             reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    MIN_EQ          reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    MAY             reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    MAY_EQ          reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    DIF             reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    EQ_EQ           reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RPAREN          reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_READ        reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_PRINT       reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    ID              reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_DEF         reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_IF          reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_SWITCH      reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_WHILE       reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_FOR         reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_START       reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_FUNC        reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    $end            reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_END         reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    E_END           reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_ELSE        reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_CASE        reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    COL             reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    COMMA           reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RCURLY          reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RBRACKET        reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_INT         reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_FLOAT       reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_DOUBLE      reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_BOOLEAN     reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_STRING      reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_LIST        reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)
    RES_ARRAY       reduce using rule 121 (seen_float_cons -> CTE_FLOAT .)


state 78

    (117) cons -> RES_FALSE .

    TIMES           reduce using rule 117 (cons -> RES_FALSE .)
    DIVIDE          reduce using rule 117 (cons -> RES_FALSE .)
    PLUS            reduce using rule 117 (cons -> RES_FALSE .)
    MINUS           reduce using rule 117 (cons -> RES_FALSE .)
    RPAREN          reduce using rule 117 (cons -> RES_FALSE .)
    COL             reduce using rule 117 (cons -> RES_FALSE .)
    COMMA           reduce using rule 117 (cons -> RES_FALSE .)
    RBRACKET        reduce using rule 117 (cons -> RES_FALSE .)
    RCURLY          reduce using rule 117 (cons -> RES_FALSE .)
    MIN             reduce using rule 117 (cons -> RES_FALSE .)
    MIN_EQ          reduce using rule 117 (cons -> RES_FALSE .)
    MAY             reduce using rule 117 (cons -> RES_FALSE .)
    MAY_EQ          reduce using rule 117 (cons -> RES_FALSE .)
    DIF             reduce using rule 117 (cons -> RES_FALSE .)
    EQ_EQ           reduce using rule 117 (cons -> RES_FALSE .)
    RES_INT         reduce using rule 117 (cons -> RES_FALSE .)
    RES_FLOAT       reduce using rule 117 (cons -> RES_FALSE .)
    RES_DOUBLE      reduce using rule 117 (cons -> RES_FALSE .)
    RES_BOOLEAN     reduce using rule 117 (cons -> RES_FALSE .)
    RES_STRING      reduce using rule 117 (cons -> RES_FALSE .)
    RES_LIST        reduce using rule 117 (cons -> RES_FALSE .)
    RES_ARRAY       reduce using rule 117 (cons -> RES_FALSE .)
    RES_DEF         reduce using rule 117 (cons -> RES_FALSE .)
    RES_START       reduce using rule 117 (cons -> RES_FALSE .)
    RES_FUNC        reduce using rule 117 (cons -> RES_FALSE .)
    RES_READ        reduce using rule 117 (cons -> RES_FALSE .)
    RES_PRINT       reduce using rule 117 (cons -> RES_FALSE .)
    ID              reduce using rule 117 (cons -> RES_FALSE .)
    RES_IF          reduce using rule 117 (cons -> RES_FALSE .)
    RES_SWITCH      reduce using rule 117 (cons -> RES_FALSE .)
    RES_WHILE       reduce using rule 117 (cons -> RES_FALSE .)
    RES_FOR         reduce using rule 117 (cons -> RES_FALSE .)
    $end            reduce using rule 117 (cons -> RES_FALSE .)
    RES_END         reduce using rule 117 (cons -> RES_FALSE .)
    E_END           reduce using rule 117 (cons -> RES_FALSE .)
    RES_ELSE        reduce using rule 117 (cons -> RES_FALSE .)
    RES_CASE        reduce using rule 117 (cons -> RES_FALSE .)


state 79

    (31) vars1_1 -> vars1 .

    RES_DEF         reduce using rule 31 (vars1_1 -> vars1 .)
    RES_START       reduce using rule 31 (vars1_1 -> vars1 .)
    RES_FUNC        reduce using rule 31 (vars1_1 -> vars1 .)
    RES_READ        reduce using rule 31 (vars1_1 -> vars1 .)
    RES_PRINT       reduce using rule 31 (vars1_1 -> vars1 .)
    ID              reduce using rule 31 (vars1_1 -> vars1 .)
    RES_IF          reduce using rule 31 (vars1_1 -> vars1 .)
    RES_SWITCH      reduce using rule 31 (vars1_1 -> vars1 .)
    RES_WHILE       reduce using rule 31 (vars1_1 -> vars1 .)
    RES_FOR         reduce using rule 31 (vars1_1 -> vars1 .)
    $end            reduce using rule 31 (vars1_1 -> vars1 .)
    RES_END         reduce using rule 31 (vars1_1 -> vars1 .)
    E_END           reduce using rule 31 (vars1_1 -> vars1 .)
    RES_ELSE        reduce using rule 31 (vars1_1 -> vars1 .)
    RES_CASE        reduce using rule 31 (vars1_1 -> vars1 .)


state 80

    (30) vars1 -> dato ID vars2 vars1_1 .

    RES_DEF         reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_START       reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_FUNC        reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_READ        reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_PRINT       reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    ID              reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_IF          reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_SWITCH      reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_WHILE       reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_FOR         reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    $end            reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_END         reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    E_END           reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_ELSE        reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)
    RES_CASE        reduce using rule 30 (vars1 -> dato ID vars2 vars1_1 .)


state 81

    (32) vars1_1 -> empty .

    RES_DEF         reduce using rule 32 (vars1_1 -> empty .)
    RES_START       reduce using rule 32 (vars1_1 -> empty .)
    RES_FUNC        reduce using rule 32 (vars1_1 -> empty .)
    RES_READ        reduce using rule 32 (vars1_1 -> empty .)
    RES_PRINT       reduce using rule 32 (vars1_1 -> empty .)
    ID              reduce using rule 32 (vars1_1 -> empty .)
    RES_IF          reduce using rule 32 (vars1_1 -> empty .)
    RES_SWITCH      reduce using rule 32 (vars1_1 -> empty .)
    RES_WHILE       reduce using rule 32 (vars1_1 -> empty .)
    RES_FOR         reduce using rule 32 (vars1_1 -> empty .)
    $end            reduce using rule 32 (vars1_1 -> empty .)
    RES_END         reduce using rule 32 (vars1_1 -> empty .)
    E_END           reduce using rule 32 (vars1_1 -> empty .)
    RES_ELSE        reduce using rule 32 (vars1_1 -> empty .)
    RES_CASE        reduce using rule 32 (vars1_1 -> empty .)


state 82

    (35) vars3 -> COMMA ID . vars3
    (35) vars3 -> . COMMA ID vars3
    (36) vars3 -> . empty
    (132) empty -> .

    COMMA           shift and go to state 56
    RES_INT         reduce using rule 132 (empty -> .)
    RES_FLOAT       reduce using rule 132 (empty -> .)
    RES_DOUBLE      reduce using rule 132 (empty -> .)
    RES_BOOLEAN     reduce using rule 132 (empty -> .)
    RES_STRING      reduce using rule 132 (empty -> .)
    RES_LIST        reduce using rule 132 (empty -> .)
    RES_ARRAY       reduce using rule 132 (empty -> .)
    RES_DEF         reduce using rule 132 (empty -> .)
    RES_START       reduce using rule 132 (empty -> .)
    RES_FUNC        reduce using rule 132 (empty -> .)
    RES_READ        reduce using rule 132 (empty -> .)
    RES_PRINT       reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    RES_IF          reduce using rule 132 (empty -> .)
    RES_SWITCH      reduce using rule 132 (empty -> .)
    RES_WHILE       reduce using rule 132 (empty -> .)
    RES_FOR         reduce using rule 132 (empty -> .)
    $end            reduce using rule 132 (empty -> .)
    RES_END         reduce using rule 132 (empty -> .)
    E_END           reduce using rule 132 (empty -> .)
    RES_ELSE        reduce using rule 132 (empty -> .)
    RES_CASE        reduce using rule 132 (empty -> .)

    vars3                          shift and go to state 117
    empty                          shift and go to state 57

state 83

    (43) array -> RES_ARRAY dato ID LBRACKET . CTE_INT RBRACKET array1

    CTE_INT         shift and go to state 118


state 84

    (16) prototipos_1 -> tipo ID prototipos_2 .

    RPAREN          reduce using rule 16 (prototipos_1 -> tipo ID prototipos_2 .)


state 85

    (17) prototipos_2 -> COMMA . prototipos_1
    (16) prototipos_1 -> . tipo ID prototipos_2
    (24) tipo -> . dato
    (25) tipo -> . estructura
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (26) estructura -> . list
    (27) estructura -> . array
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    tipo                           shift and go to state 46
    prototipos_1                   shift and go to state 119
    list                           shift and go to state 34
    estructura                     shift and go to state 47
    dato                           shift and go to state 48
    array                          shift and go to state 29

state 86

    (18) prototipos_2 -> empty .

    RPAREN          reduce using rule 18 (prototipos_2 -> empty .)


state 87

    (58) estatutos -> vars .

    RES_READ        reduce using rule 58 (estatutos -> vars .)
    RES_PRINT       reduce using rule 58 (estatutos -> vars .)
    ID              reduce using rule 58 (estatutos -> vars .)
    RES_DEF         reduce using rule 58 (estatutos -> vars .)
    RES_IF          reduce using rule 58 (estatutos -> vars .)
    RES_SWITCH      reduce using rule 58 (estatutos -> vars .)
    RES_WHILE       reduce using rule 58 (estatutos -> vars .)
    RES_FOR         reduce using rule 58 (estatutos -> vars .)
    RES_END         reduce using rule 58 (estatutos -> vars .)
    RES_START       reduce using rule 58 (estatutos -> vars .)
    RES_FUNC        reduce using rule 58 (estatutos -> vars .)
    $end            reduce using rule 58 (estatutos -> vars .)
    E_END           reduce using rule 58 (estatutos -> vars .)
    RES_ELSE        reduce using rule 58 (estatutos -> vars .)
    RES_CASE        reduce using rule 58 (estatutos -> vars .)


state 88

    (83) for -> RES_FOR . LPAREN forexp RPAREN COL bloque

    LPAREN          shift and go to state 120


state 89

    (48) modulos -> prototipos se_uso COL bloque .

    RES_START       reduce using rule 48 (modulos -> prototipos se_uso COL bloque .)
    RES_FUNC        reduce using rule 48 (modulos -> prototipos se_uso COL bloque .)
    $end            reduce using rule 48 (modulos -> prototipos se_uso COL bloque .)


state 90

    (85) if -> RES_IF . LPAREN expresion RPAREN COL bloque ifelse

    LPAREN          shift and go to state 121


state 91

    (61) condicion -> if .

    E_END           reduce using rule 61 (condicion -> if .)


state 92

    (53) estatutos -> ciclo . E_END

    E_END           shift and go to state 122


state 93

    (70) asignacion -> seen_id_asignacion . EQUALS asignacion1 insert_asignacion

    EQUALS          shift and go to state 123


state 94

    (62) condicion -> switch .

    E_END           reduce using rule 62 (condicion -> switch .)


state 95

    (60) ciclo -> for .

    E_END           reduce using rule 60 (ciclo -> for .)


state 96

    (57) estatutos -> llamada .

    RES_READ        reduce using rule 57 (estatutos -> llamada .)
    RES_PRINT       reduce using rule 57 (estatutos -> llamada .)
    ID              reduce using rule 57 (estatutos -> llamada .)
    RES_DEF         reduce using rule 57 (estatutos -> llamada .)
    RES_IF          reduce using rule 57 (estatutos -> llamada .)
    RES_SWITCH      reduce using rule 57 (estatutos -> llamada .)
    RES_WHILE       reduce using rule 57 (estatutos -> llamada .)
    RES_FOR         reduce using rule 57 (estatutos -> llamada .)
    RES_END         reduce using rule 57 (estatutos -> llamada .)
    RES_START       reduce using rule 57 (estatutos -> llamada .)
    RES_FUNC        reduce using rule 57 (estatutos -> llamada .)
    $end            reduce using rule 57 (estatutos -> llamada .)
    E_END           reduce using rule 57 (estatutos -> llamada .)
    RES_ELSE        reduce using rule 57 (estatutos -> llamada .)
    RES_CASE        reduce using rule 57 (estatutos -> llamada .)


state 97

    (52) estatutos -> condicion . E_END

    E_END           shift and go to state 124


state 98

    (67) escritura -> RES_PRINT . LPAREN escritura1 RPAREN

    LPAREN          shift and go to state 125


state 99

    (54) estatutos -> lectura .

    RES_READ        reduce using rule 54 (estatutos -> lectura .)
    RES_PRINT       reduce using rule 54 (estatutos -> lectura .)
    ID              reduce using rule 54 (estatutos -> lectura .)
    RES_DEF         reduce using rule 54 (estatutos -> lectura .)
    RES_IF          reduce using rule 54 (estatutos -> lectura .)
    RES_SWITCH      reduce using rule 54 (estatutos -> lectura .)
    RES_WHILE       reduce using rule 54 (estatutos -> lectura .)
    RES_FOR         reduce using rule 54 (estatutos -> lectura .)
    RES_END         reduce using rule 54 (estatutos -> lectura .)
    RES_START       reduce using rule 54 (estatutos -> lectura .)
    RES_FUNC        reduce using rule 54 (estatutos -> lectura .)
    $end            reduce using rule 54 (estatutos -> lectura .)
    E_END           reduce using rule 54 (estatutos -> lectura .)
    RES_ELSE        reduce using rule 54 (estatutos -> lectura .)
    RES_CASE        reduce using rule 54 (estatutos -> lectura .)


state 100

    (51) bloque -> empty .

    RES_START       reduce using rule 51 (bloque -> empty .)
    RES_FUNC        reduce using rule 51 (bloque -> empty .)
    $end            reduce using rule 51 (bloque -> empty .)
    RES_END         reduce using rule 51 (bloque -> empty .)
    E_END           reduce using rule 51 (bloque -> empty .)
    RES_ELSE        reduce using rule 51 (bloque -> empty .)
    RES_CASE        reduce using rule 51 (bloque -> empty .)


state 101

    (50) bloque -> estatutos . bloque
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (132) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS asignacion1 insert_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (85) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (88) switch -> . RES_SWITCH COL switch2
    (82) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (83) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (71) seen_id_asignacion -> . ID

    RES_START       reduce using rule 132 (empty -> .)
    RES_FUNC        reduce using rule 132 (empty -> .)
    $end            reduce using rule 132 (empty -> .)
    RES_END         reduce using rule 132 (empty -> .)
    E_END           reduce using rule 132 (empty -> .)
    RES_ELSE        reduce using rule 132 (empty -> .)
    RES_CASE        reduce using rule 132 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 126
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 102

    (82) while -> RES_WHILE . LPAREN expresion RPAREN COL bloque

    LPAREN          shift and go to state 127


state 103

    (63) llamada -> ID . LPAREN llamada1 RPAREN
    (71) seen_id_asignacion -> ID .

    LPAREN          shift and go to state 128
    EQUALS          reduce using rule 71 (seen_id_asignacion -> ID .)


state 104

    (66) lectura -> RES_READ . LPAREN tipo RPAREN

    LPAREN          shift and go to state 129


state 105

    (56) estatutos -> asignacion .

    RES_READ        reduce using rule 56 (estatutos -> asignacion .)
    RES_PRINT       reduce using rule 56 (estatutos -> asignacion .)
    ID              reduce using rule 56 (estatutos -> asignacion .)
    RES_DEF         reduce using rule 56 (estatutos -> asignacion .)
    RES_IF          reduce using rule 56 (estatutos -> asignacion .)
    RES_SWITCH      reduce using rule 56 (estatutos -> asignacion .)
    RES_WHILE       reduce using rule 56 (estatutos -> asignacion .)
    RES_FOR         reduce using rule 56 (estatutos -> asignacion .)
    RES_END         reduce using rule 56 (estatutos -> asignacion .)
    RES_START       reduce using rule 56 (estatutos -> asignacion .)
    RES_FUNC        reduce using rule 56 (estatutos -> asignacion .)
    $end            reduce using rule 56 (estatutos -> asignacion .)
    E_END           reduce using rule 56 (estatutos -> asignacion .)
    RES_ELSE        reduce using rule 56 (estatutos -> asignacion .)
    RES_CASE        reduce using rule 56 (estatutos -> asignacion .)


state 106

    (88) switch -> RES_SWITCH . COL switch2

    COL             shift and go to state 130


state 107

    (59) ciclo -> while .

    E_END           reduce using rule 59 (ciclo -> while .)


state 108

    (55) estatutos -> escritura .

    RES_READ        reduce using rule 55 (estatutos -> escritura .)
    RES_PRINT       reduce using rule 55 (estatutos -> escritura .)
    ID              reduce using rule 55 (estatutos -> escritura .)
    RES_DEF         reduce using rule 55 (estatutos -> escritura .)
    RES_IF          reduce using rule 55 (estatutos -> escritura .)
    RES_SWITCH      reduce using rule 55 (estatutos -> escritura .)
    RES_WHILE       reduce using rule 55 (estatutos -> escritura .)
    RES_FOR         reduce using rule 55 (estatutos -> escritura .)
    RES_END         reduce using rule 55 (estatutos -> escritura .)
    RES_START       reduce using rule 55 (estatutos -> escritura .)
    RES_FUNC        reduce using rule 55 (estatutos -> escritura .)
    $end            reduce using rule 55 (estatutos -> escritura .)
    E_END           reduce using rule 55 (estatutos -> escritura .)
    RES_ELSE        reduce using rule 55 (estatutos -> escritura .)
    RES_CASE        reduce using rule 55 (estatutos -> escritura .)


state 109

    (126) main -> RES_START comienza_main COL bloque . RES_END

    RES_END         shift and go to state 131


state 110

    (40) cons_loop -> cons . cons_loop_1
    (41) cons_loop_1 -> . COMMA cons_loop
    (42) cons_loop_1 -> . empty
    (132) empty -> .

    COMMA           shift and go to state 132
    RCURLY          reduce using rule 132 (empty -> .)

    empty                          shift and go to state 133
    cons_loop_1                    shift and go to state 134

state 111

    (38) list1 -> LCURLY cons_loop . RCURLY

    RCURLY          shift and go to state 135


state 112

    (113) cons -> seen_float_cons exp_cons_float .

    TIMES           reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    DIVIDE          reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    PLUS            reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    MINUS           reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RPAREN          reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    COL             reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    COMMA           reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RBRACKET        reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RCURLY          reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    MIN             reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    MIN_EQ          reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    MAY             reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    MAY_EQ          reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    DIF             reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    EQ_EQ           reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_INT         reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_FLOAT       reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_DOUBLE      reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_BOOLEAN     reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_STRING      reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_LIST        reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_ARRAY       reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_DEF         reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_START       reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_FUNC        reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_READ        reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_PRINT       reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    ID              reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_IF          reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_SWITCH      reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_WHILE       reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_FOR         reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    $end            reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_END         reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    E_END           reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_ELSE        reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)
    RES_CASE        reduce using rule 113 (cons -> seen_float_cons exp_cons_float .)


state 113

    (111) cons -> seen_id_cons exp_1 .

    TIMES           reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    DIVIDE          reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    PLUS            reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    MINUS           reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RPAREN          reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    COL             reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    COMMA           reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RBRACKET        reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RCURLY          reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    MIN             reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    MIN_EQ          reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    MAY             reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    MAY_EQ          reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    DIF             reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    EQ_EQ           reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_INT         reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_FLOAT       reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_DOUBLE      reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_BOOLEAN     reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_STRING      reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_LIST        reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_ARRAY       reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_DEF         reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_START       reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_FUNC        reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_READ        reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_PRINT       reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    ID              reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_IF          reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_SWITCH      reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_WHILE       reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_FOR         reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    $end            reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_END         reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    E_END           reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_ELSE        reduce using rule 111 (cons -> seen_id_cons exp_1 .)
    RES_CASE        reduce using rule 111 (cons -> seen_id_cons exp_1 .)


state 114

    (129) conslist -> ID EQUALS . LCURLY conslist1 RCURLY

    LCURLY          shift and go to state 136


state 115

    (128) consarray -> ID LBRACKET . CTE_INT RBRACKET EQUALS cons

    CTE_INT         shift and go to state 137


state 116

    (112) cons -> seen_int_cons exp_cons_int .

    TIMES           reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    DIVIDE          reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    PLUS            reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    MINUS           reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RPAREN          reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    COL             reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    COMMA           reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RBRACKET        reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RCURLY          reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    MIN             reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    MIN_EQ          reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    MAY             reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    MAY_EQ          reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    DIF             reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    EQ_EQ           reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_INT         reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_FLOAT       reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_DOUBLE      reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_BOOLEAN     reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_STRING      reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_LIST        reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_ARRAY       reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_DEF         reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_START       reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_FUNC        reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_READ        reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_PRINT       reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    ID              reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_IF          reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_SWITCH      reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_WHILE       reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_FOR         reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    $end            reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_END         reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    E_END           reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_ELSE        reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)
    RES_CASE        reduce using rule 112 (cons -> seen_int_cons exp_cons_int .)


state 117

    (35) vars3 -> COMMA ID vars3 .

    RES_INT         reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_FLOAT       reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_DOUBLE      reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_BOOLEAN     reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_STRING      reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_LIST        reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_ARRAY       reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_DEF         reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_START       reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_FUNC        reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_READ        reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_PRINT       reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    ID              reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_IF          reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_SWITCH      reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_WHILE       reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_FOR         reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    $end            reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_END         reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    E_END           reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_ELSE        reduce using rule 35 (vars3 -> COMMA ID vars3 .)
    RES_CASE        reduce using rule 35 (vars3 -> COMMA ID vars3 .)


state 118

    (43) array -> RES_ARRAY dato ID LBRACKET CTE_INT . RBRACKET array1

    RBRACKET        shift and go to state 138


state 119

    (17) prototipos_2 -> COMMA prototipos_1 .

    RPAREN          reduce using rule 17 (prototipos_2 -> COMMA prototipos_1 .)


state 120

    (83) for -> RES_FOR LPAREN . forexp RPAREN COL bloque
    (84) forexp -> . ID EQUALS cons COL expresion COL ID EQUALS expresion

    ID              shift and go to state 139

    forexp                         shift and go to state 140

state 121

    (85) if -> RES_IF LPAREN . expresion RPAREN COL bloque ifelse
    (91) expresion -> . exp expresion_1
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    expresion                      shift and go to state 147
    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    exp                            shift and go to state 148
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68

state 122

    (53) estatutos -> ciclo E_END .

    RES_READ        reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_PRINT       reduce using rule 53 (estatutos -> ciclo E_END .)
    ID              reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_DEF         reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_IF          reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_SWITCH      reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_WHILE       reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_FOR         reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_END         reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_START       reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_FUNC        reduce using rule 53 (estatutos -> ciclo E_END .)
    $end            reduce using rule 53 (estatutos -> ciclo E_END .)
    E_END           reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_ELSE        reduce using rule 53 (estatutos -> ciclo E_END .)
    RES_CASE        reduce using rule 53 (estatutos -> ciclo E_END .)


state 123

    (70) asignacion -> seen_id_asignacion EQUALS . asignacion1 insert_asignacion
    (73) asignacion1 -> . exp
    (74) asignacion1 -> . asignlist
    (75) asignacion1 -> . asignarray
    (99) exp -> . termino exp1
    (76) asignlist -> . LCURLY asignlist1 RCURLY
    (79) asignarray -> . LBRACKET asignarray1 RBRACKET
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LCURLY          shift and go to state 150
    LBRACKET        shift and go to state 149
    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    cons                           shift and go to state 141
    termino                        shift and go to state 143
    asignarray                     shift and go to state 151
    seen_float_cons                shift and go to state 67
    factor                         shift and go to state 145
    asignlist                      shift and go to state 152
    seen_id_cons                   shift and go to state 68
    seen_int_cons                  shift and go to state 74
    conslist                       shift and go to state 75
    consarray                      shift and go to state 76
    exp                            shift and go to state 153
    asignacion1                    shift and go to state 154

state 124

    (52) estatutos -> condicion E_END .

    RES_READ        reduce using rule 52 (estatutos -> condicion E_END .)
    RES_PRINT       reduce using rule 52 (estatutos -> condicion E_END .)
    ID              reduce using rule 52 (estatutos -> condicion E_END .)
    RES_DEF         reduce using rule 52 (estatutos -> condicion E_END .)
    RES_IF          reduce using rule 52 (estatutos -> condicion E_END .)
    RES_SWITCH      reduce using rule 52 (estatutos -> condicion E_END .)
    RES_WHILE       reduce using rule 52 (estatutos -> condicion E_END .)
    RES_FOR         reduce using rule 52 (estatutos -> condicion E_END .)
    RES_END         reduce using rule 52 (estatutos -> condicion E_END .)
    RES_START       reduce using rule 52 (estatutos -> condicion E_END .)
    RES_FUNC        reduce using rule 52 (estatutos -> condicion E_END .)
    $end            reduce using rule 52 (estatutos -> condicion E_END .)
    E_END           reduce using rule 52 (estatutos -> condicion E_END .)
    RES_ELSE        reduce using rule 52 (estatutos -> condicion E_END .)
    RES_CASE        reduce using rule 52 (estatutos -> condicion E_END .)


state 125

    (67) escritura -> RES_PRINT LPAREN . escritura1 RPAREN
    (68) escritura1 -> . expresion
    (69) escritura1 -> . CTE_STRING
    (91) expresion -> . exp expresion_1
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_STRING      shift and go to state 155
    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    expresion                      shift and go to state 157
    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    exp                            shift and go to state 148
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    factor                         shift and go to state 145
    escritura1                     shift and go to state 156
    seen_id_cons                   shift and go to state 68

state 126

    (50) bloque -> estatutos bloque .

    RES_START       reduce using rule 50 (bloque -> estatutos bloque .)
    RES_FUNC        reduce using rule 50 (bloque -> estatutos bloque .)
    $end            reduce using rule 50 (bloque -> estatutos bloque .)
    RES_END         reduce using rule 50 (bloque -> estatutos bloque .)
    E_END           reduce using rule 50 (bloque -> estatutos bloque .)
    RES_ELSE        reduce using rule 50 (bloque -> estatutos bloque .)
    RES_CASE        reduce using rule 50 (bloque -> estatutos bloque .)


state 127

    (82) while -> RES_WHILE LPAREN . expresion RPAREN COL bloque
    (91) expresion -> . exp expresion_1
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    expresion                      shift and go to state 158
    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    exp                            shift and go to state 148
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68

state 128

    (63) llamada -> ID LPAREN . llamada1 RPAREN
    (64) llamada1 -> . expresion
    (65) llamada1 -> . empty
    (91) expresion -> . exp expresion_1
    (132) empty -> .
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    RPAREN          reduce using rule 132 (empty -> .)
    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    expresion                      shift and go to state 161
    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    exp                            shift and go to state 148
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    factor                         shift and go to state 145
    llamada1                       shift and go to state 159
    seen_id_cons                   shift and go to state 68
    empty                          shift and go to state 160

state 129

    (66) lectura -> RES_READ LPAREN . tipo RPAREN
    (24) tipo -> . dato
    (25) tipo -> . estructura
    (19) dato -> . RES_INT
    (20) dato -> . RES_FLOAT
    (21) dato -> . RES_DOUBLE
    (22) dato -> . RES_BOOLEAN
    (23) dato -> . RES_STRING
    (26) estructura -> . list
    (27) estructura -> . array
    (37) list -> . RES_LIST dato ID list1
    (43) array -> . RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1

    RES_INT         shift and go to state 11
    RES_FLOAT       shift and go to state 15
    RES_DOUBLE      shift and go to state 13
    RES_BOOLEAN     shift and go to state 10
    RES_STRING      shift and go to state 12
    RES_LIST        shift and go to state 32
    RES_ARRAY       shift and go to state 35

    tipo                           shift and go to state 162
    list                           shift and go to state 34
    estructura                     shift and go to state 47
    dato                           shift and go to state 48
    array                          shift and go to state 29

state 130

    (88) switch -> RES_SWITCH COL . switch2
    (89) switch2 -> . RES_CASE expresion COL bloque switch2
    (90) switch2 -> . empty
    (132) empty -> .

    RES_CASE        shift and go to state 164
    E_END           reduce using rule 132 (empty -> .)

    switch2                        shift and go to state 163
    empty                          shift and go to state 165

state 131

    (126) main -> RES_START comienza_main COL bloque RES_END .

    RES_FUNC        reduce using rule 126 (main -> RES_START comienza_main COL bloque RES_END .)
    $end            reduce using rule 126 (main -> RES_START comienza_main COL bloque RES_END .)


state 132

    (41) cons_loop_1 -> COMMA . cons_loop
    (40) cons_loop -> . cons cons_loop_1
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 110
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    cons_loop                      shift and go to state 166
    seen_id_cons                   shift and go to state 68

state 133

    (42) cons_loop_1 -> empty .

    RCURLY          reduce using rule 42 (cons_loop_1 -> empty .)


state 134

    (40) cons_loop -> cons cons_loop_1 .

    RCURLY          reduce using rule 40 (cons_loop -> cons cons_loop_1 .)


state 135

    (38) list1 -> LCURLY cons_loop RCURLY .

    RES_INT         reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_FLOAT       reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_DOUBLE      reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_BOOLEAN     reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_STRING      reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_LIST        reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RES_ARRAY       reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    ID              reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)
    RPAREN          reduce using rule 38 (list1 -> LCURLY cons_loop RCURLY .)


state 136

    (129) conslist -> ID EQUALS LCURLY . conslist1 RCURLY
    (130) conslist1 -> . cons
    (131) conslist1 -> . cons COMMA conslist1
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 167
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    conslist1                      shift and go to state 168
    seen_id_cons                   shift and go to state 68

state 137

    (128) consarray -> ID LBRACKET CTE_INT . RBRACKET EQUALS cons

    RBRACKET        shift and go to state 169


state 138

    (43) array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET . array1
    (44) array1 -> . COL LBRACKET array2 RBRACKET
    (45) array1 -> . empty
    (132) empty -> .

    COL             shift and go to state 171
    RES_INT         reduce using rule 132 (empty -> .)
    RES_FLOAT       reduce using rule 132 (empty -> .)
    RES_DOUBLE      reduce using rule 132 (empty -> .)
    RES_BOOLEAN     reduce using rule 132 (empty -> .)
    RES_STRING      reduce using rule 132 (empty -> .)
    RES_LIST        reduce using rule 132 (empty -> .)
    RES_ARRAY       reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    RPAREN          reduce using rule 132 (empty -> .)

    array1                         shift and go to state 170
    empty                          shift and go to state 172

state 139

    (84) forexp -> ID . EQUALS cons COL expresion COL ID EQUALS expresion

    EQUALS          shift and go to state 173


state 140

    (83) for -> RES_FOR LPAREN forexp . RPAREN COL bloque

    RPAREN          shift and go to state 174


state 141

    (108) factor -> cons .

    TIMES           reduce using rule 108 (factor -> cons .)
    DIVIDE          reduce using rule 108 (factor -> cons .)
    PLUS            reduce using rule 108 (factor -> cons .)
    MINUS           reduce using rule 108 (factor -> cons .)
    MIN             reduce using rule 108 (factor -> cons .)
    MIN_EQ          reduce using rule 108 (factor -> cons .)
    MAY             reduce using rule 108 (factor -> cons .)
    MAY_EQ          reduce using rule 108 (factor -> cons .)
    DIF             reduce using rule 108 (factor -> cons .)
    EQ_EQ           reduce using rule 108 (factor -> cons .)
    RPAREN          reduce using rule 108 (factor -> cons .)
    COL             reduce using rule 108 (factor -> cons .)
    RES_READ        reduce using rule 108 (factor -> cons .)
    RES_PRINT       reduce using rule 108 (factor -> cons .)
    ID              reduce using rule 108 (factor -> cons .)
    RES_DEF         reduce using rule 108 (factor -> cons .)
    RES_IF          reduce using rule 108 (factor -> cons .)
    RES_SWITCH      reduce using rule 108 (factor -> cons .)
    RES_WHILE       reduce using rule 108 (factor -> cons .)
    RES_FOR         reduce using rule 108 (factor -> cons .)
    RES_START       reduce using rule 108 (factor -> cons .)
    RES_FUNC        reduce using rule 108 (factor -> cons .)
    $end            reduce using rule 108 (factor -> cons .)
    RES_END         reduce using rule 108 (factor -> cons .)
    E_END           reduce using rule 108 (factor -> cons .)
    RES_ELSE        reduce using rule 108 (factor -> cons .)
    RES_CASE        reduce using rule 108 (factor -> cons .)


state 142

    (107) factor -> LPAREN . exp RPAREN
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    exp                            shift and go to state 175
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68

state 143

    (99) exp -> termino . exp1
    (100) exp1 -> . PLUS exp
    (101) exp1 -> . MINUS exp
    (102) exp1 -> . empty
    (132) empty -> .

    PLUS            shift and go to state 177
    MINUS           shift and go to state 178
    MIN             reduce using rule 132 (empty -> .)
    MIN_EQ          reduce using rule 132 (empty -> .)
    MAY             reduce using rule 132 (empty -> .)
    MAY_EQ          reduce using rule 132 (empty -> .)
    DIF             reduce using rule 132 (empty -> .)
    EQ_EQ           reduce using rule 132 (empty -> .)
    RPAREN          reduce using rule 132 (empty -> .)
    RES_READ        reduce using rule 132 (empty -> .)
    RES_PRINT       reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    RES_DEF         reduce using rule 132 (empty -> .)
    RES_IF          reduce using rule 132 (empty -> .)
    RES_SWITCH      reduce using rule 132 (empty -> .)
    RES_WHILE       reduce using rule 132 (empty -> .)
    RES_FOR         reduce using rule 132 (empty -> .)
    RES_START       reduce using rule 132 (empty -> .)
    RES_FUNC        reduce using rule 132 (empty -> .)
    $end            reduce using rule 132 (empty -> .)
    RES_END         reduce using rule 132 (empty -> .)
    E_END           reduce using rule 132 (empty -> .)
    RES_ELSE        reduce using rule 132 (empty -> .)
    RES_CASE        reduce using rule 132 (empty -> .)
    COL             reduce using rule 132 (empty -> .)

    exp1                           shift and go to state 176
    empty                          shift and go to state 179

state 144

    (110) factor -> MINUS . cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 180
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_id_cons                   shift and go to state 68

state 145

    (103) termino -> factor . termino1
    (104) termino1 -> . TIMES termino
    (105) termino1 -> . DIVIDE termino
    (106) termino1 -> . empty
    (132) empty -> .

    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 181
    PLUS            reduce using rule 132 (empty -> .)
    MINUS           reduce using rule 132 (empty -> .)
    MIN             reduce using rule 132 (empty -> .)
    MIN_EQ          reduce using rule 132 (empty -> .)
    MAY             reduce using rule 132 (empty -> .)
    MAY_EQ          reduce using rule 132 (empty -> .)
    DIF             reduce using rule 132 (empty -> .)
    EQ_EQ           reduce using rule 132 (empty -> .)
    RPAREN          reduce using rule 132 (empty -> .)
    RES_READ        reduce using rule 132 (empty -> .)
    RES_PRINT       reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    RES_DEF         reduce using rule 132 (empty -> .)
    RES_IF          reduce using rule 132 (empty -> .)
    RES_SWITCH      reduce using rule 132 (empty -> .)
    RES_WHILE       reduce using rule 132 (empty -> .)
    RES_FOR         reduce using rule 132 (empty -> .)
    RES_START       reduce using rule 132 (empty -> .)
    RES_FUNC        reduce using rule 132 (empty -> .)
    $end            reduce using rule 132 (empty -> .)
    RES_END         reduce using rule 132 (empty -> .)
    E_END           reduce using rule 132 (empty -> .)
    RES_ELSE        reduce using rule 132 (empty -> .)
    RES_CASE        reduce using rule 132 (empty -> .)
    COL             reduce using rule 132 (empty -> .)

    termino1                       shift and go to state 182
    empty                          shift and go to state 184

state 146

    (109) factor -> PLUS . cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 185
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_id_cons                   shift and go to state 68

state 147

    (85) if -> RES_IF LPAREN expresion . RPAREN COL bloque ifelse

    RPAREN          shift and go to state 186


state 148

    (91) expresion -> exp . expresion_1
    (92) expresion_1 -> . MIN exp
    (93) expresion_1 -> . MIN_EQ exp
    (94) expresion_1 -> . MAY exp
    (95) expresion_1 -> . MAY_EQ exp
    (96) expresion_1 -> . DIF exp
    (97) expresion_1 -> . EQ_EQ exp
    (98) expresion_1 -> . empty
    (132) empty -> .

    MIN             shift and go to state 188
    MIN_EQ          shift and go to state 187
    MAY             shift and go to state 189
    MAY_EQ          shift and go to state 190
    DIF             shift and go to state 193
    EQ_EQ           shift and go to state 191
    RPAREN          reduce using rule 132 (empty -> .)
    COL             reduce using rule 132 (empty -> .)

    empty                          shift and go to state 194
    expresion_1                    shift and go to state 192

state 149

    (79) asignarray -> LBRACKET . asignarray1 RBRACKET
    (80) asignarray1 -> . cons
    (81) asignarray1 -> . cons COMMA asignarray1
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 195
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    seen_id_cons                   shift and go to state 68
    conslist                       shift and go to state 75
    asignarray1                    shift and go to state 196

state 150

    (76) asignlist -> LCURLY . asignlist1 RCURLY
    (77) asignlist1 -> . cons
    (78) asignlist1 -> . cons COMMA asignlist1
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    asignlist1                     shift and go to state 197
    cons                           shift and go to state 198
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_id_cons                   shift and go to state 68

state 151

    (75) asignacion1 -> asignarray .

    RES_READ        reduce using rule 75 (asignacion1 -> asignarray .)
    RES_PRINT       reduce using rule 75 (asignacion1 -> asignarray .)
    ID              reduce using rule 75 (asignacion1 -> asignarray .)
    RES_DEF         reduce using rule 75 (asignacion1 -> asignarray .)
    RES_IF          reduce using rule 75 (asignacion1 -> asignarray .)
    RES_SWITCH      reduce using rule 75 (asignacion1 -> asignarray .)
    RES_WHILE       reduce using rule 75 (asignacion1 -> asignarray .)
    RES_FOR         reduce using rule 75 (asignacion1 -> asignarray .)
    RES_START       reduce using rule 75 (asignacion1 -> asignarray .)
    RES_FUNC        reduce using rule 75 (asignacion1 -> asignarray .)
    $end            reduce using rule 75 (asignacion1 -> asignarray .)
    RES_END         reduce using rule 75 (asignacion1 -> asignarray .)
    E_END           reduce using rule 75 (asignacion1 -> asignarray .)
    RES_ELSE        reduce using rule 75 (asignacion1 -> asignarray .)
    RES_CASE        reduce using rule 75 (asignacion1 -> asignarray .)


state 152

    (74) asignacion1 -> asignlist .

    RES_READ        reduce using rule 74 (asignacion1 -> asignlist .)
    RES_PRINT       reduce using rule 74 (asignacion1 -> asignlist .)
    ID              reduce using rule 74 (asignacion1 -> asignlist .)
    RES_DEF         reduce using rule 74 (asignacion1 -> asignlist .)
    RES_IF          reduce using rule 74 (asignacion1 -> asignlist .)
    RES_SWITCH      reduce using rule 74 (asignacion1 -> asignlist .)
    RES_WHILE       reduce using rule 74 (asignacion1 -> asignlist .)
    RES_FOR         reduce using rule 74 (asignacion1 -> asignlist .)
    RES_START       reduce using rule 74 (asignacion1 -> asignlist .)
    RES_FUNC        reduce using rule 74 (asignacion1 -> asignlist .)
    $end            reduce using rule 74 (asignacion1 -> asignlist .)
    RES_END         reduce using rule 74 (asignacion1 -> asignlist .)
    E_END           reduce using rule 74 (asignacion1 -> asignlist .)
    RES_ELSE        reduce using rule 74 (asignacion1 -> asignlist .)
    RES_CASE        reduce using rule 74 (asignacion1 -> asignlist .)


state 153

    (73) asignacion1 -> exp .

    RES_READ        reduce using rule 73 (asignacion1 -> exp .)
    RES_PRINT       reduce using rule 73 (asignacion1 -> exp .)
    ID              reduce using rule 73 (asignacion1 -> exp .)
    RES_DEF         reduce using rule 73 (asignacion1 -> exp .)
    RES_IF          reduce using rule 73 (asignacion1 -> exp .)
    RES_SWITCH      reduce using rule 73 (asignacion1 -> exp .)
    RES_WHILE       reduce using rule 73 (asignacion1 -> exp .)
    RES_FOR         reduce using rule 73 (asignacion1 -> exp .)
    RES_START       reduce using rule 73 (asignacion1 -> exp .)
    RES_FUNC        reduce using rule 73 (asignacion1 -> exp .)
    $end            reduce using rule 73 (asignacion1 -> exp .)
    RES_END         reduce using rule 73 (asignacion1 -> exp .)
    E_END           reduce using rule 73 (asignacion1 -> exp .)
    RES_ELSE        reduce using rule 73 (asignacion1 -> exp .)
    RES_CASE        reduce using rule 73 (asignacion1 -> exp .)


state 154

    (70) asignacion -> seen_id_asignacion EQUALS asignacion1 . insert_asignacion
    (72) insert_asignacion -> .

    RES_READ        reduce using rule 72 (insert_asignacion -> .)
    RES_PRINT       reduce using rule 72 (insert_asignacion -> .)
    ID              reduce using rule 72 (insert_asignacion -> .)
    RES_DEF         reduce using rule 72 (insert_asignacion -> .)
    RES_IF          reduce using rule 72 (insert_asignacion -> .)
    RES_SWITCH      reduce using rule 72 (insert_asignacion -> .)
    RES_WHILE       reduce using rule 72 (insert_asignacion -> .)
    RES_FOR         reduce using rule 72 (insert_asignacion -> .)
    RES_START       reduce using rule 72 (insert_asignacion -> .)
    RES_FUNC        reduce using rule 72 (insert_asignacion -> .)
    $end            reduce using rule 72 (insert_asignacion -> .)
    RES_END         reduce using rule 72 (insert_asignacion -> .)
    E_END           reduce using rule 72 (insert_asignacion -> .)
    RES_ELSE        reduce using rule 72 (insert_asignacion -> .)
    RES_CASE        reduce using rule 72 (insert_asignacion -> .)

    insert_asignacion              shift and go to state 199

state 155

    (69) escritura1 -> CTE_STRING .
    (115) cons -> CTE_STRING .

  ! reduce/reduce conflict for RPAREN resolved using rule 69 (escritura1 -> CTE_STRING .)
    RPAREN          reduce using rule 69 (escritura1 -> CTE_STRING .)
    TIMES           reduce using rule 115 (cons -> CTE_STRING .)
    DIVIDE          reduce using rule 115 (cons -> CTE_STRING .)
    PLUS            reduce using rule 115 (cons -> CTE_STRING .)
    MINUS           reduce using rule 115 (cons -> CTE_STRING .)
    MIN             reduce using rule 115 (cons -> CTE_STRING .)
    MIN_EQ          reduce using rule 115 (cons -> CTE_STRING .)
    MAY             reduce using rule 115 (cons -> CTE_STRING .)
    MAY_EQ          reduce using rule 115 (cons -> CTE_STRING .)
    DIF             reduce using rule 115 (cons -> CTE_STRING .)
    EQ_EQ           reduce using rule 115 (cons -> CTE_STRING .)

  ! RPAREN          [ reduce using rule 115 (cons -> CTE_STRING .) ]


state 156

    (67) escritura -> RES_PRINT LPAREN escritura1 . RPAREN

    RPAREN          shift and go to state 200


state 157

    (68) escritura1 -> expresion .

    RPAREN          reduce using rule 68 (escritura1 -> expresion .)


state 158

    (82) while -> RES_WHILE LPAREN expresion . RPAREN COL bloque

    RPAREN          shift and go to state 201


state 159

    (63) llamada -> ID LPAREN llamada1 . RPAREN

    RPAREN          shift and go to state 202


state 160

    (65) llamada1 -> empty .

    RPAREN          reduce using rule 65 (llamada1 -> empty .)


state 161

    (64) llamada1 -> expresion .

    RPAREN          reduce using rule 64 (llamada1 -> expresion .)


state 162

    (66) lectura -> RES_READ LPAREN tipo . RPAREN

    RPAREN          shift and go to state 203


state 163

    (88) switch -> RES_SWITCH COL switch2 .

    E_END           reduce using rule 88 (switch -> RES_SWITCH COL switch2 .)


state 164

    (89) switch2 -> RES_CASE . expresion COL bloque switch2
    (91) expresion -> . exp expresion_1
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    expresion                      shift and go to state 204
    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    exp                            shift and go to state 148
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68
    seen_float_cons                shift and go to state 67

state 165

    (90) switch2 -> empty .

    E_END           reduce using rule 90 (switch2 -> empty .)


state 166

    (41) cons_loop_1 -> COMMA cons_loop .

    RCURLY          reduce using rule 41 (cons_loop_1 -> COMMA cons_loop .)


state 167

    (130) conslist1 -> cons .
    (131) conslist1 -> cons . COMMA conslist1

    RCURLY          reduce using rule 130 (conslist1 -> cons .)
    COMMA           shift and go to state 205


state 168

    (129) conslist -> ID EQUALS LCURLY conslist1 . RCURLY

    RCURLY          shift and go to state 206


state 169

    (128) consarray -> ID LBRACKET CTE_INT RBRACKET . EQUALS cons

    EQUALS          shift and go to state 207


state 170

    (43) array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .

    RES_INT         reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_FLOAT       reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_DOUBLE      reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_BOOLEAN     reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_STRING      reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_LIST        reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RES_ARRAY       reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    ID              reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)
    RPAREN          reduce using rule 43 (array -> RES_ARRAY dato ID LBRACKET CTE_INT RBRACKET array1 .)


state 171

    (44) array1 -> COL . LBRACKET array2 RBRACKET

    LBRACKET        shift and go to state 208


state 172

    (45) array1 -> empty .

    RES_INT         reduce using rule 45 (array1 -> empty .)
    RES_FLOAT       reduce using rule 45 (array1 -> empty .)
    RES_DOUBLE      reduce using rule 45 (array1 -> empty .)
    RES_BOOLEAN     reduce using rule 45 (array1 -> empty .)
    RES_STRING      reduce using rule 45 (array1 -> empty .)
    RES_LIST        reduce using rule 45 (array1 -> empty .)
    RES_ARRAY       reduce using rule 45 (array1 -> empty .)
    ID              reduce using rule 45 (array1 -> empty .)
    RPAREN          reduce using rule 45 (array1 -> empty .)


state 173

    (84) forexp -> ID EQUALS . cons COL expresion COL ID EQUALS expresion
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 209
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_id_cons                   shift and go to state 68

state 174

    (83) for -> RES_FOR LPAREN forexp RPAREN . COL bloque

    COL             shift and go to state 210


state 175

    (107) factor -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 211


state 176

    (99) exp -> termino exp1 .

    MIN             reduce using rule 99 (exp -> termino exp1 .)
    MIN_EQ          reduce using rule 99 (exp -> termino exp1 .)
    MAY             reduce using rule 99 (exp -> termino exp1 .)
    MAY_EQ          reduce using rule 99 (exp -> termino exp1 .)
    DIF             reduce using rule 99 (exp -> termino exp1 .)
    EQ_EQ           reduce using rule 99 (exp -> termino exp1 .)
    RPAREN          reduce using rule 99 (exp -> termino exp1 .)
    COL             reduce using rule 99 (exp -> termino exp1 .)
    RES_READ        reduce using rule 99 (exp -> termino exp1 .)
    RES_PRINT       reduce using rule 99 (exp -> termino exp1 .)
    ID              reduce using rule 99 (exp -> termino exp1 .)
    RES_DEF         reduce using rule 99 (exp -> termino exp1 .)
    RES_IF          reduce using rule 99 (exp -> termino exp1 .)
    RES_SWITCH      reduce using rule 99 (exp -> termino exp1 .)
    RES_WHILE       reduce using rule 99 (exp -> termino exp1 .)
    RES_FOR         reduce using rule 99 (exp -> termino exp1 .)
    RES_START       reduce using rule 99 (exp -> termino exp1 .)
    RES_FUNC        reduce using rule 99 (exp -> termino exp1 .)
    $end            reduce using rule 99 (exp -> termino exp1 .)
    RES_END         reduce using rule 99 (exp -> termino exp1 .)
    E_END           reduce using rule 99 (exp -> termino exp1 .)
    RES_ELSE        reduce using rule 99 (exp -> termino exp1 .)
    RES_CASE        reduce using rule 99 (exp -> termino exp1 .)


state 177

    (100) exp1 -> PLUS . exp
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    exp                            shift and go to state 212
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68

state 178

    (101) exp1 -> MINUS . exp
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    exp                            shift and go to state 213
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68

state 179

    (102) exp1 -> empty .

    MIN             reduce using rule 102 (exp1 -> empty .)
    MIN_EQ          reduce using rule 102 (exp1 -> empty .)
    MAY             reduce using rule 102 (exp1 -> empty .)
    MAY_EQ          reduce using rule 102 (exp1 -> empty .)
    DIF             reduce using rule 102 (exp1 -> empty .)
    EQ_EQ           reduce using rule 102 (exp1 -> empty .)
    RPAREN          reduce using rule 102 (exp1 -> empty .)
    RES_READ        reduce using rule 102 (exp1 -> empty .)
    RES_PRINT       reduce using rule 102 (exp1 -> empty .)
    ID              reduce using rule 102 (exp1 -> empty .)
    RES_DEF         reduce using rule 102 (exp1 -> empty .)
    RES_IF          reduce using rule 102 (exp1 -> empty .)
    RES_SWITCH      reduce using rule 102 (exp1 -> empty .)
    RES_WHILE       reduce using rule 102 (exp1 -> empty .)
    RES_FOR         reduce using rule 102 (exp1 -> empty .)
    RES_START       reduce using rule 102 (exp1 -> empty .)
    RES_FUNC        reduce using rule 102 (exp1 -> empty .)
    $end            reduce using rule 102 (exp1 -> empty .)
    RES_END         reduce using rule 102 (exp1 -> empty .)
    E_END           reduce using rule 102 (exp1 -> empty .)
    RES_ELSE        reduce using rule 102 (exp1 -> empty .)
    RES_CASE        reduce using rule 102 (exp1 -> empty .)
    COL             reduce using rule 102 (exp1 -> empty .)


state 180

    (110) factor -> MINUS cons .

    TIMES           reduce using rule 110 (factor -> MINUS cons .)
    DIVIDE          reduce using rule 110 (factor -> MINUS cons .)
    PLUS            reduce using rule 110 (factor -> MINUS cons .)
    MINUS           reduce using rule 110 (factor -> MINUS cons .)
    MIN             reduce using rule 110 (factor -> MINUS cons .)
    MIN_EQ          reduce using rule 110 (factor -> MINUS cons .)
    MAY             reduce using rule 110 (factor -> MINUS cons .)
    MAY_EQ          reduce using rule 110 (factor -> MINUS cons .)
    DIF             reduce using rule 110 (factor -> MINUS cons .)
    EQ_EQ           reduce using rule 110 (factor -> MINUS cons .)
    RPAREN          reduce using rule 110 (factor -> MINUS cons .)
    COL             reduce using rule 110 (factor -> MINUS cons .)
    RES_READ        reduce using rule 110 (factor -> MINUS cons .)
    RES_PRINT       reduce using rule 110 (factor -> MINUS cons .)
    ID              reduce using rule 110 (factor -> MINUS cons .)
    RES_DEF         reduce using rule 110 (factor -> MINUS cons .)
    RES_IF          reduce using rule 110 (factor -> MINUS cons .)
    RES_SWITCH      reduce using rule 110 (factor -> MINUS cons .)
    RES_WHILE       reduce using rule 110 (factor -> MINUS cons .)
    RES_FOR         reduce using rule 110 (factor -> MINUS cons .)
    RES_START       reduce using rule 110 (factor -> MINUS cons .)
    RES_FUNC        reduce using rule 110 (factor -> MINUS cons .)
    $end            reduce using rule 110 (factor -> MINUS cons .)
    RES_END         reduce using rule 110 (factor -> MINUS cons .)
    E_END           reduce using rule 110 (factor -> MINUS cons .)
    RES_ELSE        reduce using rule 110 (factor -> MINUS cons .)
    RES_CASE        reduce using rule 110 (factor -> MINUS cons .)


state 181

    (105) termino1 -> DIVIDE . termino
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 214
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68

state 182

    (103) termino -> factor termino1 .

    PLUS            reduce using rule 103 (termino -> factor termino1 .)
    MINUS           reduce using rule 103 (termino -> factor termino1 .)
    MIN             reduce using rule 103 (termino -> factor termino1 .)
    MIN_EQ          reduce using rule 103 (termino -> factor termino1 .)
    MAY             reduce using rule 103 (termino -> factor termino1 .)
    MAY_EQ          reduce using rule 103 (termino -> factor termino1 .)
    DIF             reduce using rule 103 (termino -> factor termino1 .)
    EQ_EQ           reduce using rule 103 (termino -> factor termino1 .)
    COL             reduce using rule 103 (termino -> factor termino1 .)
    RPAREN          reduce using rule 103 (termino -> factor termino1 .)
    RES_READ        reduce using rule 103 (termino -> factor termino1 .)
    RES_PRINT       reduce using rule 103 (termino -> factor termino1 .)
    ID              reduce using rule 103 (termino -> factor termino1 .)
    RES_DEF         reduce using rule 103 (termino -> factor termino1 .)
    RES_IF          reduce using rule 103 (termino -> factor termino1 .)
    RES_SWITCH      reduce using rule 103 (termino -> factor termino1 .)
    RES_WHILE       reduce using rule 103 (termino -> factor termino1 .)
    RES_FOR         reduce using rule 103 (termino -> factor termino1 .)
    RES_START       reduce using rule 103 (termino -> factor termino1 .)
    RES_FUNC        reduce using rule 103 (termino -> factor termino1 .)
    $end            reduce using rule 103 (termino -> factor termino1 .)
    RES_END         reduce using rule 103 (termino -> factor termino1 .)
    E_END           reduce using rule 103 (termino -> factor termino1 .)
    RES_ELSE        reduce using rule 103 (termino -> factor termino1 .)
    RES_CASE        reduce using rule 103 (termino -> factor termino1 .)


state 183

    (104) termino1 -> TIMES . termino
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 215
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68

state 184

    (106) termino1 -> empty .

    PLUS            reduce using rule 106 (termino1 -> empty .)
    MINUS           reduce using rule 106 (termino1 -> empty .)
    MIN             reduce using rule 106 (termino1 -> empty .)
    MIN_EQ          reduce using rule 106 (termino1 -> empty .)
    MAY             reduce using rule 106 (termino1 -> empty .)
    MAY_EQ          reduce using rule 106 (termino1 -> empty .)
    DIF             reduce using rule 106 (termino1 -> empty .)
    EQ_EQ           reduce using rule 106 (termino1 -> empty .)
    RPAREN          reduce using rule 106 (termino1 -> empty .)
    RES_READ        reduce using rule 106 (termino1 -> empty .)
    RES_PRINT       reduce using rule 106 (termino1 -> empty .)
    ID              reduce using rule 106 (termino1 -> empty .)
    RES_DEF         reduce using rule 106 (termino1 -> empty .)
    RES_IF          reduce using rule 106 (termino1 -> empty .)
    RES_SWITCH      reduce using rule 106 (termino1 -> empty .)
    RES_WHILE       reduce using rule 106 (termino1 -> empty .)
    RES_FOR         reduce using rule 106 (termino1 -> empty .)
    RES_START       reduce using rule 106 (termino1 -> empty .)
    RES_FUNC        reduce using rule 106 (termino1 -> empty .)
    $end            reduce using rule 106 (termino1 -> empty .)
    RES_END         reduce using rule 106 (termino1 -> empty .)
    E_END           reduce using rule 106 (termino1 -> empty .)
    RES_ELSE        reduce using rule 106 (termino1 -> empty .)
    RES_CASE        reduce using rule 106 (termino1 -> empty .)
    COL             reduce using rule 106 (termino1 -> empty .)


state 185

    (109) factor -> PLUS cons .

    TIMES           reduce using rule 109 (factor -> PLUS cons .)
    DIVIDE          reduce using rule 109 (factor -> PLUS cons .)
    PLUS            reduce using rule 109 (factor -> PLUS cons .)
    MINUS           reduce using rule 109 (factor -> PLUS cons .)
    MIN             reduce using rule 109 (factor -> PLUS cons .)
    MIN_EQ          reduce using rule 109 (factor -> PLUS cons .)
    MAY             reduce using rule 109 (factor -> PLUS cons .)
    MAY_EQ          reduce using rule 109 (factor -> PLUS cons .)
    DIF             reduce using rule 109 (factor -> PLUS cons .)
    EQ_EQ           reduce using rule 109 (factor -> PLUS cons .)
    RPAREN          reduce using rule 109 (factor -> PLUS cons .)
    COL             reduce using rule 109 (factor -> PLUS cons .)
    RES_READ        reduce using rule 109 (factor -> PLUS cons .)
    RES_PRINT       reduce using rule 109 (factor -> PLUS cons .)
    ID              reduce using rule 109 (factor -> PLUS cons .)
    RES_DEF         reduce using rule 109 (factor -> PLUS cons .)
    RES_IF          reduce using rule 109 (factor -> PLUS cons .)
    RES_SWITCH      reduce using rule 109 (factor -> PLUS cons .)
    RES_WHILE       reduce using rule 109 (factor -> PLUS cons .)
    RES_FOR         reduce using rule 109 (factor -> PLUS cons .)
    RES_START       reduce using rule 109 (factor -> PLUS cons .)
    RES_FUNC        reduce using rule 109 (factor -> PLUS cons .)
    $end            reduce using rule 109 (factor -> PLUS cons .)
    RES_END         reduce using rule 109 (factor -> PLUS cons .)
    E_END           reduce using rule 109 (factor -> PLUS cons .)
    RES_ELSE        reduce using rule 109 (factor -> PLUS cons .)
    RES_CASE        reduce using rule 109 (factor -> PLUS cons .)


state 186

    (85) if -> RES_IF LPAREN expresion RPAREN . COL bloque ifelse

    COL             shift and go to state 216


state 187

    (93) expresion_1 -> MIN_EQ . exp
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    exp                            shift and go to state 217
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68

state 188

    (92) expresion_1 -> MIN . exp
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    exp                            shift and go to state 218
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68

state 189

    (94) expresion_1 -> MAY . exp
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    exp                            shift and go to state 219
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68

state 190

    (95) expresion_1 -> MAY_EQ . exp
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    exp                            shift and go to state 220
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68

state 191

    (97) expresion_1 -> EQ_EQ . exp
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    exp                            shift and go to state 221
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68

state 192

    (91) expresion -> exp expresion_1 .

    RPAREN          reduce using rule 91 (expresion -> exp expresion_1 .)
    COL             reduce using rule 91 (expresion -> exp expresion_1 .)


state 193

    (96) expresion_1 -> DIF . exp
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    exp                            shift and go to state 222
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68

state 194

    (98) expresion_1 -> empty .

    RPAREN          reduce using rule 98 (expresion_1 -> empty .)
    COL             reduce using rule 98 (expresion_1 -> empty .)


state 195

    (80) asignarray1 -> cons .
    (81) asignarray1 -> cons . COMMA asignarray1

    RBRACKET        reduce using rule 80 (asignarray1 -> cons .)
    COMMA           shift and go to state 223


state 196

    (79) asignarray -> LBRACKET asignarray1 . RBRACKET

    RBRACKET        shift and go to state 224


state 197

    (76) asignlist -> LCURLY asignlist1 . RCURLY

    RCURLY          shift and go to state 225


state 198

    (77) asignlist1 -> cons .
    (78) asignlist1 -> cons . COMMA asignlist1

    RCURLY          reduce using rule 77 (asignlist1 -> cons .)
    COMMA           shift and go to state 226


state 199

    (70) asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .

    RES_READ        reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .)
    RES_PRINT       reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .)
    ID              reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .)
    RES_DEF         reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .)
    RES_IF          reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .)
    RES_SWITCH      reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .)
    RES_WHILE       reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .)
    RES_FOR         reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .)
    E_END           reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .)
    RES_START       reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .)
    RES_FUNC        reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .)
    $end            reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .)
    RES_END         reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .)
    RES_ELSE        reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .)
    RES_CASE        reduce using rule 70 (asignacion -> seen_id_asignacion EQUALS asignacion1 insert_asignacion .)


state 200

    (67) escritura -> RES_PRINT LPAREN escritura1 RPAREN .

    RES_READ        reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_PRINT       reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    ID              reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_DEF         reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_IF          reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_SWITCH      reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_WHILE       reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_FOR         reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    E_END           reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_CASE        reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_START       reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_FUNC        reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    $end            reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_ELSE        reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)
    RES_END         reduce using rule 67 (escritura -> RES_PRINT LPAREN escritura1 RPAREN .)


state 201

    (82) while -> RES_WHILE LPAREN expresion RPAREN . COL bloque

    COL             shift and go to state 227


state 202

    (63) llamada -> ID LPAREN llamada1 RPAREN .

    RES_READ        reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_PRINT       reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    ID              reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_DEF         reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_IF          reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_SWITCH      reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_WHILE       reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_FOR         reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_END         reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_START       reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_FUNC        reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    $end            reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    E_END           reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_CASE        reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)
    RES_ELSE        reduce using rule 63 (llamada -> ID LPAREN llamada1 RPAREN .)


state 203

    (66) lectura -> RES_READ LPAREN tipo RPAREN .

    RES_READ        reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_PRINT       reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    ID              reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_DEF         reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_IF          reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_SWITCH      reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_WHILE       reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_FOR         reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    E_END           reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_END         reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_CASE        reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_START       reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_FUNC        reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    $end            reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)
    RES_ELSE        reduce using rule 66 (lectura -> RES_READ LPAREN tipo RPAREN .)


state 204

    (89) switch2 -> RES_CASE expresion . COL bloque switch2

    COL             shift and go to state 228


state 205

    (131) conslist1 -> cons COMMA . conslist1
    (130) conslist1 -> . cons
    (131) conslist1 -> . cons COMMA conslist1
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 167
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    conslist1                      shift and go to state 229
    seen_id_cons                   shift and go to state 68

state 206

    (129) conslist -> ID EQUALS LCURLY conslist1 RCURLY .

    TIMES           reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    DIVIDE          reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    PLUS            reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MINUS           reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_READ        reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_PRINT       reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    ID              reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_DEF         reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_IF          reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_SWITCH      reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_WHILE       reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FOR         reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_START       reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FUNC        reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    $end            reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_END         reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    E_END           reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_ELSE        reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_CASE        reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    COMMA           reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RBRACKET        reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RCURLY          reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RPAREN          reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    COL             reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MIN             reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MIN_EQ          reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MAY             reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    MAY_EQ          reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    DIF             reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    EQ_EQ           reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_INT         reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_FLOAT       reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_DOUBLE      reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_BOOLEAN     reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_STRING      reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_LIST        reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)
    RES_ARRAY       reduce using rule 129 (conslist -> ID EQUALS LCURLY conslist1 RCURLY .)


state 207

    (128) consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS . cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 230
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_id_cons                   shift and go to state 68

state 208

    (44) array1 -> COL LBRACKET . array2 RBRACKET
    (46) array2 -> . cons
    (47) array2 -> . cons COMMA array2
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 231
    array2                         shift and go to state 232
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_float_cons                shift and go to state 67
    seen_id_cons                   shift and go to state 68

state 209

    (84) forexp -> ID EQUALS cons . COL expresion COL ID EQUALS expresion

    COL             shift and go to state 233


state 210

    (83) for -> RES_FOR LPAREN forexp RPAREN COL . bloque
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (132) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS asignacion1 insert_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (85) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (88) switch -> . RES_SWITCH COL switch2
    (82) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (83) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (71) seen_id_asignacion -> . ID

    E_END           reduce using rule 132 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 234
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 211

    (107) factor -> LPAREN exp RPAREN .

    TIMES           reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    MIN             reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    MIN_EQ          reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    MAY             reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    MAY_EQ          reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    DIF             reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    EQ_EQ           reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    COL             reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    RES_READ        reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    RES_PRINT       reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    ID              reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    RES_DEF         reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    RES_IF          reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    RES_SWITCH      reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    RES_WHILE       reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    RES_FOR         reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    RES_START       reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    RES_FUNC        reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    $end            reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    RES_END         reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    E_END           reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    RES_ELSE        reduce using rule 107 (factor -> LPAREN exp RPAREN .)
    RES_CASE        reduce using rule 107 (factor -> LPAREN exp RPAREN .)


state 212

    (100) exp1 -> PLUS exp .

    MIN             reduce using rule 100 (exp1 -> PLUS exp .)
    MIN_EQ          reduce using rule 100 (exp1 -> PLUS exp .)
    MAY             reduce using rule 100 (exp1 -> PLUS exp .)
    MAY_EQ          reduce using rule 100 (exp1 -> PLUS exp .)
    DIF             reduce using rule 100 (exp1 -> PLUS exp .)
    EQ_EQ           reduce using rule 100 (exp1 -> PLUS exp .)
    RPAREN          reduce using rule 100 (exp1 -> PLUS exp .)
    RES_READ        reduce using rule 100 (exp1 -> PLUS exp .)
    RES_PRINT       reduce using rule 100 (exp1 -> PLUS exp .)
    ID              reduce using rule 100 (exp1 -> PLUS exp .)
    RES_DEF         reduce using rule 100 (exp1 -> PLUS exp .)
    RES_IF          reduce using rule 100 (exp1 -> PLUS exp .)
    RES_SWITCH      reduce using rule 100 (exp1 -> PLUS exp .)
    RES_WHILE       reduce using rule 100 (exp1 -> PLUS exp .)
    RES_FOR         reduce using rule 100 (exp1 -> PLUS exp .)
    RES_START       reduce using rule 100 (exp1 -> PLUS exp .)
    RES_FUNC        reduce using rule 100 (exp1 -> PLUS exp .)
    $end            reduce using rule 100 (exp1 -> PLUS exp .)
    RES_END         reduce using rule 100 (exp1 -> PLUS exp .)
    E_END           reduce using rule 100 (exp1 -> PLUS exp .)
    RES_ELSE        reduce using rule 100 (exp1 -> PLUS exp .)
    RES_CASE        reduce using rule 100 (exp1 -> PLUS exp .)
    COL             reduce using rule 100 (exp1 -> PLUS exp .)


state 213

    (101) exp1 -> MINUS exp .

    MIN             reduce using rule 101 (exp1 -> MINUS exp .)
    MIN_EQ          reduce using rule 101 (exp1 -> MINUS exp .)
    MAY             reduce using rule 101 (exp1 -> MINUS exp .)
    MAY_EQ          reduce using rule 101 (exp1 -> MINUS exp .)
    DIF             reduce using rule 101 (exp1 -> MINUS exp .)
    EQ_EQ           reduce using rule 101 (exp1 -> MINUS exp .)
    RPAREN          reduce using rule 101 (exp1 -> MINUS exp .)
    RES_READ        reduce using rule 101 (exp1 -> MINUS exp .)
    RES_PRINT       reduce using rule 101 (exp1 -> MINUS exp .)
    ID              reduce using rule 101 (exp1 -> MINUS exp .)
    RES_DEF         reduce using rule 101 (exp1 -> MINUS exp .)
    RES_IF          reduce using rule 101 (exp1 -> MINUS exp .)
    RES_SWITCH      reduce using rule 101 (exp1 -> MINUS exp .)
    RES_WHILE       reduce using rule 101 (exp1 -> MINUS exp .)
    RES_FOR         reduce using rule 101 (exp1 -> MINUS exp .)
    RES_START       reduce using rule 101 (exp1 -> MINUS exp .)
    RES_FUNC        reduce using rule 101 (exp1 -> MINUS exp .)
    $end            reduce using rule 101 (exp1 -> MINUS exp .)
    RES_END         reduce using rule 101 (exp1 -> MINUS exp .)
    E_END           reduce using rule 101 (exp1 -> MINUS exp .)
    RES_ELSE        reduce using rule 101 (exp1 -> MINUS exp .)
    RES_CASE        reduce using rule 101 (exp1 -> MINUS exp .)
    COL             reduce using rule 101 (exp1 -> MINUS exp .)


state 214

    (105) termino1 -> DIVIDE termino .

    PLUS            reduce using rule 105 (termino1 -> DIVIDE termino .)
    MINUS           reduce using rule 105 (termino1 -> DIVIDE termino .)
    MIN             reduce using rule 105 (termino1 -> DIVIDE termino .)
    MIN_EQ          reduce using rule 105 (termino1 -> DIVIDE termino .)
    MAY             reduce using rule 105 (termino1 -> DIVIDE termino .)
    MAY_EQ          reduce using rule 105 (termino1 -> DIVIDE termino .)
    DIF             reduce using rule 105 (termino1 -> DIVIDE termino .)
    EQ_EQ           reduce using rule 105 (termino1 -> DIVIDE termino .)
    RPAREN          reduce using rule 105 (termino1 -> DIVIDE termino .)
    RES_READ        reduce using rule 105 (termino1 -> DIVIDE termino .)
    RES_PRINT       reduce using rule 105 (termino1 -> DIVIDE termino .)
    ID              reduce using rule 105 (termino1 -> DIVIDE termino .)
    RES_DEF         reduce using rule 105 (termino1 -> DIVIDE termino .)
    RES_IF          reduce using rule 105 (termino1 -> DIVIDE termino .)
    RES_SWITCH      reduce using rule 105 (termino1 -> DIVIDE termino .)
    RES_WHILE       reduce using rule 105 (termino1 -> DIVIDE termino .)
    RES_FOR         reduce using rule 105 (termino1 -> DIVIDE termino .)
    RES_START       reduce using rule 105 (termino1 -> DIVIDE termino .)
    RES_FUNC        reduce using rule 105 (termino1 -> DIVIDE termino .)
    $end            reduce using rule 105 (termino1 -> DIVIDE termino .)
    RES_END         reduce using rule 105 (termino1 -> DIVIDE termino .)
    E_END           reduce using rule 105 (termino1 -> DIVIDE termino .)
    RES_ELSE        reduce using rule 105 (termino1 -> DIVIDE termino .)
    RES_CASE        reduce using rule 105 (termino1 -> DIVIDE termino .)
    COL             reduce using rule 105 (termino1 -> DIVIDE termino .)


state 215

    (104) termino1 -> TIMES termino .

    PLUS            reduce using rule 104 (termino1 -> TIMES termino .)
    MINUS           reduce using rule 104 (termino1 -> TIMES termino .)
    MIN             reduce using rule 104 (termino1 -> TIMES termino .)
    MIN_EQ          reduce using rule 104 (termino1 -> TIMES termino .)
    MAY             reduce using rule 104 (termino1 -> TIMES termino .)
    MAY_EQ          reduce using rule 104 (termino1 -> TIMES termino .)
    DIF             reduce using rule 104 (termino1 -> TIMES termino .)
    EQ_EQ           reduce using rule 104 (termino1 -> TIMES termino .)
    RPAREN          reduce using rule 104 (termino1 -> TIMES termino .)
    RES_READ        reduce using rule 104 (termino1 -> TIMES termino .)
    RES_PRINT       reduce using rule 104 (termino1 -> TIMES termino .)
    ID              reduce using rule 104 (termino1 -> TIMES termino .)
    RES_DEF         reduce using rule 104 (termino1 -> TIMES termino .)
    RES_IF          reduce using rule 104 (termino1 -> TIMES termino .)
    RES_SWITCH      reduce using rule 104 (termino1 -> TIMES termino .)
    RES_WHILE       reduce using rule 104 (termino1 -> TIMES termino .)
    RES_FOR         reduce using rule 104 (termino1 -> TIMES termino .)
    RES_START       reduce using rule 104 (termino1 -> TIMES termino .)
    RES_FUNC        reduce using rule 104 (termino1 -> TIMES termino .)
    $end            reduce using rule 104 (termino1 -> TIMES termino .)
    RES_END         reduce using rule 104 (termino1 -> TIMES termino .)
    E_END           reduce using rule 104 (termino1 -> TIMES termino .)
    RES_ELSE        reduce using rule 104 (termino1 -> TIMES termino .)
    RES_CASE        reduce using rule 104 (termino1 -> TIMES termino .)
    COL             reduce using rule 104 (termino1 -> TIMES termino .)


state 216

    (85) if -> RES_IF LPAREN expresion RPAREN COL . bloque ifelse
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (132) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS asignacion1 insert_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (85) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (88) switch -> . RES_SWITCH COL switch2
    (82) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (83) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (71) seen_id_asignacion -> . ID

    RES_ELSE        reduce using rule 132 (empty -> .)
    E_END           reduce using rule 132 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 235
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 217

    (93) expresion_1 -> MIN_EQ exp .

    RPAREN          reduce using rule 93 (expresion_1 -> MIN_EQ exp .)
    COL             reduce using rule 93 (expresion_1 -> MIN_EQ exp .)


state 218

    (92) expresion_1 -> MIN exp .

    RPAREN          reduce using rule 92 (expresion_1 -> MIN exp .)
    COL             reduce using rule 92 (expresion_1 -> MIN exp .)


state 219

    (94) expresion_1 -> MAY exp .

    RPAREN          reduce using rule 94 (expresion_1 -> MAY exp .)
    COL             reduce using rule 94 (expresion_1 -> MAY exp .)


state 220

    (95) expresion_1 -> MAY_EQ exp .

    RPAREN          reduce using rule 95 (expresion_1 -> MAY_EQ exp .)
    COL             reduce using rule 95 (expresion_1 -> MAY_EQ exp .)


state 221

    (97) expresion_1 -> EQ_EQ exp .

    RPAREN          reduce using rule 97 (expresion_1 -> EQ_EQ exp .)
    COL             reduce using rule 97 (expresion_1 -> EQ_EQ exp .)


state 222

    (96) expresion_1 -> DIF exp .

    RPAREN          reduce using rule 96 (expresion_1 -> DIF exp .)
    COL             reduce using rule 96 (expresion_1 -> DIF exp .)


state 223

    (81) asignarray1 -> cons COMMA . asignarray1
    (80) asignarray1 -> . cons
    (81) asignarray1 -> . cons COMMA asignarray1
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 195
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    seen_id_cons                   shift and go to state 68
    conslist                       shift and go to state 75
    asignarray1                    shift and go to state 236

state 224

    (79) asignarray -> LBRACKET asignarray1 RBRACKET .

    RES_READ        reduce using rule 79 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_PRINT       reduce using rule 79 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    ID              reduce using rule 79 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_DEF         reduce using rule 79 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_IF          reduce using rule 79 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_SWITCH      reduce using rule 79 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_WHILE       reduce using rule 79 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_FOR         reduce using rule 79 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_START       reduce using rule 79 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_FUNC        reduce using rule 79 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    $end            reduce using rule 79 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_END         reduce using rule 79 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    E_END           reduce using rule 79 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_ELSE        reduce using rule 79 (asignarray -> LBRACKET asignarray1 RBRACKET .)
    RES_CASE        reduce using rule 79 (asignarray -> LBRACKET asignarray1 RBRACKET .)


state 225

    (76) asignlist -> LCURLY asignlist1 RCURLY .

    RES_READ        reduce using rule 76 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_PRINT       reduce using rule 76 (asignlist -> LCURLY asignlist1 RCURLY .)
    ID              reduce using rule 76 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_DEF         reduce using rule 76 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_IF          reduce using rule 76 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_SWITCH      reduce using rule 76 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_WHILE       reduce using rule 76 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_FOR         reduce using rule 76 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_START       reduce using rule 76 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_FUNC        reduce using rule 76 (asignlist -> LCURLY asignlist1 RCURLY .)
    $end            reduce using rule 76 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_END         reduce using rule 76 (asignlist -> LCURLY asignlist1 RCURLY .)
    E_END           reduce using rule 76 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_ELSE        reduce using rule 76 (asignlist -> LCURLY asignlist1 RCURLY .)
    RES_CASE        reduce using rule 76 (asignlist -> LCURLY asignlist1 RCURLY .)


state 226

    (78) asignlist1 -> cons COMMA . asignlist1
    (77) asignlist1 -> . cons
    (78) asignlist1 -> . cons COMMA asignlist1
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    asignlist1                     shift and go to state 237
    cons                           shift and go to state 198
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_id_cons                   shift and go to state 68

state 227

    (82) while -> RES_WHILE LPAREN expresion RPAREN COL . bloque
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (132) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS asignacion1 insert_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (85) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (88) switch -> . RES_SWITCH COL switch2
    (82) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (83) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (71) seen_id_asignacion -> . ID

    E_END           reduce using rule 132 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 238
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 228

    (89) switch2 -> RES_CASE expresion COL . bloque switch2
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (132) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS asignacion1 insert_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (85) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (88) switch -> . RES_SWITCH COL switch2
    (82) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (83) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (71) seen_id_asignacion -> . ID

    RES_CASE        reduce using rule 132 (empty -> .)
    E_END           reduce using rule 132 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 239
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 229

    (131) conslist1 -> cons COMMA conslist1 .

    RCURLY          reduce using rule 131 (conslist1 -> cons COMMA conslist1 .)


state 230

    (128) consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .

    TIMES           reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    DIVIDE          reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    PLUS            reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MINUS           reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RPAREN          reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    COL             reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MIN             reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MIN_EQ          reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MAY             reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    MAY_EQ          reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    DIF             reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    EQ_EQ           reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_READ        reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_PRINT       reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    ID              reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_DEF         reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_IF          reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_SWITCH      reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_WHILE       reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_FOR         reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_START       reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_FUNC        reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    $end            reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_END         reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    E_END           reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_ELSE        reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_CASE        reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    COMMA           reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RBRACKET        reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RCURLY          reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_INT         reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_FLOAT       reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_DOUBLE      reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_BOOLEAN     reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_STRING      reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_LIST        reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)
    RES_ARRAY       reduce using rule 128 (consarray -> ID LBRACKET CTE_INT RBRACKET EQUALS cons .)


state 231

    (46) array2 -> cons .
    (47) array2 -> cons . COMMA array2

    RBRACKET        reduce using rule 46 (array2 -> cons .)
    COMMA           shift and go to state 240


state 232

    (44) array1 -> COL LBRACKET array2 . RBRACKET

    RBRACKET        shift and go to state 241


state 233

    (84) forexp -> ID EQUALS cons COL . expresion COL ID EQUALS expresion
    (91) expresion -> . exp expresion_1
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    expresion                      shift and go to state 242
    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    exp                            shift and go to state 148
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68

state 234

    (83) for -> RES_FOR LPAREN forexp RPAREN COL bloque .

    E_END           reduce using rule 83 (for -> RES_FOR LPAREN forexp RPAREN COL bloque .)


state 235

    (85) if -> RES_IF LPAREN expresion RPAREN COL bloque . ifelse
    (86) ifelse -> . RES_ELSE COL bloque
    (87) ifelse -> . empty
    (132) empty -> .

    RES_ELSE        shift and go to state 243
    E_END           reduce using rule 132 (empty -> .)

    ifelse                         shift and go to state 244
    empty                          shift and go to state 245

state 236

    (81) asignarray1 -> cons COMMA asignarray1 .

    RBRACKET        reduce using rule 81 (asignarray1 -> cons COMMA asignarray1 .)


state 237

    (78) asignlist1 -> cons COMMA asignlist1 .

    RCURLY          reduce using rule 78 (asignlist1 -> cons COMMA asignlist1 .)


state 238

    (82) while -> RES_WHILE LPAREN expresion RPAREN COL bloque .

    E_END           reduce using rule 82 (while -> RES_WHILE LPAREN expresion RPAREN COL bloque .)


state 239

    (89) switch2 -> RES_CASE expresion COL bloque . switch2
    (89) switch2 -> . RES_CASE expresion COL bloque switch2
    (90) switch2 -> . empty
    (132) empty -> .

    RES_CASE        shift and go to state 164
    E_END           reduce using rule 132 (empty -> .)

    switch2                        shift and go to state 246
    empty                          shift and go to state 165

state 240

    (47) array2 -> cons COMMA . array2
    (46) array2 -> . cons
    (47) array2 -> . cons COMMA array2
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 231
    array2                         shift and go to state 247
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    seen_float_cons                shift and go to state 67
    seen_id_cons                   shift and go to state 68

state 241

    (44) array1 -> COL LBRACKET array2 RBRACKET .

    RES_INT         reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_FLOAT       reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_DOUBLE      reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_BOOLEAN     reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_STRING      reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_LIST        reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RES_ARRAY       reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    ID              reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)
    RPAREN          reduce using rule 44 (array1 -> COL LBRACKET array2 RBRACKET .)


state 242

    (84) forexp -> ID EQUALS cons COL expresion . COL ID EQUALS expresion

    COL             shift and go to state 248


state 243

    (86) ifelse -> RES_ELSE . COL bloque

    COL             shift and go to state 249


state 244

    (85) if -> RES_IF LPAREN expresion RPAREN COL bloque ifelse .

    E_END           reduce using rule 85 (if -> RES_IF LPAREN expresion RPAREN COL bloque ifelse .)


state 245

    (87) ifelse -> empty .

    E_END           reduce using rule 87 (ifelse -> empty .)


state 246

    (89) switch2 -> RES_CASE expresion COL bloque switch2 .

    E_END           reduce using rule 89 (switch2 -> RES_CASE expresion COL bloque switch2 .)


state 247

    (47) array2 -> cons COMMA array2 .

    RBRACKET        reduce using rule 47 (array2 -> cons COMMA array2 .)


state 248

    (84) forexp -> ID EQUALS cons COL expresion COL . ID EQUALS expresion

    ID              shift and go to state 250


state 249

    (86) ifelse -> RES_ELSE COL . bloque
    (50) bloque -> . estatutos bloque
    (51) bloque -> . empty
    (52) estatutos -> . condicion E_END
    (53) estatutos -> . ciclo E_END
    (54) estatutos -> . lectura
    (55) estatutos -> . escritura
    (56) estatutos -> . asignacion
    (57) estatutos -> . llamada
    (58) estatutos -> . vars
    (132) empty -> .
    (61) condicion -> . if
    (62) condicion -> . switch
    (59) ciclo -> . while
    (60) ciclo -> . for
    (66) lectura -> . RES_READ LPAREN tipo RPAREN
    (67) escritura -> . RES_PRINT LPAREN escritura1 RPAREN
    (70) asignacion -> . seen_id_asignacion EQUALS asignacion1 insert_asignacion
    (63) llamada -> . ID LPAREN llamada1 RPAREN
    (28) vars -> . RES_DEF COL vars1
    (85) if -> . RES_IF LPAREN expresion RPAREN COL bloque ifelse
    (88) switch -> . RES_SWITCH COL switch2
    (82) while -> . RES_WHILE LPAREN expresion RPAREN COL bloque
    (83) for -> . RES_FOR LPAREN forexp RPAREN COL bloque
    (71) seen_id_asignacion -> . ID

    E_END           reduce using rule 132 (empty -> .)
    RES_READ        shift and go to state 104
    RES_PRINT       shift and go to state 98
    ID              shift and go to state 103
    RES_DEF         shift and go to state 18
    RES_IF          shift and go to state 90
    RES_SWITCH      shift and go to state 106
    RES_WHILE       shift and go to state 102
    RES_FOR         shift and go to state 88

    vars                           shift and go to state 87
    bloque                         shift and go to state 251
    if                             shift and go to state 91
    ciclo                          shift and go to state 92
    seen_id_asignacion             shift and go to state 93
    switch                         shift and go to state 94
    llamada                        shift and go to state 96
    condicion                      shift and go to state 97
    lectura                        shift and go to state 99
    empty                          shift and go to state 100
    estatutos                      shift and go to state 101
    for                            shift and go to state 95
    asignacion                     shift and go to state 105
    while                          shift and go to state 107
    escritura                      shift and go to state 108

state 250

    (84) forexp -> ID EQUALS cons COL expresion COL ID . EQUALS expresion

    EQUALS          shift and go to state 252


state 251

    (86) ifelse -> RES_ELSE COL bloque .

    E_END           reduce using rule 86 (ifelse -> RES_ELSE COL bloque .)


state 252

    (84) forexp -> ID EQUALS cons COL expresion COL ID EQUALS . expresion
    (91) expresion -> . exp expresion_1
    (99) exp -> . termino exp1
    (103) termino -> . factor termino1
    (107) factor -> . LPAREN exp RPAREN
    (108) factor -> . cons
    (109) factor -> . PLUS cons
    (110) factor -> . MINUS cons
    (111) cons -> . seen_id_cons exp_1
    (112) cons -> . seen_int_cons exp_cons_int
    (113) cons -> . seen_float_cons exp_cons_float
    (114) cons -> . CTE_DOUBLE
    (115) cons -> . CTE_STRING
    (116) cons -> . RES_TRUE
    (117) cons -> . RES_FALSE
    (118) cons -> . consarray
    (119) cons -> . conslist
    (120) seen_id_cons -> . ID
    (122) seen_int_cons -> . CTE_INT
    (121) seen_float_cons -> . CTE_FLOAT
    (128) consarray -> . ID LBRACKET CTE_INT RBRACKET EQUALS cons
    (129) conslist -> . ID EQUALS LCURLY conslist1 RCURLY

    LPAREN          shift and go to state 142
    PLUS            shift and go to state 146
    MINUS           shift and go to state 144
    CTE_DOUBLE      shift and go to state 71
    CTE_STRING      shift and go to state 70
    RES_TRUE        shift and go to state 69
    RES_FALSE       shift and go to state 78
    ID              shift and go to state 73
    CTE_INT         shift and go to state 72
    CTE_FLOAT       shift and go to state 77

    expresion                      shift and go to state 253
    seen_int_cons                  shift and go to state 74
    cons                           shift and go to state 141
    exp                            shift and go to state 148
    seen_float_cons                shift and go to state 67
    consarray                      shift and go to state 76
    conslist                       shift and go to state 75
    termino                        shift and go to state 143
    factor                         shift and go to state 145
    seen_id_cons                   shift and go to state 68

state 253

    (84) forexp -> ID EQUALS cons COL expresion COL ID EQUALS expresion .

    RPAREN          reduce using rule 84 (forexp -> ID EQUALS cons COL expresion COL ID EQUALS expresion .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 155 resolved using rule (escritura1 -> CTE_STRING)
WARNING: rejected rule (cons -> CTE_STRING) in state 155
