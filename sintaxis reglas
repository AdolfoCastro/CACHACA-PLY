programa ::= ins_gt_main programa1 valida_entra_global generaglo programa2 valida_salir_gobal programa3 dir_gt_main main programa3
	            | empty
ins_gt_main ::= 
dir_gt_main ::= 
generaglo ::= 
programa1 ::= RES_PROTO prototipos seen_prototipo programa1
				 | empty
seen_prototipo ::= 
programa2 ::= vars programa2 
				 | empty
				 
valida_entra_global ::= 
valida_salir_gobal ::= 
programa3 ::= programa3 modulos
				 | empty
				 
prototipos ::= RES_FUNC dato seen_dato seen_nom_func  LPAREN prototipos_1 RPAREN
seen_nom_func ::= ID 
seen_dato ::=
 prototipos_1 ::= tipo seen_id_proto prototipos_2
					| empty
					
seen_id_proto ::= ID
prototipos_2  ::= COMMA prototipos_1
					 | empty
					 
dato ::= RES_INT
			| RES_FLOAT
			| RES_DOUBLE
			| RES_BOOLEAN
			| RES_STRING 
			
tipo ::= dato
			| estructura
			
estructura ::= list
				  | array
				  
vars ::= RES_DEF COL vars1
vars_1 ::= dato ID vars2 vars1_1 
vars1 ::= estructura empty
			| vars_1
			
 vars1_1 ::= vars1
				| empty
				
vars2 ::= EQUALS cons
			| vars3
			
vars3 ::= COMMA ID vars3
			| empty
			
list ::= RES_LIST dato ID list1 
list1 ::= LCURLY cons_loop RCURLY
			 | empty
 
cons_loop ::= cons cons_loop_1
				 
cons_loop_1 ::= COMMA cons_loop
				   | empty
array ::= RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 
genera_ms ::= 
crea_arr ::= ID 
dim ::= dim_cte dim_struct dim2
dim_cte ::= CTE_INT

	
dim_struct ::= 
dim2 ::= COMMA dim
			| empty
			
array1 ::= COL LBRACKET array2 RBRACKET array1
				| empty 
				
array2 ::= cons array3
array3 ::= COMMA array2
				| empty
				
modulos ::= prototipos se_uso COL bloque cuad_def_proc_4 
cuad_def_proc_4 ::= 
se_uso ::= 
array ::= RES_ARRAY dato crea_arr LBRACKET dim RBRACKET genera_ms array1 
genera_ms ::= 
crea_arr ::= ID 
dim ::= dim_cte dim_struct dim2
dim_cte ::= CTE_INT

	
dim_struct ::= 
dim2 ::= COMMA dim
			| empty
			
array1 ::= COL LBRACKET array2 RBRACKET array1
				| empty 
				
array2 ::= cons array3
	pass
array3 ::= COMMA array2
				| empty
				
modulos ::= prototipos se_uso COL bloque cuad_def_proc_4 
cuad_def_proc_4 ::= 
se_uso ::= 
bloque ::= estatutos bloque 
			  | return bloque
			  | empty
			  
return ::= RES_RETURN exp
estatutos ::= condicion E_END
				 | ciclo E_END
				 | lectura 
				 | escritura 
				 | asignacion 
				 | llamada 
				 | vars
				 
ciclo ::= while
			 | for
			 
condicion ::= if
				 | switch
				 
llamada ::= seen_id_call LPAREN call_proc_2 llamada1 RPAREN call_proc_4 
call_proc_4 ::= 
seen_id_call ::= ID
call_proc_2 ::= 
llamada1 ::= exp call_proc_3 param
				| empty
				
call_proc_3 ::= 
param ::= COMMA exp call_proc_3 param
			| empty
lectura ::= RES_READ LPAREN tipo RPAREN 
escritura ::= RES_PRINT LPAREN cons RPAREN cuadruplo_est_prnt
cuadruplo_est_prnt ::= 
asignacion ::= seen_id_asignacion consarray EQUALS cuadruplo_exp_8_asignacion asignacion1 insert_asignacion cuadruplo_exp_9_asignacion
	
cuadruplo_exp_8_asignacion ::= 
cuadruplo_exp_9_asignacion ::= 
seen_id_asignacion ::= ID 
insert_asignacion ::= 
asignacion1 ::= exp
				   | asignlist
				   | asignarray
				   | see_llamada
				   | convert
				   
convert ::= TOSTR LPAREN exp RPAREN
			   | TOINT LPAREN exp RPAREN
			   
 see_llamada ::= llamada
asignlist ::= LCURLY asignlist1 RCURLY
asignlist1 ::= cons
				  | cons COMMA asignlist1
				  
asignarray ::= LBRACKET asignarray1 RBRACKET
asignarray1 ::= cons
				| cons COMMA asignarray1
				
while ::= RES_WHILE cuadruplo_est_while_1 LPAREN expresion RPAREN cuadruplo_est_while_2 COL  bloque cuadruplo_est_while_3
	
cuadruplo_est_while_1 ::= 
cuadruplo_est_while_2 ::= 
cuadruplo_est_while_3 ::= 
for ::= RES_FOR LPAREN forexp RPAREN sale_update COL bloque cuadruplo_est_for_3 
sale_update ::= 
forexp ::= asignacion cuadruplo_est_for_1 COL expresion cuadruplo_est_for_2 COL entra_update asignacion
			   
entra_update ::= 
cuadruplo_est_for_1 ::= 
cuadruplo_est_for_2 ::= 
cuadruplo_est_for_3 ::= 
if ::= RES_IF LPAREN expresion RPAREN cuadruplo_est_if_1 COL  bloque ifelse
		  
cuadruplo_est_if_1 ::= 
 ifelse ::= cuadruplo_est_if_else_2 RES_ELSE COL  bloque cuadruplo_est_if_else_3
			   | empty cuadruplo_est_if_2
			   
cuadruplo_est_if_2 ::= 
cuadruplo_est_if_else_2 ::= 
cuadruplo_est_if_else_3 ::= 
switch ::= RES_SWITCH LPAREN seen_exp_switch RPAREN COL  switch2
seen_exp_switch ::= exp
switch2 ::= RES_CASE seen_exp_case COL seen_case_3  bloque  seen_case_4 switch2 
			   | empty
			   
seen_case_3 ::= 
seen_case_4 ::= 
seen_exp_case ::= exp 
expresion ::= exp expresion_1 cuadruplo_exp_9
				  
expresion_1 ::= see_rel cuadruplo_exp_8 exp
				   | empty
				   
see_rel ::= MIN
				| MIN_EQ
				| MAY
				| MAY_EQ
				| DIF
				| EQ_EQ
				
cuadruplo_exp_8 ::= 
cuadruplo_exp_9 ::= 
exp ::= termino cuadruplo_exp_4 exp1
		   
exp1 ::= see_operador_e cuadruplos_exp_2 exp
			| empty
			
see_operador_e ::= PLUS
					  | MINUS
				
cuadruplos_exp_2 ::= 
termino ::= factor cuadruplo_exp_5 termino1
			   
termino1 ::= see_operador_f cuadruplos_exp_3 termino
				| empty
				
see_operador_f ::= TIMES
					| DIVIDE
				
cuadruplos_exp_3 ::= 
cuadruplo_exp_4 ::= 
cuadruplo_exp_5 ::= 
factor ::= LPAREN cuadruplo_exp_6 exp RPAREN cuadruplo_exp_7
			  | cons
			  | PLUS cons
			  | MINUS cons
			  
cuadruplo_exp_6 ::= 
cuadruplo_exp_7 ::= 
cons ::= seen_id_cons consarray exp_1
			| seen_int_cons exp_cons_int
			| seen_float_cons exp_cons_float
			| seen_double_cons exp_cons_double
			| seen_string_cons exp_cons_string
			| seen_bool
			| conslist
			
seen_bool ::= RES_TRUE
				| RES_FALSE
seen_id_cons ::= ID
seen_float_cons ::= CTE_FLOAT
seen_double_cons ::= CTE_DOUBLE
seen_string_cons ::= CTE_STRING
seen_int_cons ::= CTE_INT
exp_1 ::= 
exp_cons_int ::= 
exp_cons_float ::= 
exp_cons_double ::= 
exp_cons_string ::= 
main ::= RES_START comienza_main COL bloque RES_END 
comienza_main ::= 
consarray ::= is_dim LBRACKET dim_pos RBRACKET
				| empty
is_dim ::= 
dim_pos ::= seen_int_pos dim_pos_2
seen_int_pos ::= exp
dim_pos_2 ::= COMMA dim_pos
				| empty
conslist ::= ID EQUALS LCURLY conslist1 RCURLY 
conslist1 ::= cons 
				| cons COMMA conslist1
				
empty ::= 
